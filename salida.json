[
    {
        "Modified": "2023-05-02T15:59:00",
        "Published": "2023-04-21T16:15:00",
        "access": {},
        "assigner": "3DS.Information-Security@3ds.com",
        "capec": [
            {
                "id": "591",
                "name": "Reflected XSS",
                "prerequisites": "An application that leverages a client-side web browser with scripting enabled. An application that fail to adequately sanitize or encode untrusted input.",
                "related_weakness": [
                    "79"
                ],
                "solutions": "Use browser technologies that do not allow client-side scripting. Utilize strict type, character, and encoding enforcement. Ensure that all user-supplied input is validated before use.",
                "summary": "This type of attack is a form of Cross-Site Scripting (XSS) where a malicious script is \"reflected\" off a vulnerable web application and then executed by a victim's browser. The process starts with an adversary delivering a malicious script to a victim and convincing the victim to send the script to the vulnerable web application. The most common method of this is through a phishing email where the adversary embeds the malicious script with a URL that the victim then clicks on. In processing the subsequent request, the vulnerable web application incorrectly considers the malicious script as valid input and uses it to creates a reposnse that is then sent back to the victim. To launch a successful Reflected XSS attack, an adversary looks for places where user-input is used directly in the generation of a response. This often involves elements that are not expected to host scripts such as image tags (<img>), or the addition of event attibutes such as onload and onmouseover. These elements are often not subject to the same input validation, output encoding, and other content filtering and checking routines."
            },
            {
                "id": "209",
                "name": "XSS Using MIME Type Mismatch",
                "prerequisites": "The victim must follow a crafted link that references a scripting file that is mis-typed as a non-executable file. The victim's browser must detect the true type of a mis-labeled scripting file and invoke the appropriate script interpreter without first performing filtering on the content.",
                "related_weakness": [
                    "20",
                    "646",
                    "79"
                ],
                "solutions": "",
                "summary": "An adversary creates a file with scripting content but where the specified MIME type of the file is such that scripting is not expected. The adversary tricks the victim into accessing a URL that responds with the script file. Some browsers will detect that the specified MIME type of the file does not match the actual type of its content and will automatically switch to using an interpreter for the real content type. If the browser does not invoke script filters before doing this, the adversary's script may run on the target unsanitized, possibly revealing the victim's cookies or executing arbitrary script in their browser."
            },
            {
                "id": "588",
                "name": "DOM-Based XSS",
                "prerequisites": "An application that leverages a client-side web browser with scripting enabled. An application that manipulates the DOM via client-side scripting. An application that failS to adequately sanitize or encode untrusted input.",
                "related_weakness": [
                    "20",
                    "79",
                    "83"
                ],
                "solutions": "Use browser technologies that do not allow client-side scripting. Utilize proper character encoding for all output produced within client-site scripts manipulating the DOM. Ensure that all user-supplied input is validated before use.",
                "summary": "This type of attack is a form of Cross-Site Scripting (XSS) where a malicious script is inserted into the client-side HTML being parsed by a web browser. Content served by a vulnerable web application includes script code used to manipulate the Document Object Model (DOM). This script code either does not properly validate input, or does not perform proper output encoding, thus creating an opportunity for an adversary to inject a malicious script launch a XSS attack. A key distinction between other XSS attacks and DOM-based attacks is that in other XSS attacks, the malicious script runs when the vulnerable web page is initially loaded, while a DOM-based attack executes sometime after the page loads. Another distinction of DOM-based attacks is that in some cases, the malicious script is never sent to the vulnerable web server at all. An attack like this is guaranteed to bypass any server-side filtering attempts to protect users."
            },
            {
                "id": "592",
                "name": "Stored XSS",
                "prerequisites": "An application that leverages a client-side web browser with scripting enabled. An application that fails to adequately sanitize or encode untrusted input. An application that stores information provided by the user in data storage of some kind.",
                "related_weakness": [
                    "79"
                ],
                "solutions": "Use browser technologies that do not allow client-side scripting. Utilize strict type, character, and encoding enforcement. Ensure that all user-supplied input is validated before being stored.",
                "summary": "This type of attack is a form of Cross-site Scripting (XSS) where a malicious script is persistenly \"stored\" within the data storage of a vulnerable web application. Initially presented by an adversary to the vulnerable web application, the malicious script is incorrectly considered valid input and is not properly encoded by the web application. A victim is then convinced to use the web application in a way that creates a response that includes the malicious script. This response is subsequently sent to the victim and the malicious script is executed by the victim's browser. To launch a successful Stored XSS attack, an adversary looks for places where stored input data is used in the generation of a response. This often involves elements that are not expected to host scripts such as image tags (<img>), or the addition of event attibutes such as onload and onmouseover. These elements are often not subject to the same input validation, output encoding, and other content filtering and checking routines."
            },
            {
                "id": "85",
                "name": "AJAX Fingerprinting",
                "prerequisites": "The user must allow JavaScript to execute in their browser",
                "related_weakness": [
                    "113",
                    "116",
                    "184",
                    "20",
                    "348",
                    "692",
                    "712",
                    "79",
                    "86",
                    "96"
                ],
                "solutions": "Design: Use browser technologies that do not allow client side scripting. Design: Utilize strict type, character, and encoding enforcement Implementation: Ensure all content that is delivered to client is sanitized against an acceptable content specification. Implementation: Perform input validation for all remote content. Implementation: Perform output validation for all remote content. Implementation: Disable scripting languages such as JavaScript in browser Implementation: Patching software. There are many attack vectors for XSS on the client side and the server side. Many vulnerabilities are fixed in service packs for browser, web servers, and plug in technologies, staying current on patch release that deal with XSS countermeasures mitigates this.",
                "summary": "This attack utilizes the frequent client-server roundtrips in Ajax conversation to scan a system. While Ajax does not open up new vulnerabilities per se, it does optimize them from an attacker point of view. In many XSS attacks the attacker must get a \"hole in one\" and successfully exploit the vulnerability on the victim side the first time, once the client is redirected the attacker has many chances to engage in follow on probes, but there is only one first chance. In a widely used web application this is not a major problem because 1 in a 1,000 is good enough in a widely used application. A common first step for an attacker is to footprint the environment to understand what attacks will work. Since footprinting relies on enumeration, the conversational pattern of rapid, multiple requests and responses that are typical in Ajax applications enable an attacker to look for many vulnerabilities, well-known ports, network locations and so on."
            },
            {
                "id": "63",
                "name": "Cross-Site Scripting (XSS)",
                "prerequisites": "Target client software must be a client that allows scripting communication from remote hosts, such as a JavaScript-enabled Web Browser.",
                "related_weakness": [
                    "20",
                    "79"
                ],
                "solutions": "Design: Use browser technologies that do not allow client side scripting. Design: Utilize strict type, character, and encoding enforcement Design: Server side developers should not proxy content via XHR or other means, if a http proxy for remote content is setup on the server side, the client's browser has no way of discerning where the data is originating from. Implementation: Ensure all content that is delivered to client is sanitized against an acceptable content specification. Implementation: Perform input validation for all remote content. Implementation: Perform output validation for all remote content. Implementation: Session tokens for specific host Implementation: Patching software. There are many attack vectors for XSS on the client side and the server side. Many vulnerabilities are fixed in service packs for browser, web servers, and plug in technologies, staying current on patch release that deal with XSS countermeasures mitigates this.",
                "summary": "An adversary embeds malicious scripts in content that will be served to web browsers. The goal of the attack is for the target software, the client-side browser, to execute the script with the users' privilege level. An attack of this type exploits a programs' vulnerabilities that are brought on by allowing remote hosts to execute code and scripts. Web browsers, for example, have some simple security controls in place, but if a remote attacker is allowed to execute scripts (through injecting them in to user-generated content like bulletin boards) then these controls may be bypassed. Further, these attacks are very difficult for an end user to detect."
            }
        ],
        "cvss": null,
        "cwe": "CWE-79",
        "id": "CVE-2023-2139",
        "impact": {},
        "last-modified": "2023-05-02T15:59:00",
        "references": [
            "https://www.3ds.com/vulnerability/advisories"
        ],
        "summary": "\nA reflected Cross-site Scripting (XSS) Vulnerability in DELMIA Apriso Release 2017 through Release 2022 allows an attacker to execute arbitrary script code.\n\n",
        "vulnerable_configuration": [
            "cpe:2.3:a:3ds:delmia_apriso:*:*:*:*:*:*:*:*"
        ],
        "vulnerable_configuration_cpe_2_2": [],
        "vulnerable_product": [
            "cpe:2.3:a:3ds:delmia_apriso:*:*:*:*:*:*:*:*"
        ]
    },
    {
        "Modified": "2023-05-02T15:47:00",
        "Published": "2023-04-21T10:15:00",
        "access": {},
        "assigner": "cna@vuldb.com",
        "capec": [
            {
                "id": "7",
                "name": "Blind SQL Injection",
                "prerequisites": "SQL queries used by the application to store, retrieve or modify data. User-controllable input that is not properly validated by the application as part of SQL queries.",
                "related_weakness": [
                    "20",
                    "209",
                    "697",
                    "707",
                    "713",
                    "74",
                    "89"
                ],
                "solutions": "Security by Obscurity is not a solution to preventing SQL Injection. Rather than suppress error messages and exceptions, the application must handle them gracefully, returning either a custom error page or redirecting the user to a default page, without revealing any information about the database or the application internals. Strong input validation - All user-controllable input must be validated and filtered for illegal characters as well as SQL content. Keywords such as UNION, SELECT or INSERT must be filtered in addition to characters such as a single-quote(') or SQL-comments (--) based on the context in which they appear.",
                "summary": "Blind SQL Injection results from an insufficient mitigation for SQL Injection. Although suppressing database error messages are considered best practice, the suppression alone is not sufficient to prevent SQL Injection. Blind SQL Injection is a form of SQL Injection that overcomes the lack of error messages. Without the error messages that facilitate SQL Injection, the adversary constructs input strings that probe the target through simple Boolean SQL expressions. The adversary can determine if the syntax and structure of the injection was successful based on whether the query was executed or not. Applied iteratively, the adversary determines how and where the target is vulnerable to SQL Injection."
            },
            {
                "id": "109",
                "name": "Object Relational Mapping Injection",
                "prerequisites": "An application uses data access layer generated by an ORM tool or framework An application uses user supplied data in queries executed against the database The separation between data plane and control plane is not ensured, through either developer error or an underlying weakness in the data access layer code generation framework",
                "related_weakness": [
                    "100",
                    "20",
                    "564",
                    "89"
                ],
                "solutions": "Remember to understand how to use the data access methods generated by the ORM tool / framework properly in a way that would leverage the built-in security mechanisms of the framework Ensure to keep up to date with security relevant updates to the persistence framework used within your application.",
                "summary": "An attacker leverages a weakness present in the database access layer code generated with an Object Relational Mapping (ORM) tool or a weakness in the way that a developer used a persistence framework to inject his or her own SQL commands to be executed against the underlying database. The attack here is similar to plain SQL injection, except that the application does not use JDBC to directly talk to the database, but instead it uses a data access layer generated by an ORM tool or framework (e.g. Hibernate). While most of the time code generated by an ORM tool contains safe access methods that are immune to SQL injection, sometimes either due to some weakness in the generated code or due to the fact that the developer failed to use the generated access methods properly, SQL injection is still possible."
            },
            {
                "id": "110",
                "name": "SQL Injection through SOAP Parameter Tampering",
                "prerequisites": "SOAP messages are used as a communication mechanism in the system SOAP parameters are not properly validated at the service provider The service provider does not properly utilize parameter binding when building SQL queries",
                "related_weakness": [
                    "20",
                    "89"
                ],
                "solutions": "Properly validate and sanitize/reject user input at the service provider. Ensure that prepared statements or other mechanism that enables parameter binding is used when accessing the database in a way that would prevent the attackers' supplied data from controlling the structure of the executed query. At the database level, ensure that the database user used by the application in a particular context has the minimum needed privileges to the database that are needed to perform the operation. When possible, run queries against pre-generated views rather than the tables directly.",
                "summary": "An attacker modifies the parameters of the SOAP message that is sent from the service consumer to the service provider to initiate a SQL injection attack. On the service provider side, the SOAP message is parsed and parameters are not properly validated before being used to access a database in a way that does not use parameter binding, thus enabling the attacker to control the structure of the executed SQL query. This pattern describes a SQL injection attack with the delivery mechanism being a SOAP message."
            },
            {
                "id": "66",
                "name": "SQL Injection",
                "prerequisites": "SQL queries used by the application to store, retrieve or modify data. User-controllable input that is not properly validated by the application as part of SQL queries.",
                "related_weakness": [
                    "20",
                    "697",
                    "707",
                    "713",
                    "74",
                    "89"
                ],
                "solutions": "Strong input validation - All user-controllable input must be validated and filtered for illegal characters as well as SQL content. Keywords such as UNION, SELECT or INSERT must be filtered in addition to characters such as a single-quote(') or SQL-comments (--) based on the context in which they appear. Use of parameterized queries or stored procedures - Parameterization causes the input to be restricted to certain domains, such as strings or integers, and any input outside such domains is considered invalid and the query fails. Note that SQL Injection is possible even in the presence of stored procedures if the eventual query is constructed dynamically. Use of custom error pages - Attackers can glean information about the nature of queries from descriptive error messages. Input validation must be coupled with customized error pages that inform about an error without disclosing information about the database or application.",
                "summary": "This attack exploits target software that constructs SQL statements based on user input. An attacker crafts input strings so that when the target software constructs SQL statements based on the input, the resulting SQL statement performs actions other than those the application intended. SQL Injection results from failure of the application to appropriately validate input. When specially crafted user-controlled input consisting of SQL syntax is used without proper validation as part of SQL queries, it is possible to glean information from the database in ways not envisaged during application design. Depending upon the database and the design of the application, it may also be possible to leverage injection to have the database execute system-related commands of the attackers' choice. SQL Injection enables an attacker to talk directly to the database, thus bypassing the application completely. Successful injection can cause information disclosure as well as ability to add or modify data in the database. In order to successfully inject SQL and retrieve information from a database, an attacker:"
            },
            {
                "id": "470",
                "name": "Expanding Control over the Operating System from the Database",
                "prerequisites": "A vulnerable DBMS is usedA SQL injection exists that gives an attacker access to the database or an attacker has access to the DBMS via other means",
                "related_weakness": [
                    "250",
                    "89"
                ],
                "solutions": "Implementation: Remove / disable all unneeded / unused functions of the DBMS system that may allow an attacker to elevate privileges if compromised",
                "summary": "An attacker is able to leverage access gained to the database to read / write data to the file system, compromise the operating system, create a tunnel for accessing the host machine, and use this access to potentially attack other machines on the same network as the database machine. Traditionally SQL injections attacks are viewed as a way to gain unauthorized read access to the data stored in the database, modify the data in the database, delete the data, etc. However, almost every data base management system (DBMS) system includes facilities that if compromised allow an attacker complete access to the file system, operating system, and full access to the host running the database. The attacker can then use this privileged access to launch subsequent attacks. These facilities include dropping into a command shell, creating user defined functions that can call system level libraries present on the host machine, stored procedures, etc."
            },
            {
                "id": "108",
                "name": "Command Line Execution through SQL Injection",
                "prerequisites": "The application does not properly validate data before storing in the database Backend application implicitly trusts the data stored in the database Malicious data is used on the backend as a command line argument",
                "related_weakness": [
                    "114",
                    "20",
                    "74",
                    "78",
                    "89"
                ],
                "solutions": "Disable MSSQL xp_cmdshell directive on the database Properly validate the data (syntactically and semantically) before writing it to the database. Do not implicitly trust the data stored in the database. Re-validate it prior to usage to make sure that it is safe to use in a given context (e.g. as a command line argument).",
                "summary": "An attacker uses standard SQL injection methods to inject data into the command line for execution. This could be done directly through misuse of directives such as MSSQL_xp_cmdshell or indirectly through injection of data into the database that would be interpreted as shell commands. Sometime later, an unscrupulous backend application (or could be part of the functionality of the same application) fetches the injected data stored in the database and uses this data as command line arguments without performing proper validation. The malicious data escapes that data plane by spawning new commands to be executed on the host."
            }
        ],
        "cvss": null,
        "cwe": "CWE-89",
        "id": "CVE-2023-2214",
        "impact": {},
        "last-modified": "2023-05-02T15:47:00",
        "references": [
            "https://github.com/E1CHO/cve_hub/blob/main/Coffee%20Shop%20POS%20System/Coffee%20Shop%20POS%20System%20-%20vuln%206.pdf",
            "https://vuldb.com/?id.226979",
            "https://vuldb.com/?ctiid.226979"
        ],
        "summary": "A vulnerability was found in Campcodes Coffee Shop POS System 1.0. It has been rated as critical. This issue affects some unknown processing of the file /admin/sales/manage_sale.php. The manipulation of the argument id leads to sql injection. The attack may be initiated remotely. The exploit has been disclosed to the public and may be used. The associated identifier of this vulnerability is VDB-226979.",
        "vulnerable_configuration": [
            "cpe:2.3:a:coffee_shop_pos_system_project:coffee_shop_pos_system:1.0:*:*:*:*:*:*:*"
        ],
        "vulnerable_configuration_cpe_2_2": [],
        "vulnerable_product": [
            "cpe:2.3:a:coffee_shop_pos_system_project:coffee_shop_pos_system:1.0:*:*:*:*:*:*:*"
        ]
    },
    {
        "Modified": "2023-05-02T15:27:00",
        "Published": "2023-04-24T15:15:00",
        "access": {},
        "assigner": "audit@patchstack.com",
        "capec": [
            {
                "id": "591",
                "name": "Reflected XSS",
                "prerequisites": "An application that leverages a client-side web browser with scripting enabled. An application that fail to adequately sanitize or encode untrusted input.",
                "related_weakness": [
                    "79"
                ],
                "solutions": "Use browser technologies that do not allow client-side scripting. Utilize strict type, character, and encoding enforcement. Ensure that all user-supplied input is validated before use.",
                "summary": "This type of attack is a form of Cross-Site Scripting (XSS) where a malicious script is \"reflected\" off a vulnerable web application and then executed by a victim's browser. The process starts with an adversary delivering a malicious script to a victim and convincing the victim to send the script to the vulnerable web application. The most common method of this is through a phishing email where the adversary embeds the malicious script with a URL that the victim then clicks on. In processing the subsequent request, the vulnerable web application incorrectly considers the malicious script as valid input and uses it to creates a reposnse that is then sent back to the victim. To launch a successful Reflected XSS attack, an adversary looks for places where user-input is used directly in the generation of a response. This often involves elements that are not expected to host scripts such as image tags (<img>), or the addition of event attibutes such as onload and onmouseover. These elements are often not subject to the same input validation, output encoding, and other content filtering and checking routines."
            },
            {
                "id": "209",
                "name": "XSS Using MIME Type Mismatch",
                "prerequisites": "The victim must follow a crafted link that references a scripting file that is mis-typed as a non-executable file. The victim's browser must detect the true type of a mis-labeled scripting file and invoke the appropriate script interpreter without first performing filtering on the content.",
                "related_weakness": [
                    "20",
                    "646",
                    "79"
                ],
                "solutions": "",
                "summary": "An adversary creates a file with scripting content but where the specified MIME type of the file is such that scripting is not expected. The adversary tricks the victim into accessing a URL that responds with the script file. Some browsers will detect that the specified MIME type of the file does not match the actual type of its content and will automatically switch to using an interpreter for the real content type. If the browser does not invoke script filters before doing this, the adversary's script may run on the target unsanitized, possibly revealing the victim's cookies or executing arbitrary script in their browser."
            },
            {
                "id": "588",
                "name": "DOM-Based XSS",
                "prerequisites": "An application that leverages a client-side web browser with scripting enabled. An application that manipulates the DOM via client-side scripting. An application that failS to adequately sanitize or encode untrusted input.",
                "related_weakness": [
                    "20",
                    "79",
                    "83"
                ],
                "solutions": "Use browser technologies that do not allow client-side scripting. Utilize proper character encoding for all output produced within client-site scripts manipulating the DOM. Ensure that all user-supplied input is validated before use.",
                "summary": "This type of attack is a form of Cross-Site Scripting (XSS) where a malicious script is inserted into the client-side HTML being parsed by a web browser. Content served by a vulnerable web application includes script code used to manipulate the Document Object Model (DOM). This script code either does not properly validate input, or does not perform proper output encoding, thus creating an opportunity for an adversary to inject a malicious script launch a XSS attack. A key distinction between other XSS attacks and DOM-based attacks is that in other XSS attacks, the malicious script runs when the vulnerable web page is initially loaded, while a DOM-based attack executes sometime after the page loads. Another distinction of DOM-based attacks is that in some cases, the malicious script is never sent to the vulnerable web server at all. An attack like this is guaranteed to bypass any server-side filtering attempts to protect users."
            },
            {
                "id": "592",
                "name": "Stored XSS",
                "prerequisites": "An application that leverages a client-side web browser with scripting enabled. An application that fails to adequately sanitize or encode untrusted input. An application that stores information provided by the user in data storage of some kind.",
                "related_weakness": [
                    "79"
                ],
                "solutions": "Use browser technologies that do not allow client-side scripting. Utilize strict type, character, and encoding enforcement. Ensure that all user-supplied input is validated before being stored.",
                "summary": "This type of attack is a form of Cross-site Scripting (XSS) where a malicious script is persistenly \"stored\" within the data storage of a vulnerable web application. Initially presented by an adversary to the vulnerable web application, the malicious script is incorrectly considered valid input and is not properly encoded by the web application. A victim is then convinced to use the web application in a way that creates a response that includes the malicious script. This response is subsequently sent to the victim and the malicious script is executed by the victim's browser. To launch a successful Stored XSS attack, an adversary looks for places where stored input data is used in the generation of a response. This often involves elements that are not expected to host scripts such as image tags (<img>), or the addition of event attibutes such as onload and onmouseover. These elements are often not subject to the same input validation, output encoding, and other content filtering and checking routines."
            },
            {
                "id": "85",
                "name": "AJAX Fingerprinting",
                "prerequisites": "The user must allow JavaScript to execute in their browser",
                "related_weakness": [
                    "113",
                    "116",
                    "184",
                    "20",
                    "348",
                    "692",
                    "712",
                    "79",
                    "86",
                    "96"
                ],
                "solutions": "Design: Use browser technologies that do not allow client side scripting. Design: Utilize strict type, character, and encoding enforcement Implementation: Ensure all content that is delivered to client is sanitized against an acceptable content specification. Implementation: Perform input validation for all remote content. Implementation: Perform output validation for all remote content. Implementation: Disable scripting languages such as JavaScript in browser Implementation: Patching software. There are many attack vectors for XSS on the client side and the server side. Many vulnerabilities are fixed in service packs for browser, web servers, and plug in technologies, staying current on patch release that deal with XSS countermeasures mitigates this.",
                "summary": "This attack utilizes the frequent client-server roundtrips in Ajax conversation to scan a system. While Ajax does not open up new vulnerabilities per se, it does optimize them from an attacker point of view. In many XSS attacks the attacker must get a \"hole in one\" and successfully exploit the vulnerability on the victim side the first time, once the client is redirected the attacker has many chances to engage in follow on probes, but there is only one first chance. In a widely used web application this is not a major problem because 1 in a 1,000 is good enough in a widely used application. A common first step for an attacker is to footprint the environment to understand what attacks will work. Since footprinting relies on enumeration, the conversational pattern of rapid, multiple requests and responses that are typical in Ajax applications enable an attacker to look for many vulnerabilities, well-known ports, network locations and so on."
            },
            {
                "id": "63",
                "name": "Cross-Site Scripting (XSS)",
                "prerequisites": "Target client software must be a client that allows scripting communication from remote hosts, such as a JavaScript-enabled Web Browser.",
                "related_weakness": [
                    "20",
                    "79"
                ],
                "solutions": "Design: Use browser technologies that do not allow client side scripting. Design: Utilize strict type, character, and encoding enforcement Design: Server side developers should not proxy content via XHR or other means, if a http proxy for remote content is setup on the server side, the client's browser has no way of discerning where the data is originating from. Implementation: Ensure all content that is delivered to client is sanitized against an acceptable content specification. Implementation: Perform input validation for all remote content. Implementation: Perform output validation for all remote content. Implementation: Session tokens for specific host Implementation: Patching software. There are many attack vectors for XSS on the client side and the server side. Many vulnerabilities are fixed in service packs for browser, web servers, and plug in technologies, staying current on patch release that deal with XSS countermeasures mitigates this.",
                "summary": "An adversary embeds malicious scripts in content that will be served to web browsers. The goal of the attack is for the target software, the client-side browser, to execute the script with the users' privilege level. An attack of this type exploits a programs' vulnerabilities that are brought on by allowing remote hosts to execute code and scripts. Web browsers, for example, have some simple security controls in place, but if a remote attacker is allowed to execute scripts (through injecting them in to user-generated content like bulletin boards) then these controls may be bypassed. Further, these attacks are very difficult for an end user to detect."
            }
        ],
        "cvss": null,
        "cwe": "CWE-79",
        "id": "CVE-2022-45084",
        "impact": {},
        "last-modified": "2023-05-02T15:27:00",
        "references": [
            "https://patchstack.com/database/vulnerability/loginizer/wordpress-loginizer-plugin-1-7-5-unauth-reflected-cross-site-scripting-xss-vulnerability?_s_id=cve"
        ],
        "summary": "Unauth. Reflected Cross-Site Scripting (XSS) vulnerability in Softaculous Loginizer plugin <=\u00a01.7.5 versions.",
        "vulnerable_configuration": [
            "cpe:2.3:a:loginizer:loginizer:1.0:*:*:*:*:wordpress:*:*",
            "cpe:2.3:a:loginizer:loginizer:1.0.1:*:*:*:*:wordpress:*:*",
            "cpe:2.3:a:loginizer:loginizer:1.0.2:*:*:*:*:wordpress:*:*",
            "cpe:2.3:a:loginizer:loginizer:1.1.0:*:*:*:*:wordpress:*:*",
            "cpe:2.3:a:loginizer:loginizer:1.1.1:*:*:*:*:wordpress:*:*",
            "cpe:2.3:a:loginizer:loginizer:1.2.0:*:*:*:*:wordpress:*:*",
            "cpe:2.3:a:loginizer:loginizer:1.3.0:*:*:*:*:wordpress:*:*",
            "cpe:2.3:a:loginizer:loginizer:1.3.1:*:*:*:*:wordpress:*:*",
            "cpe:2.3:a:loginizer:loginizer:1.3.2:*:*:*:*:wordpress:*:*",
            "cpe:2.3:a:loginizer:loginizer:1.3.3:*:*:*:*:wordpress:*:*",
            "cpe:2.3:a:loginizer:loginizer:1.3.4:*:*:*:*:wordpress:*:*",
            "cpe:2.3:a:loginizer:loginizer:1.3.5:*:*:*:*:wordpress:*:*",
            "cpe:2.3:a:loginizer:loginizer:1.3.6:*:*:*:*:wordpress:*:*",
            "cpe:2.3:a:loginizer:loginizer:1.3.7:*:*:*:*:wordpress:*:*",
            "cpe:2.3:a:loginizer:loginizer:1.3.8:*:*:*:*:wordpress:*:*",
            "cpe:2.3:a:loginizer:loginizer:1.3.9:*:*:*:*:wordpress:*:*",
            "cpe:2.3:a:loginizer:loginizer:1.4.0:*:*:*:*:wordpress:*:*",
            "cpe:2.3:a:loginizer:loginizer:1.4.1:*:*:*:*:wordpress:*:*",
            "cpe:2.3:a:loginizer:loginizer:1.4.2:*:*:*:*:wordpress:*:*",
            "cpe:2.3:a:loginizer:loginizer:1.4.3:*:*:*:*:wordpress:*:*",
            "cpe:2.3:a:loginizer:loginizer:1.4.4:*:*:*:*:wordpress:*:*",
            "cpe:2.3:a:loginizer:loginizer:1.4.5:*:*:*:*:wordpress:*:*",
            "cpe:2.3:a:loginizer:loginizer:1.4.6:*:*:*:*:wordpress:*:*",
            "cpe:2.3:a:loginizer:loginizer:1.4.7:*:*:*:*:wordpress:*:*",
            "cpe:2.3:a:loginizer:loginizer:1.4.8:*:*:*:*:wordpress:*:*",
            "cpe:2.3:a:loginizer:loginizer:1.4.9:*:*:*:*:wordpress:*:*",
            "cpe:2.3:a:loginizer:loginizer:1.5.0:*:*:*:*:wordpress:*:*",
            "cpe:2.3:a:loginizer:loginizer:1.5.1:*:*:*:*:wordpress:*:*",
            "cpe:2.3:a:loginizer:loginizer:1.5.2:*:*:*:*:wordpress:*:*",
            "cpe:2.3:a:loginizer:loginizer:1.5.3:*:*:*:*:wordpress:*:*",
            "cpe:2.3:a:loginizer:loginizer:1.5.4:*:*:*:*:wordpress:*:*",
            "cpe:2.3:a:loginizer:loginizer:1.5.5:*:*:*:*:wordpress:*:*",
            "cpe:2.3:a:loginizer:loginizer:1.5.6:*:*:*:*:wordpress:*:*",
            "cpe:2.3:a:loginizer:loginizer:1.5.7:*:*:*:*:wordpress:*:*",
            "cpe:2.3:a:loginizer:loginizer:1.5.8:*:*:*:*:wordpress:*:*",
            "cpe:2.3:a:loginizer:loginizer:1.5.9:*:*:*:*:wordpress:*:*",
            "cpe:2.3:a:loginizer:loginizer:1.6.0:*:*:*:*:wordpress:*:*",
            "cpe:2.3:a:loginizer:loginizer:1.6.1:*:*:*:*:wordpress:*:*",
            "cpe:2.3:a:loginizer:loginizer:1.6.2:*:*:*:*:wordpress:*:*",
            "cpe:2.3:a:loginizer:loginizer:1.6.3:*:*:*:*:wordpress:*:*",
            "cpe:2.3:a:loginizer:loginizer:1.6.4:*:*:*:*:wordpress:*:*"
        ],
        "vulnerable_configuration_cpe_2_2": [],
        "vulnerable_product": [
            "cpe:2.3:a:loginizer:loginizer:1.0:*:*:*:*:wordpress:*:*",
            "cpe:2.3:a:loginizer:loginizer:1.0.1:*:*:*:*:wordpress:*:*",
            "cpe:2.3:a:loginizer:loginizer:1.0.2:*:*:*:*:wordpress:*:*",
            "cpe:2.3:a:loginizer:loginizer:1.1.0:*:*:*:*:wordpress:*:*",
            "cpe:2.3:a:loginizer:loginizer:1.1.1:*:*:*:*:wordpress:*:*",
            "cpe:2.3:a:loginizer:loginizer:1.2.0:*:*:*:*:wordpress:*:*",
            "cpe:2.3:a:loginizer:loginizer:1.3.0:*:*:*:*:wordpress:*:*",
            "cpe:2.3:a:loginizer:loginizer:1.3.1:*:*:*:*:wordpress:*:*",
            "cpe:2.3:a:loginizer:loginizer:1.3.2:*:*:*:*:wordpress:*:*",
            "cpe:2.3:a:loginizer:loginizer:1.3.3:*:*:*:*:wordpress:*:*",
            "cpe:2.3:a:loginizer:loginizer:1.3.4:*:*:*:*:wordpress:*:*",
            "cpe:2.3:a:loginizer:loginizer:1.3.5:*:*:*:*:wordpress:*:*",
            "cpe:2.3:a:loginizer:loginizer:1.3.6:*:*:*:*:wordpress:*:*",
            "cpe:2.3:a:loginizer:loginizer:1.3.7:*:*:*:*:wordpress:*:*",
            "cpe:2.3:a:loginizer:loginizer:1.3.8:*:*:*:*:wordpress:*:*",
            "cpe:2.3:a:loginizer:loginizer:1.3.9:*:*:*:*:wordpress:*:*",
            "cpe:2.3:a:loginizer:loginizer:1.4.0:*:*:*:*:wordpress:*:*",
            "cpe:2.3:a:loginizer:loginizer:1.4.1:*:*:*:*:wordpress:*:*",
            "cpe:2.3:a:loginizer:loginizer:1.4.2:*:*:*:*:wordpress:*:*",
            "cpe:2.3:a:loginizer:loginizer:1.4.3:*:*:*:*:wordpress:*:*",
            "cpe:2.3:a:loginizer:loginizer:1.4.4:*:*:*:*:wordpress:*:*",
            "cpe:2.3:a:loginizer:loginizer:1.4.5:*:*:*:*:wordpress:*:*",
            "cpe:2.3:a:loginizer:loginizer:1.4.6:*:*:*:*:wordpress:*:*",
            "cpe:2.3:a:loginizer:loginizer:1.4.7:*:*:*:*:wordpress:*:*",
            "cpe:2.3:a:loginizer:loginizer:1.4.8:*:*:*:*:wordpress:*:*",
            "cpe:2.3:a:loginizer:loginizer:1.4.9:*:*:*:*:wordpress:*:*",
            "cpe:2.3:a:loginizer:loginizer:1.5.0:*:*:*:*:wordpress:*:*",
            "cpe:2.3:a:loginizer:loginizer:1.5.1:*:*:*:*:wordpress:*:*",
            "cpe:2.3:a:loginizer:loginizer:1.5.2:*:*:*:*:wordpress:*:*",
            "cpe:2.3:a:loginizer:loginizer:1.5.3:*:*:*:*:wordpress:*:*",
            "cpe:2.3:a:loginizer:loginizer:1.5.4:*:*:*:*:wordpress:*:*",
            "cpe:2.3:a:loginizer:loginizer:1.5.5:*:*:*:*:wordpress:*:*",
            "cpe:2.3:a:loginizer:loginizer:1.5.6:*:*:*:*:wordpress:*:*",
            "cpe:2.3:a:loginizer:loginizer:1.5.7:*:*:*:*:wordpress:*:*",
            "cpe:2.3:a:loginizer:loginizer:1.5.8:*:*:*:*:wordpress:*:*",
            "cpe:2.3:a:loginizer:loginizer:1.5.9:*:*:*:*:wordpress:*:*",
            "cpe:2.3:a:loginizer:loginizer:1.6.0:*:*:*:*:wordpress:*:*",
            "cpe:2.3:a:loginizer:loginizer:1.6.1:*:*:*:*:wordpress:*:*",
            "cpe:2.3:a:loginizer:loginizer:1.6.2:*:*:*:*:wordpress:*:*",
            "cpe:2.3:a:loginizer:loginizer:1.6.3:*:*:*:*:wordpress:*:*",
            "cpe:2.3:a:loginizer:loginizer:1.6.4:*:*:*:*:wordpress:*:*"
        ]
    },
    {
        "Modified": "2023-05-02T15:26:00",
        "Published": "2023-04-24T15:15:00",
        "access": {},
        "assigner": "audit@patchstack.com",
        "capec": [
            {
                "id": "591",
                "name": "Reflected XSS",
                "prerequisites": "An application that leverages a client-side web browser with scripting enabled. An application that fail to adequately sanitize or encode untrusted input.",
                "related_weakness": [
                    "79"
                ],
                "solutions": "Use browser technologies that do not allow client-side scripting. Utilize strict type, character, and encoding enforcement. Ensure that all user-supplied input is validated before use.",
                "summary": "This type of attack is a form of Cross-Site Scripting (XSS) where a malicious script is \"reflected\" off a vulnerable web application and then executed by a victim's browser. The process starts with an adversary delivering a malicious script to a victim and convincing the victim to send the script to the vulnerable web application. The most common method of this is through a phishing email where the adversary embeds the malicious script with a URL that the victim then clicks on. In processing the subsequent request, the vulnerable web application incorrectly considers the malicious script as valid input and uses it to creates a reposnse that is then sent back to the victim. To launch a successful Reflected XSS attack, an adversary looks for places where user-input is used directly in the generation of a response. This often involves elements that are not expected to host scripts such as image tags (<img>), or the addition of event attibutes such as onload and onmouseover. These elements are often not subject to the same input validation, output encoding, and other content filtering and checking routines."
            },
            {
                "id": "209",
                "name": "XSS Using MIME Type Mismatch",
                "prerequisites": "The victim must follow a crafted link that references a scripting file that is mis-typed as a non-executable file. The victim's browser must detect the true type of a mis-labeled scripting file and invoke the appropriate script interpreter without first performing filtering on the content.",
                "related_weakness": [
                    "20",
                    "646",
                    "79"
                ],
                "solutions": "",
                "summary": "An adversary creates a file with scripting content but where the specified MIME type of the file is such that scripting is not expected. The adversary tricks the victim into accessing a URL that responds with the script file. Some browsers will detect that the specified MIME type of the file does not match the actual type of its content and will automatically switch to using an interpreter for the real content type. If the browser does not invoke script filters before doing this, the adversary's script may run on the target unsanitized, possibly revealing the victim's cookies or executing arbitrary script in their browser."
            },
            {
                "id": "588",
                "name": "DOM-Based XSS",
                "prerequisites": "An application that leverages a client-side web browser with scripting enabled. An application that manipulates the DOM via client-side scripting. An application that failS to adequately sanitize or encode untrusted input.",
                "related_weakness": [
                    "20",
                    "79",
                    "83"
                ],
                "solutions": "Use browser technologies that do not allow client-side scripting. Utilize proper character encoding for all output produced within client-site scripts manipulating the DOM. Ensure that all user-supplied input is validated before use.",
                "summary": "This type of attack is a form of Cross-Site Scripting (XSS) where a malicious script is inserted into the client-side HTML being parsed by a web browser. Content served by a vulnerable web application includes script code used to manipulate the Document Object Model (DOM). This script code either does not properly validate input, or does not perform proper output encoding, thus creating an opportunity for an adversary to inject a malicious script launch a XSS attack. A key distinction between other XSS attacks and DOM-based attacks is that in other XSS attacks, the malicious script runs when the vulnerable web page is initially loaded, while a DOM-based attack executes sometime after the page loads. Another distinction of DOM-based attacks is that in some cases, the malicious script is never sent to the vulnerable web server at all. An attack like this is guaranteed to bypass any server-side filtering attempts to protect users."
            },
            {
                "id": "592",
                "name": "Stored XSS",
                "prerequisites": "An application that leverages a client-side web browser with scripting enabled. An application that fails to adequately sanitize or encode untrusted input. An application that stores information provided by the user in data storage of some kind.",
                "related_weakness": [
                    "79"
                ],
                "solutions": "Use browser technologies that do not allow client-side scripting. Utilize strict type, character, and encoding enforcement. Ensure that all user-supplied input is validated before being stored.",
                "summary": "This type of attack is a form of Cross-site Scripting (XSS) where a malicious script is persistenly \"stored\" within the data storage of a vulnerable web application. Initially presented by an adversary to the vulnerable web application, the malicious script is incorrectly considered valid input and is not properly encoded by the web application. A victim is then convinced to use the web application in a way that creates a response that includes the malicious script. This response is subsequently sent to the victim and the malicious script is executed by the victim's browser. To launch a successful Stored XSS attack, an adversary looks for places where stored input data is used in the generation of a response. This often involves elements that are not expected to host scripts such as image tags (<img>), or the addition of event attibutes such as onload and onmouseover. These elements are often not subject to the same input validation, output encoding, and other content filtering and checking routines."
            },
            {
                "id": "85",
                "name": "AJAX Fingerprinting",
                "prerequisites": "The user must allow JavaScript to execute in their browser",
                "related_weakness": [
                    "113",
                    "116",
                    "184",
                    "20",
                    "348",
                    "692",
                    "712",
                    "79",
                    "86",
                    "96"
                ],
                "solutions": "Design: Use browser technologies that do not allow client side scripting. Design: Utilize strict type, character, and encoding enforcement Implementation: Ensure all content that is delivered to client is sanitized against an acceptable content specification. Implementation: Perform input validation for all remote content. Implementation: Perform output validation for all remote content. Implementation: Disable scripting languages such as JavaScript in browser Implementation: Patching software. There are many attack vectors for XSS on the client side and the server side. Many vulnerabilities are fixed in service packs for browser, web servers, and plug in technologies, staying current on patch release that deal with XSS countermeasures mitigates this.",
                "summary": "This attack utilizes the frequent client-server roundtrips in Ajax conversation to scan a system. While Ajax does not open up new vulnerabilities per se, it does optimize them from an attacker point of view. In many XSS attacks the attacker must get a \"hole in one\" and successfully exploit the vulnerability on the victim side the first time, once the client is redirected the attacker has many chances to engage in follow on probes, but there is only one first chance. In a widely used web application this is not a major problem because 1 in a 1,000 is good enough in a widely used application. A common first step for an attacker is to footprint the environment to understand what attacks will work. Since footprinting relies on enumeration, the conversational pattern of rapid, multiple requests and responses that are typical in Ajax applications enable an attacker to look for many vulnerabilities, well-known ports, network locations and so on."
            },
            {
                "id": "63",
                "name": "Cross-Site Scripting (XSS)",
                "prerequisites": "Target client software must be a client that allows scripting communication from remote hosts, such as a JavaScript-enabled Web Browser.",
                "related_weakness": [
                    "20",
                    "79"
                ],
                "solutions": "Design: Use browser technologies that do not allow client side scripting. Design: Utilize strict type, character, and encoding enforcement Design: Server side developers should not proxy content via XHR or other means, if a http proxy for remote content is setup on the server side, the client's browser has no way of discerning where the data is originating from. Implementation: Ensure all content that is delivered to client is sanitized against an acceptable content specification. Implementation: Perform input validation for all remote content. Implementation: Perform output validation for all remote content. Implementation: Session tokens for specific host Implementation: Patching software. There are many attack vectors for XSS on the client side and the server side. Many vulnerabilities are fixed in service packs for browser, web servers, and plug in technologies, staying current on patch release that deal with XSS countermeasures mitigates this.",
                "summary": "An adversary embeds malicious scripts in content that will be served to web browsers. The goal of the attack is for the target software, the client-side browser, to execute the script with the users' privilege level. An attack of this type exploits a programs' vulnerabilities that are brought on by allowing remote hosts to execute code and scripts. Web browsers, for example, have some simple security controls in place, but if a remote attacker is allowed to execute scripts (through injecting them in to user-generated content like bulletin boards) then these controls may be bypassed. Further, these attacks are very difficult for an end user to detect."
            }
        ],
        "cvss": null,
        "cwe": "CWE-79",
        "id": "CVE-2022-47598",
        "impact": {},
        "last-modified": "2023-05-02T15:26:00",
        "references": [
            "https://patchstack.com/database/vulnerability/wp-super-popup/wordpress-wp-super-popup-plugin-1-1-2-cross-site-scripting-xss?_s_id=cve"
        ],
        "summary": "Auth. (admin+) Stored Cross-Site Scripting (XSS) vulnerability in WP Plugins Pro WP Super Popup plugin\u00a0<= 1.1.2 versions.",
        "vulnerable_configuration": [
            "cpe:2.3:a:wp_super_popup_project:wp_super_popup:*:*:*:*:*:wordpress:*:*"
        ],
        "vulnerable_configuration_cpe_2_2": [],
        "vulnerable_product": [
            "cpe:2.3:a:wp_super_popup_project:wp_super_popup:*:*:*:*:*:wordpress:*:*"
        ]
    },
    {
        "Modified": "2023-05-02T15:26:00",
        "Published": "2023-04-21T10:15:00",
        "access": {},
        "assigner": "cna@vuldb.com",
        "capec": [
            {
                "id": "7",
                "name": "Blind SQL Injection",
                "prerequisites": "SQL queries used by the application to store, retrieve or modify data. User-controllable input that is not properly validated by the application as part of SQL queries.",
                "related_weakness": [
                    "20",
                    "209",
                    "697",
                    "707",
                    "713",
                    "74",
                    "89"
                ],
                "solutions": "Security by Obscurity is not a solution to preventing SQL Injection. Rather than suppress error messages and exceptions, the application must handle them gracefully, returning either a custom error page or redirecting the user to a default page, without revealing any information about the database or the application internals. Strong input validation - All user-controllable input must be validated and filtered for illegal characters as well as SQL content. Keywords such as UNION, SELECT or INSERT must be filtered in addition to characters such as a single-quote(') or SQL-comments (--) based on the context in which they appear.",
                "summary": "Blind SQL Injection results from an insufficient mitigation for SQL Injection. Although suppressing database error messages are considered best practice, the suppression alone is not sufficient to prevent SQL Injection. Blind SQL Injection is a form of SQL Injection that overcomes the lack of error messages. Without the error messages that facilitate SQL Injection, the adversary constructs input strings that probe the target through simple Boolean SQL expressions. The adversary can determine if the syntax and structure of the injection was successful based on whether the query was executed or not. Applied iteratively, the adversary determines how and where the target is vulnerable to SQL Injection."
            },
            {
                "id": "109",
                "name": "Object Relational Mapping Injection",
                "prerequisites": "An application uses data access layer generated by an ORM tool or framework An application uses user supplied data in queries executed against the database The separation between data plane and control plane is not ensured, through either developer error or an underlying weakness in the data access layer code generation framework",
                "related_weakness": [
                    "100",
                    "20",
                    "564",
                    "89"
                ],
                "solutions": "Remember to understand how to use the data access methods generated by the ORM tool / framework properly in a way that would leverage the built-in security mechanisms of the framework Ensure to keep up to date with security relevant updates to the persistence framework used within your application.",
                "summary": "An attacker leverages a weakness present in the database access layer code generated with an Object Relational Mapping (ORM) tool or a weakness in the way that a developer used a persistence framework to inject his or her own SQL commands to be executed against the underlying database. The attack here is similar to plain SQL injection, except that the application does not use JDBC to directly talk to the database, but instead it uses a data access layer generated by an ORM tool or framework (e.g. Hibernate). While most of the time code generated by an ORM tool contains safe access methods that are immune to SQL injection, sometimes either due to some weakness in the generated code or due to the fact that the developer failed to use the generated access methods properly, SQL injection is still possible."
            },
            {
                "id": "110",
                "name": "SQL Injection through SOAP Parameter Tampering",
                "prerequisites": "SOAP messages are used as a communication mechanism in the system SOAP parameters are not properly validated at the service provider The service provider does not properly utilize parameter binding when building SQL queries",
                "related_weakness": [
                    "20",
                    "89"
                ],
                "solutions": "Properly validate and sanitize/reject user input at the service provider. Ensure that prepared statements or other mechanism that enables parameter binding is used when accessing the database in a way that would prevent the attackers' supplied data from controlling the structure of the executed query. At the database level, ensure that the database user used by the application in a particular context has the minimum needed privileges to the database that are needed to perform the operation. When possible, run queries against pre-generated views rather than the tables directly.",
                "summary": "An attacker modifies the parameters of the SOAP message that is sent from the service consumer to the service provider to initiate a SQL injection attack. On the service provider side, the SOAP message is parsed and parameters are not properly validated before being used to access a database in a way that does not use parameter binding, thus enabling the attacker to control the structure of the executed SQL query. This pattern describes a SQL injection attack with the delivery mechanism being a SOAP message."
            },
            {
                "id": "66",
                "name": "SQL Injection",
                "prerequisites": "SQL queries used by the application to store, retrieve or modify data. User-controllable input that is not properly validated by the application as part of SQL queries.",
                "related_weakness": [
                    "20",
                    "697",
                    "707",
                    "713",
                    "74",
                    "89"
                ],
                "solutions": "Strong input validation - All user-controllable input must be validated and filtered for illegal characters as well as SQL content. Keywords such as UNION, SELECT or INSERT must be filtered in addition to characters such as a single-quote(') or SQL-comments (--) based on the context in which they appear. Use of parameterized queries or stored procedures - Parameterization causes the input to be restricted to certain domains, such as strings or integers, and any input outside such domains is considered invalid and the query fails. Note that SQL Injection is possible even in the presence of stored procedures if the eventual query is constructed dynamically. Use of custom error pages - Attackers can glean information about the nature of queries from descriptive error messages. Input validation must be coupled with customized error pages that inform about an error without disclosing information about the database or application.",
                "summary": "This attack exploits target software that constructs SQL statements based on user input. An attacker crafts input strings so that when the target software constructs SQL statements based on the input, the resulting SQL statement performs actions other than those the application intended. SQL Injection results from failure of the application to appropriately validate input. When specially crafted user-controlled input consisting of SQL syntax is used without proper validation as part of SQL queries, it is possible to glean information from the database in ways not envisaged during application design. Depending upon the database and the design of the application, it may also be possible to leverage injection to have the database execute system-related commands of the attackers' choice. SQL Injection enables an attacker to talk directly to the database, thus bypassing the application completely. Successful injection can cause information disclosure as well as ability to add or modify data in the database. In order to successfully inject SQL and retrieve information from a database, an attacker:"
            },
            {
                "id": "470",
                "name": "Expanding Control over the Operating System from the Database",
                "prerequisites": "A vulnerable DBMS is usedA SQL injection exists that gives an attacker access to the database or an attacker has access to the DBMS via other means",
                "related_weakness": [
                    "250",
                    "89"
                ],
                "solutions": "Implementation: Remove / disable all unneeded / unused functions of the DBMS system that may allow an attacker to elevate privileges if compromised",
                "summary": "An attacker is able to leverage access gained to the database to read / write data to the file system, compromise the operating system, create a tunnel for accessing the host machine, and use this access to potentially attack other machines on the same network as the database machine. Traditionally SQL injections attacks are viewed as a way to gain unauthorized read access to the data stored in the database, modify the data in the database, delete the data, etc. However, almost every data base management system (DBMS) system includes facilities that if compromised allow an attacker complete access to the file system, operating system, and full access to the host running the database. The attacker can then use this privileged access to launch subsequent attacks. These facilities include dropping into a command shell, creating user defined functions that can call system level libraries present on the host machine, stored procedures, etc."
            },
            {
                "id": "108",
                "name": "Command Line Execution through SQL Injection",
                "prerequisites": "The application does not properly validate data before storing in the database Backend application implicitly trusts the data stored in the database Malicious data is used on the backend as a command line argument",
                "related_weakness": [
                    "114",
                    "20",
                    "74",
                    "78",
                    "89"
                ],
                "solutions": "Disable MSSQL xp_cmdshell directive on the database Properly validate the data (syntactically and semantically) before writing it to the database. Do not implicitly trust the data stored in the database. Re-validate it prior to usage to make sure that it is safe to use in a given context (e.g. as a command line argument).",
                "summary": "An attacker uses standard SQL injection methods to inject data into the command line for execution. This could be done directly through misuse of directives such as MSSQL_xp_cmdshell or indirectly through injection of data into the database that would be interpreted as shell commands. Sometime later, an unscrupulous backend application (or could be part of the functionality of the same application) fetches the injected data stored in the database and uses this data as command line arguments without performing proper validation. The malicious data escapes that data plane by spawning new commands to be executed on the host."
            }
        ],
        "cvss": null,
        "cwe": "CWE-89",
        "id": "CVE-2023-2213",
        "impact": {},
        "last-modified": "2023-05-02T15:26:00",
        "references": [
            "https://github.com/E1CHO/cve_hub/blob/main/Coffee%20Shop%20POS%20System/Coffee%20Shop%20POS%20System%20-%20vuln%205.pdf",
            "https://vuldb.com/?id.226978",
            "https://vuldb.com/?ctiid.226978"
        ],
        "summary": "A vulnerability was found in Campcodes Coffee Shop POS System 1.0. It has been declared as critical. This vulnerability affects unknown code of the file /admin/products/manage_product.php. The manipulation of the argument id leads to sql injection. The attack can be initiated remotely. The exploit has been disclosed to the public and may be used. VDB-226978 is the identifier assigned to this vulnerability.",
        "vulnerable_configuration": [
            "cpe:2.3:a:coffee_shop_pos_system_project:coffee_shop_pos_system:1.0:*:*:*:*:*:*:*"
        ],
        "vulnerable_configuration_cpe_2_2": [],
        "vulnerable_product": [
            "cpe:2.3:a:coffee_shop_pos_system_project:coffee_shop_pos_system:1.0:*:*:*:*:*:*:*"
        ]
    },
    {
        "Modified": "2023-05-02T15:24:00",
        "Published": "2023-04-24T15:15:00",
        "access": {},
        "assigner": "audit@patchstack.com",
        "capec": [
            {
                "id": "591",
                "name": "Reflected XSS",
                "prerequisites": "An application that leverages a client-side web browser with scripting enabled. An application that fail to adequately sanitize or encode untrusted input.",
                "related_weakness": [
                    "79"
                ],
                "solutions": "Use browser technologies that do not allow client-side scripting. Utilize strict type, character, and encoding enforcement. Ensure that all user-supplied input is validated before use.",
                "summary": "This type of attack is a form of Cross-Site Scripting (XSS) where a malicious script is \"reflected\" off a vulnerable web application and then executed by a victim's browser. The process starts with an adversary delivering a malicious script to a victim and convincing the victim to send the script to the vulnerable web application. The most common method of this is through a phishing email where the adversary embeds the malicious script with a URL that the victim then clicks on. In processing the subsequent request, the vulnerable web application incorrectly considers the malicious script as valid input and uses it to creates a reposnse that is then sent back to the victim. To launch a successful Reflected XSS attack, an adversary looks for places where user-input is used directly in the generation of a response. This often involves elements that are not expected to host scripts such as image tags (<img>), or the addition of event attibutes such as onload and onmouseover. These elements are often not subject to the same input validation, output encoding, and other content filtering and checking routines."
            },
            {
                "id": "209",
                "name": "XSS Using MIME Type Mismatch",
                "prerequisites": "The victim must follow a crafted link that references a scripting file that is mis-typed as a non-executable file. The victim's browser must detect the true type of a mis-labeled scripting file and invoke the appropriate script interpreter without first performing filtering on the content.",
                "related_weakness": [
                    "20",
                    "646",
                    "79"
                ],
                "solutions": "",
                "summary": "An adversary creates a file with scripting content but where the specified MIME type of the file is such that scripting is not expected. The adversary tricks the victim into accessing a URL that responds with the script file. Some browsers will detect that the specified MIME type of the file does not match the actual type of its content and will automatically switch to using an interpreter for the real content type. If the browser does not invoke script filters before doing this, the adversary's script may run on the target unsanitized, possibly revealing the victim's cookies or executing arbitrary script in their browser."
            },
            {
                "id": "588",
                "name": "DOM-Based XSS",
                "prerequisites": "An application that leverages a client-side web browser with scripting enabled. An application that manipulates the DOM via client-side scripting. An application that failS to adequately sanitize or encode untrusted input.",
                "related_weakness": [
                    "20",
                    "79",
                    "83"
                ],
                "solutions": "Use browser technologies that do not allow client-side scripting. Utilize proper character encoding for all output produced within client-site scripts manipulating the DOM. Ensure that all user-supplied input is validated before use.",
                "summary": "This type of attack is a form of Cross-Site Scripting (XSS) where a malicious script is inserted into the client-side HTML being parsed by a web browser. Content served by a vulnerable web application includes script code used to manipulate the Document Object Model (DOM). This script code either does not properly validate input, or does not perform proper output encoding, thus creating an opportunity for an adversary to inject a malicious script launch a XSS attack. A key distinction between other XSS attacks and DOM-based attacks is that in other XSS attacks, the malicious script runs when the vulnerable web page is initially loaded, while a DOM-based attack executes sometime after the page loads. Another distinction of DOM-based attacks is that in some cases, the malicious script is never sent to the vulnerable web server at all. An attack like this is guaranteed to bypass any server-side filtering attempts to protect users."
            },
            {
                "id": "592",
                "name": "Stored XSS",
                "prerequisites": "An application that leverages a client-side web browser with scripting enabled. An application that fails to adequately sanitize or encode untrusted input. An application that stores information provided by the user in data storage of some kind.",
                "related_weakness": [
                    "79"
                ],
                "solutions": "Use browser technologies that do not allow client-side scripting. Utilize strict type, character, and encoding enforcement. Ensure that all user-supplied input is validated before being stored.",
                "summary": "This type of attack is a form of Cross-site Scripting (XSS) where a malicious script is persistenly \"stored\" within the data storage of a vulnerable web application. Initially presented by an adversary to the vulnerable web application, the malicious script is incorrectly considered valid input and is not properly encoded by the web application. A victim is then convinced to use the web application in a way that creates a response that includes the malicious script. This response is subsequently sent to the victim and the malicious script is executed by the victim's browser. To launch a successful Stored XSS attack, an adversary looks for places where stored input data is used in the generation of a response. This often involves elements that are not expected to host scripts such as image tags (<img>), or the addition of event attibutes such as onload and onmouseover. These elements are often not subject to the same input validation, output encoding, and other content filtering and checking routines."
            },
            {
                "id": "85",
                "name": "AJAX Fingerprinting",
                "prerequisites": "The user must allow JavaScript to execute in their browser",
                "related_weakness": [
                    "113",
                    "116",
                    "184",
                    "20",
                    "348",
                    "692",
                    "712",
                    "79",
                    "86",
                    "96"
                ],
                "solutions": "Design: Use browser technologies that do not allow client side scripting. Design: Utilize strict type, character, and encoding enforcement Implementation: Ensure all content that is delivered to client is sanitized against an acceptable content specification. Implementation: Perform input validation for all remote content. Implementation: Perform output validation for all remote content. Implementation: Disable scripting languages such as JavaScript in browser Implementation: Patching software. There are many attack vectors for XSS on the client side and the server side. Many vulnerabilities are fixed in service packs for browser, web servers, and plug in technologies, staying current on patch release that deal with XSS countermeasures mitigates this.",
                "summary": "This attack utilizes the frequent client-server roundtrips in Ajax conversation to scan a system. While Ajax does not open up new vulnerabilities per se, it does optimize them from an attacker point of view. In many XSS attacks the attacker must get a \"hole in one\" and successfully exploit the vulnerability on the victim side the first time, once the client is redirected the attacker has many chances to engage in follow on probes, but there is only one first chance. In a widely used web application this is not a major problem because 1 in a 1,000 is good enough in a widely used application. A common first step for an attacker is to footprint the environment to understand what attacks will work. Since footprinting relies on enumeration, the conversational pattern of rapid, multiple requests and responses that are typical in Ajax applications enable an attacker to look for many vulnerabilities, well-known ports, network locations and so on."
            },
            {
                "id": "63",
                "name": "Cross-Site Scripting (XSS)",
                "prerequisites": "Target client software must be a client that allows scripting communication from remote hosts, such as a JavaScript-enabled Web Browser.",
                "related_weakness": [
                    "20",
                    "79"
                ],
                "solutions": "Design: Use browser technologies that do not allow client side scripting. Design: Utilize strict type, character, and encoding enforcement Design: Server side developers should not proxy content via XHR or other means, if a http proxy for remote content is setup on the server side, the client's browser has no way of discerning where the data is originating from. Implementation: Ensure all content that is delivered to client is sanitized against an acceptable content specification. Implementation: Perform input validation for all remote content. Implementation: Perform output validation for all remote content. Implementation: Session tokens for specific host Implementation: Patching software. There are many attack vectors for XSS on the client side and the server side. Many vulnerabilities are fixed in service packs for browser, web servers, and plug in technologies, staying current on patch release that deal with XSS countermeasures mitigates this.",
                "summary": "An adversary embeds malicious scripts in content that will be served to web browsers. The goal of the attack is for the target software, the client-side browser, to execute the script with the users' privilege level. An attack of this type exploits a programs' vulnerabilities that are brought on by allowing remote hosts to execute code and scripts. Web browsers, for example, have some simple security controls in place, but if a remote attacker is allowed to execute scripts (through injecting them in to user-generated content like bulletin boards) then these controls may be bypassed. Further, these attacks are very difficult for an end user to detect."
            }
        ],
        "cvss": null,
        "cwe": "CWE-79",
        "id": "CVE-2022-47158",
        "impact": {},
        "last-modified": "2023-05-02T15:24:00",
        "references": [
            "https://patchstack.com/database/vulnerability/alfred-click-collect/wordpress-alfred24-click-collect-plugin-1-1-7-cross-site-scripting-xss?_s_id=cve"
        ],
        "summary": "Auth. (admin+) Stored Cross-Site Scripting (XSS) vulnerability in Pakpobox alfred24 Click & Collect plugin <=\u00a01.1.7 versions.",
        "vulnerable_configuration": [
            "cpe:2.3:a:alfred24_click_\\&_collect_project:alfred24_click_\\&_collect:*:*:*:*:*:wordpress:*:*"
        ],
        "vulnerable_configuration_cpe_2_2": [],
        "vulnerable_product": [
            "cpe:2.3:a:alfred24_click_\\&_collect_project:alfred24_click_\\&_collect:*:*:*:*:*:wordpress:*:*"
        ]
    },
    {
        "Modified": "2023-05-02T15:24:00",
        "Published": "2023-04-24T14:15:00",
        "access": {},
        "assigner": "audit@patchstack.com",
        "capec": [
            {
                "id": "591",
                "name": "Reflected XSS",
                "prerequisites": "An application that leverages a client-side web browser with scripting enabled. An application that fail to adequately sanitize or encode untrusted input.",
                "related_weakness": [
                    "79"
                ],
                "solutions": "Use browser technologies that do not allow client-side scripting. Utilize strict type, character, and encoding enforcement. Ensure that all user-supplied input is validated before use.",
                "summary": "This type of attack is a form of Cross-Site Scripting (XSS) where a malicious script is \"reflected\" off a vulnerable web application and then executed by a victim's browser. The process starts with an adversary delivering a malicious script to a victim and convincing the victim to send the script to the vulnerable web application. The most common method of this is through a phishing email where the adversary embeds the malicious script with a URL that the victim then clicks on. In processing the subsequent request, the vulnerable web application incorrectly considers the malicious script as valid input and uses it to creates a reposnse that is then sent back to the victim. To launch a successful Reflected XSS attack, an adversary looks for places where user-input is used directly in the generation of a response. This often involves elements that are not expected to host scripts such as image tags (<img>), or the addition of event attibutes such as onload and onmouseover. These elements are often not subject to the same input validation, output encoding, and other content filtering and checking routines."
            },
            {
                "id": "209",
                "name": "XSS Using MIME Type Mismatch",
                "prerequisites": "The victim must follow a crafted link that references a scripting file that is mis-typed as a non-executable file. The victim's browser must detect the true type of a mis-labeled scripting file and invoke the appropriate script interpreter without first performing filtering on the content.",
                "related_weakness": [
                    "20",
                    "646",
                    "79"
                ],
                "solutions": "",
                "summary": "An adversary creates a file with scripting content but where the specified MIME type of the file is such that scripting is not expected. The adversary tricks the victim into accessing a URL that responds with the script file. Some browsers will detect that the specified MIME type of the file does not match the actual type of its content and will automatically switch to using an interpreter for the real content type. If the browser does not invoke script filters before doing this, the adversary's script may run on the target unsanitized, possibly revealing the victim's cookies or executing arbitrary script in their browser."
            },
            {
                "id": "588",
                "name": "DOM-Based XSS",
                "prerequisites": "An application that leverages a client-side web browser with scripting enabled. An application that manipulates the DOM via client-side scripting. An application that failS to adequately sanitize or encode untrusted input.",
                "related_weakness": [
                    "20",
                    "79",
                    "83"
                ],
                "solutions": "Use browser technologies that do not allow client-side scripting. Utilize proper character encoding for all output produced within client-site scripts manipulating the DOM. Ensure that all user-supplied input is validated before use.",
                "summary": "This type of attack is a form of Cross-Site Scripting (XSS) where a malicious script is inserted into the client-side HTML being parsed by a web browser. Content served by a vulnerable web application includes script code used to manipulate the Document Object Model (DOM). This script code either does not properly validate input, or does not perform proper output encoding, thus creating an opportunity for an adversary to inject a malicious script launch a XSS attack. A key distinction between other XSS attacks and DOM-based attacks is that in other XSS attacks, the malicious script runs when the vulnerable web page is initially loaded, while a DOM-based attack executes sometime after the page loads. Another distinction of DOM-based attacks is that in some cases, the malicious script is never sent to the vulnerable web server at all. An attack like this is guaranteed to bypass any server-side filtering attempts to protect users."
            },
            {
                "id": "592",
                "name": "Stored XSS",
                "prerequisites": "An application that leverages a client-side web browser with scripting enabled. An application that fails to adequately sanitize or encode untrusted input. An application that stores information provided by the user in data storage of some kind.",
                "related_weakness": [
                    "79"
                ],
                "solutions": "Use browser technologies that do not allow client-side scripting. Utilize strict type, character, and encoding enforcement. Ensure that all user-supplied input is validated before being stored.",
                "summary": "This type of attack is a form of Cross-site Scripting (XSS) where a malicious script is persistenly \"stored\" within the data storage of a vulnerable web application. Initially presented by an adversary to the vulnerable web application, the malicious script is incorrectly considered valid input and is not properly encoded by the web application. A victim is then convinced to use the web application in a way that creates a response that includes the malicious script. This response is subsequently sent to the victim and the malicious script is executed by the victim's browser. To launch a successful Stored XSS attack, an adversary looks for places where stored input data is used in the generation of a response. This often involves elements that are not expected to host scripts such as image tags (<img>), or the addition of event attibutes such as onload and onmouseover. These elements are often not subject to the same input validation, output encoding, and other content filtering and checking routines."
            },
            {
                "id": "85",
                "name": "AJAX Fingerprinting",
                "prerequisites": "The user must allow JavaScript to execute in their browser",
                "related_weakness": [
                    "113",
                    "116",
                    "184",
                    "20",
                    "348",
                    "692",
                    "712",
                    "79",
                    "86",
                    "96"
                ],
                "solutions": "Design: Use browser technologies that do not allow client side scripting. Design: Utilize strict type, character, and encoding enforcement Implementation: Ensure all content that is delivered to client is sanitized against an acceptable content specification. Implementation: Perform input validation for all remote content. Implementation: Perform output validation for all remote content. Implementation: Disable scripting languages such as JavaScript in browser Implementation: Patching software. There are many attack vectors for XSS on the client side and the server side. Many vulnerabilities are fixed in service packs for browser, web servers, and plug in technologies, staying current on patch release that deal with XSS countermeasures mitigates this.",
                "summary": "This attack utilizes the frequent client-server roundtrips in Ajax conversation to scan a system. While Ajax does not open up new vulnerabilities per se, it does optimize them from an attacker point of view. In many XSS attacks the attacker must get a \"hole in one\" and successfully exploit the vulnerability on the victim side the first time, once the client is redirected the attacker has many chances to engage in follow on probes, but there is only one first chance. In a widely used web application this is not a major problem because 1 in a 1,000 is good enough in a widely used application. A common first step for an attacker is to footprint the environment to understand what attacks will work. Since footprinting relies on enumeration, the conversational pattern of rapid, multiple requests and responses that are typical in Ajax applications enable an attacker to look for many vulnerabilities, well-known ports, network locations and so on."
            },
            {
                "id": "63",
                "name": "Cross-Site Scripting (XSS)",
                "prerequisites": "Target client software must be a client that allows scripting communication from remote hosts, such as a JavaScript-enabled Web Browser.",
                "related_weakness": [
                    "20",
                    "79"
                ],
                "solutions": "Design: Use browser technologies that do not allow client side scripting. Design: Utilize strict type, character, and encoding enforcement Design: Server side developers should not proxy content via XHR or other means, if a http proxy for remote content is setup on the server side, the client's browser has no way of discerning where the data is originating from. Implementation: Ensure all content that is delivered to client is sanitized against an acceptable content specification. Implementation: Perform input validation for all remote content. Implementation: Perform output validation for all remote content. Implementation: Session tokens for specific host Implementation: Patching software. There are many attack vectors for XSS on the client side and the server side. Many vulnerabilities are fixed in service packs for browser, web servers, and plug in technologies, staying current on patch release that deal with XSS countermeasures mitigates this.",
                "summary": "An adversary embeds malicious scripts in content that will be served to web browsers. The goal of the attack is for the target software, the client-side browser, to execute the script with the users' privilege level. An attack of this type exploits a programs' vulnerabilities that are brought on by allowing remote hosts to execute code and scripts. Web browsers, for example, have some simple security controls in place, but if a remote attacker is allowed to execute scripts (through injecting them in to user-generated content like bulletin boards) then these controls may be bypassed. Further, these attacks are very difficult for an end user to detect."
            }
        ],
        "cvss": null,
        "cwe": "CWE-79",
        "id": "CVE-2023-23892",
        "impact": {},
        "last-modified": "2023-05-02T15:24:00",
        "references": [
            "https://patchstack.com/database/vulnerability/m-chart/wordpress-m-chart-plugin-1-9-4-auth-stored-cross-site-scripting-xss-vulnerability?_s_id=cve"
        ],
        "summary": "Auth. (contributor+) Stored Cross-Site Scripting (XSS) vulnerability in Jamie Poitra M Chart plugin <=\u00a01.9.4 versions.",
        "vulnerable_configuration": [
            "cpe:2.3:a:m_chart_project:m_chart:1.1.1:*:*:*:*:wordpress:*:*",
            "cpe:2.3:a:m_chart_project:m_chart:1.1.2:*:*:*:*:wordpress:*:*",
            "cpe:2.3:a:m_chart_project:m_chart:1.1.3:*:*:*:*:wordpress:*:*",
            "cpe:2.3:a:m_chart_project:m_chart:1.1.4:*:*:*:*:wordpress:*:*",
            "cpe:2.3:a:m_chart_project:m_chart:1.1.5:*:*:*:*:wordpress:*:*",
            "cpe:2.3:a:m_chart_project:m_chart:1.2.1:*:*:*:*:wordpress:*:*",
            "cpe:2.3:a:m_chart_project:m_chart:1.3.1:*:*:*:*:wordpress:*:*",
            "cpe:2.3:a:m_chart_project:m_chart:1.3.2:*:*:*:*:wordpress:*:*",
            "cpe:2.3:a:m_chart_project:m_chart:1.4.1:*:*:*:*:wordpress:*:*",
            "cpe:2.3:a:m_chart_project:m_chart:1.5.1:*:*:*:*:wordpress:*:*",
            "cpe:2.3:a:m_chart_project:m_chart:1.5.2:*:*:*:*:wordpress:*:*",
            "cpe:2.3:a:m_chart_project:m_chart:1.6.1:*:*:*:*:wordpress:*:*",
            "cpe:2.3:a:m_chart_project:m_chart:1.6.2:*:*:*:*:wordpress:*:*",
            "cpe:2.3:a:m_chart_project:m_chart:1.6.3:*:*:*:*:wordpress:*:*",
            "cpe:2.3:a:m_chart_project:m_chart:1.7.1:*:*:*:*:wordpress:*:*",
            "cpe:2.3:a:m_chart_project:m_chart:1.7.2:*:*:*:*:wordpress:*:*",
            "cpe:2.3:a:m_chart_project:m_chart:1.7.3:*:*:*:*:wordpress:*:*",
            "cpe:2.3:a:m_chart_project:m_chart:1.7.4:*:*:*:*:wordpress:*:*",
            "cpe:2.3:a:m_chart_project:m_chart:1.7.5:*:*:*:*:wordpress:*:*",
            "cpe:2.3:a:m_chart_project:m_chart:1.7.6:*:*:*:*:wordpress:*:*",
            "cpe:2.3:a:m_chart_project:m_chart:1.7.7:*:*:*:*:wordpress:*:*",
            "cpe:2.3:a:m_chart_project:m_chart:1.7.8:*:*:*:*:wordpress:*:*",
            "cpe:2.3:a:m_chart_project:m_chart:1.7.9:*:*:*:*:wordpress:*:*",
            "cpe:2.3:a:m_chart_project:m_chart:1.7.10:*:*:*:*:wordpress:*:*",
            "cpe:2.3:a:m_chart_project:m_chart:1.7.11:*:*:*:*:wordpress:*:*",
            "cpe:2.3:a:m_chart_project:m_chart:1.8.1:*:*:*:*:wordpress:*:*",
            "cpe:2.3:a:m_chart_project:m_chart:1.9.1:*:*:*:*:wordpress:*:*",
            "cpe:2.3:a:m_chart_project:m_chart:1.9.2:*:*:*:*:wordpress:*:*",
            "cpe:2.3:a:m_chart_project:m_chart:1.9.3:*:*:*:*:wordpress:*:*",
            "cpe:2.3:a:m_chart_project:m_chart:1.9.4:*:*:*:*:wordpress:*:*"
        ],
        "vulnerable_configuration_cpe_2_2": [],
        "vulnerable_product": [
            "cpe:2.3:a:m_chart_project:m_chart:1.1.1:*:*:*:*:wordpress:*:*",
            "cpe:2.3:a:m_chart_project:m_chart:1.1.2:*:*:*:*:wordpress:*:*",
            "cpe:2.3:a:m_chart_project:m_chart:1.1.3:*:*:*:*:wordpress:*:*",
            "cpe:2.3:a:m_chart_project:m_chart:1.1.4:*:*:*:*:wordpress:*:*",
            "cpe:2.3:a:m_chart_project:m_chart:1.1.5:*:*:*:*:wordpress:*:*",
            "cpe:2.3:a:m_chart_project:m_chart:1.2.1:*:*:*:*:wordpress:*:*",
            "cpe:2.3:a:m_chart_project:m_chart:1.3.1:*:*:*:*:wordpress:*:*",
            "cpe:2.3:a:m_chart_project:m_chart:1.3.2:*:*:*:*:wordpress:*:*",
            "cpe:2.3:a:m_chart_project:m_chart:1.4.1:*:*:*:*:wordpress:*:*",
            "cpe:2.3:a:m_chart_project:m_chart:1.5.1:*:*:*:*:wordpress:*:*",
            "cpe:2.3:a:m_chart_project:m_chart:1.5.2:*:*:*:*:wordpress:*:*",
            "cpe:2.3:a:m_chart_project:m_chart:1.6.1:*:*:*:*:wordpress:*:*",
            "cpe:2.3:a:m_chart_project:m_chart:1.6.2:*:*:*:*:wordpress:*:*",
            "cpe:2.3:a:m_chart_project:m_chart:1.6.3:*:*:*:*:wordpress:*:*",
            "cpe:2.3:a:m_chart_project:m_chart:1.7.1:*:*:*:*:wordpress:*:*",
            "cpe:2.3:a:m_chart_project:m_chart:1.7.2:*:*:*:*:wordpress:*:*",
            "cpe:2.3:a:m_chart_project:m_chart:1.7.3:*:*:*:*:wordpress:*:*",
            "cpe:2.3:a:m_chart_project:m_chart:1.7.4:*:*:*:*:wordpress:*:*",
            "cpe:2.3:a:m_chart_project:m_chart:1.7.5:*:*:*:*:wordpress:*:*",
            "cpe:2.3:a:m_chart_project:m_chart:1.7.6:*:*:*:*:wordpress:*:*",
            "cpe:2.3:a:m_chart_project:m_chart:1.7.7:*:*:*:*:wordpress:*:*",
            "cpe:2.3:a:m_chart_project:m_chart:1.7.8:*:*:*:*:wordpress:*:*",
            "cpe:2.3:a:m_chart_project:m_chart:1.7.9:*:*:*:*:wordpress:*:*",
            "cpe:2.3:a:m_chart_project:m_chart:1.7.10:*:*:*:*:wordpress:*:*",
            "cpe:2.3:a:m_chart_project:m_chart:1.7.11:*:*:*:*:wordpress:*:*",
            "cpe:2.3:a:m_chart_project:m_chart:1.8.1:*:*:*:*:wordpress:*:*",
            "cpe:2.3:a:m_chart_project:m_chart:1.9.1:*:*:*:*:wordpress:*:*",
            "cpe:2.3:a:m_chart_project:m_chart:1.9.2:*:*:*:*:wordpress:*:*",
            "cpe:2.3:a:m_chart_project:m_chart:1.9.3:*:*:*:*:wordpress:*:*",
            "cpe:2.3:a:m_chart_project:m_chart:1.9.4:*:*:*:*:wordpress:*:*"
        ]
    },
    {
        "Modified": "2023-05-02T15:23:00",
        "Published": "2023-04-21T10:15:00",
        "access": {},
        "assigner": "cna@vuldb.com",
        "capec": [
            {
                "id": "7",
                "name": "Blind SQL Injection",
                "prerequisites": "SQL queries used by the application to store, retrieve or modify data. User-controllable input that is not properly validated by the application as part of SQL queries.",
                "related_weakness": [
                    "20",
                    "209",
                    "697",
                    "707",
                    "713",
                    "74",
                    "89"
                ],
                "solutions": "Security by Obscurity is not a solution to preventing SQL Injection. Rather than suppress error messages and exceptions, the application must handle them gracefully, returning either a custom error page or redirecting the user to a default page, without revealing any information about the database or the application internals. Strong input validation - All user-controllable input must be validated and filtered for illegal characters as well as SQL content. Keywords such as UNION, SELECT or INSERT must be filtered in addition to characters such as a single-quote(') or SQL-comments (--) based on the context in which they appear.",
                "summary": "Blind SQL Injection results from an insufficient mitigation for SQL Injection. Although suppressing database error messages are considered best practice, the suppression alone is not sufficient to prevent SQL Injection. Blind SQL Injection is a form of SQL Injection that overcomes the lack of error messages. Without the error messages that facilitate SQL Injection, the adversary constructs input strings that probe the target through simple Boolean SQL expressions. The adversary can determine if the syntax and structure of the injection was successful based on whether the query was executed or not. Applied iteratively, the adversary determines how and where the target is vulnerable to SQL Injection."
            },
            {
                "id": "109",
                "name": "Object Relational Mapping Injection",
                "prerequisites": "An application uses data access layer generated by an ORM tool or framework An application uses user supplied data in queries executed against the database The separation between data plane and control plane is not ensured, through either developer error or an underlying weakness in the data access layer code generation framework",
                "related_weakness": [
                    "100",
                    "20",
                    "564",
                    "89"
                ],
                "solutions": "Remember to understand how to use the data access methods generated by the ORM tool / framework properly in a way that would leverage the built-in security mechanisms of the framework Ensure to keep up to date with security relevant updates to the persistence framework used within your application.",
                "summary": "An attacker leverages a weakness present in the database access layer code generated with an Object Relational Mapping (ORM) tool or a weakness in the way that a developer used a persistence framework to inject his or her own SQL commands to be executed against the underlying database. The attack here is similar to plain SQL injection, except that the application does not use JDBC to directly talk to the database, but instead it uses a data access layer generated by an ORM tool or framework (e.g. Hibernate). While most of the time code generated by an ORM tool contains safe access methods that are immune to SQL injection, sometimes either due to some weakness in the generated code or due to the fact that the developer failed to use the generated access methods properly, SQL injection is still possible."
            },
            {
                "id": "110",
                "name": "SQL Injection through SOAP Parameter Tampering",
                "prerequisites": "SOAP messages are used as a communication mechanism in the system SOAP parameters are not properly validated at the service provider The service provider does not properly utilize parameter binding when building SQL queries",
                "related_weakness": [
                    "20",
                    "89"
                ],
                "solutions": "Properly validate and sanitize/reject user input at the service provider. Ensure that prepared statements or other mechanism that enables parameter binding is used when accessing the database in a way that would prevent the attackers' supplied data from controlling the structure of the executed query. At the database level, ensure that the database user used by the application in a particular context has the minimum needed privileges to the database that are needed to perform the operation. When possible, run queries against pre-generated views rather than the tables directly.",
                "summary": "An attacker modifies the parameters of the SOAP message that is sent from the service consumer to the service provider to initiate a SQL injection attack. On the service provider side, the SOAP message is parsed and parameters are not properly validated before being used to access a database in a way that does not use parameter binding, thus enabling the attacker to control the structure of the executed SQL query. This pattern describes a SQL injection attack with the delivery mechanism being a SOAP message."
            },
            {
                "id": "66",
                "name": "SQL Injection",
                "prerequisites": "SQL queries used by the application to store, retrieve or modify data. User-controllable input that is not properly validated by the application as part of SQL queries.",
                "related_weakness": [
                    "20",
                    "697",
                    "707",
                    "713",
                    "74",
                    "89"
                ],
                "solutions": "Strong input validation - All user-controllable input must be validated and filtered for illegal characters as well as SQL content. Keywords such as UNION, SELECT or INSERT must be filtered in addition to characters such as a single-quote(') or SQL-comments (--) based on the context in which they appear. Use of parameterized queries or stored procedures - Parameterization causes the input to be restricted to certain domains, such as strings or integers, and any input outside such domains is considered invalid and the query fails. Note that SQL Injection is possible even in the presence of stored procedures if the eventual query is constructed dynamically. Use of custom error pages - Attackers can glean information about the nature of queries from descriptive error messages. Input validation must be coupled with customized error pages that inform about an error without disclosing information about the database or application.",
                "summary": "This attack exploits target software that constructs SQL statements based on user input. An attacker crafts input strings so that when the target software constructs SQL statements based on the input, the resulting SQL statement performs actions other than those the application intended. SQL Injection results from failure of the application to appropriately validate input. When specially crafted user-controlled input consisting of SQL syntax is used without proper validation as part of SQL queries, it is possible to glean information from the database in ways not envisaged during application design. Depending upon the database and the design of the application, it may also be possible to leverage injection to have the database execute system-related commands of the attackers' choice. SQL Injection enables an attacker to talk directly to the database, thus bypassing the application completely. Successful injection can cause information disclosure as well as ability to add or modify data in the database. In order to successfully inject SQL and retrieve information from a database, an attacker:"
            },
            {
                "id": "470",
                "name": "Expanding Control over the Operating System from the Database",
                "prerequisites": "A vulnerable DBMS is usedA SQL injection exists that gives an attacker access to the database or an attacker has access to the DBMS via other means",
                "related_weakness": [
                    "250",
                    "89"
                ],
                "solutions": "Implementation: Remove / disable all unneeded / unused functions of the DBMS system that may allow an attacker to elevate privileges if compromised",
                "summary": "An attacker is able to leverage access gained to the database to read / write data to the file system, compromise the operating system, create a tunnel for accessing the host machine, and use this access to potentially attack other machines on the same network as the database machine. Traditionally SQL injections attacks are viewed as a way to gain unauthorized read access to the data stored in the database, modify the data in the database, delete the data, etc. However, almost every data base management system (DBMS) system includes facilities that if compromised allow an attacker complete access to the file system, operating system, and full access to the host running the database. The attacker can then use this privileged access to launch subsequent attacks. These facilities include dropping into a command shell, creating user defined functions that can call system level libraries present on the host machine, stored procedures, etc."
            },
            {
                "id": "108",
                "name": "Command Line Execution through SQL Injection",
                "prerequisites": "The application does not properly validate data before storing in the database Backend application implicitly trusts the data stored in the database Malicious data is used on the backend as a command line argument",
                "related_weakness": [
                    "114",
                    "20",
                    "74",
                    "78",
                    "89"
                ],
                "solutions": "Disable MSSQL xp_cmdshell directive on the database Properly validate the data (syntactically and semantically) before writing it to the database. Do not implicitly trust the data stored in the database. Re-validate it prior to usage to make sure that it is safe to use in a given context (e.g. as a command line argument).",
                "summary": "An attacker uses standard SQL injection methods to inject data into the command line for execution. This could be done directly through misuse of directives such as MSSQL_xp_cmdshell or indirectly through injection of data into the database that would be interpreted as shell commands. Sometime later, an unscrupulous backend application (or could be part of the functionality of the same application) fetches the injected data stored in the database and uses this data as command line arguments without performing proper validation. The malicious data escapes that data plane by spawning new commands to be executed on the host."
            }
        ],
        "cvss": null,
        "cwe": "CWE-89",
        "id": "CVE-2023-2212",
        "impact": {},
        "last-modified": "2023-05-02T15:23:00",
        "references": [
            "https://github.com/E1CHO/cve_hub/blob/main/Coffee%20Shop%20POS%20System/Coffee%20Shop%20POS%20System%20-%20vuln%204.pdf",
            "https://vuldb.com/?id.226977",
            "https://vuldb.com/?ctiid.226977"
        ],
        "summary": "A vulnerability was found in Campcodes Coffee Shop POS System 1.0. It has been classified as critical. This affects an unknown part of the file /admin/products/view_product.php. The manipulation of the argument id leads to sql injection. It is possible to initiate the attack remotely. The exploit has been disclosed to the public and may be used. The identifier VDB-226977 was assigned to this vulnerability.",
        "vulnerable_configuration": [
            "cpe:2.3:a:coffee_shop_pos_system_project:coffee_shop_pos_system:1.0:*:*:*:*:*:*:*"
        ],
        "vulnerable_configuration_cpe_2_2": [],
        "vulnerable_product": [
            "cpe:2.3:a:coffee_shop_pos_system_project:coffee_shop_pos_system:1.0:*:*:*:*:*:*:*"
        ]
    },
    {
        "Modified": "2023-05-02T15:21:00",
        "Published": "2023-04-24T19:15:00",
        "access": {},
        "assigner": "contact@wpscan.com",
        "capec": [
            {
                "id": "591",
                "name": "Reflected XSS",
                "prerequisites": "An application that leverages a client-side web browser with scripting enabled. An application that fail to adequately sanitize or encode untrusted input.",
                "related_weakness": [
                    "79"
                ],
                "solutions": "Use browser technologies that do not allow client-side scripting. Utilize strict type, character, and encoding enforcement. Ensure that all user-supplied input is validated before use.",
                "summary": "This type of attack is a form of Cross-Site Scripting (XSS) where a malicious script is \"reflected\" off a vulnerable web application and then executed by a victim's browser. The process starts with an adversary delivering a malicious script to a victim and convincing the victim to send the script to the vulnerable web application. The most common method of this is through a phishing email where the adversary embeds the malicious script with a URL that the victim then clicks on. In processing the subsequent request, the vulnerable web application incorrectly considers the malicious script as valid input and uses it to creates a reposnse that is then sent back to the victim. To launch a successful Reflected XSS attack, an adversary looks for places where user-input is used directly in the generation of a response. This often involves elements that are not expected to host scripts such as image tags (<img>), or the addition of event attibutes such as onload and onmouseover. These elements are often not subject to the same input validation, output encoding, and other content filtering and checking routines."
            },
            {
                "id": "209",
                "name": "XSS Using MIME Type Mismatch",
                "prerequisites": "The victim must follow a crafted link that references a scripting file that is mis-typed as a non-executable file. The victim's browser must detect the true type of a mis-labeled scripting file and invoke the appropriate script interpreter without first performing filtering on the content.",
                "related_weakness": [
                    "20",
                    "646",
                    "79"
                ],
                "solutions": "",
                "summary": "An adversary creates a file with scripting content but where the specified MIME type of the file is such that scripting is not expected. The adversary tricks the victim into accessing a URL that responds with the script file. Some browsers will detect that the specified MIME type of the file does not match the actual type of its content and will automatically switch to using an interpreter for the real content type. If the browser does not invoke script filters before doing this, the adversary's script may run on the target unsanitized, possibly revealing the victim's cookies or executing arbitrary script in their browser."
            },
            {
                "id": "588",
                "name": "DOM-Based XSS",
                "prerequisites": "An application that leverages a client-side web browser with scripting enabled. An application that manipulates the DOM via client-side scripting. An application that failS to adequately sanitize or encode untrusted input.",
                "related_weakness": [
                    "20",
                    "79",
                    "83"
                ],
                "solutions": "Use browser technologies that do not allow client-side scripting. Utilize proper character encoding for all output produced within client-site scripts manipulating the DOM. Ensure that all user-supplied input is validated before use.",
                "summary": "This type of attack is a form of Cross-Site Scripting (XSS) where a malicious script is inserted into the client-side HTML being parsed by a web browser. Content served by a vulnerable web application includes script code used to manipulate the Document Object Model (DOM). This script code either does not properly validate input, or does not perform proper output encoding, thus creating an opportunity for an adversary to inject a malicious script launch a XSS attack. A key distinction between other XSS attacks and DOM-based attacks is that in other XSS attacks, the malicious script runs when the vulnerable web page is initially loaded, while a DOM-based attack executes sometime after the page loads. Another distinction of DOM-based attacks is that in some cases, the malicious script is never sent to the vulnerable web server at all. An attack like this is guaranteed to bypass any server-side filtering attempts to protect users."
            },
            {
                "id": "592",
                "name": "Stored XSS",
                "prerequisites": "An application that leverages a client-side web browser with scripting enabled. An application that fails to adequately sanitize or encode untrusted input. An application that stores information provided by the user in data storage of some kind.",
                "related_weakness": [
                    "79"
                ],
                "solutions": "Use browser technologies that do not allow client-side scripting. Utilize strict type, character, and encoding enforcement. Ensure that all user-supplied input is validated before being stored.",
                "summary": "This type of attack is a form of Cross-site Scripting (XSS) where a malicious script is persistenly \"stored\" within the data storage of a vulnerable web application. Initially presented by an adversary to the vulnerable web application, the malicious script is incorrectly considered valid input and is not properly encoded by the web application. A victim is then convinced to use the web application in a way that creates a response that includes the malicious script. This response is subsequently sent to the victim and the malicious script is executed by the victim's browser. To launch a successful Stored XSS attack, an adversary looks for places where stored input data is used in the generation of a response. This often involves elements that are not expected to host scripts such as image tags (<img>), or the addition of event attibutes such as onload and onmouseover. These elements are often not subject to the same input validation, output encoding, and other content filtering and checking routines."
            },
            {
                "id": "85",
                "name": "AJAX Fingerprinting",
                "prerequisites": "The user must allow JavaScript to execute in their browser",
                "related_weakness": [
                    "113",
                    "116",
                    "184",
                    "20",
                    "348",
                    "692",
                    "712",
                    "79",
                    "86",
                    "96"
                ],
                "solutions": "Design: Use browser technologies that do not allow client side scripting. Design: Utilize strict type, character, and encoding enforcement Implementation: Ensure all content that is delivered to client is sanitized against an acceptable content specification. Implementation: Perform input validation for all remote content. Implementation: Perform output validation for all remote content. Implementation: Disable scripting languages such as JavaScript in browser Implementation: Patching software. There are many attack vectors for XSS on the client side and the server side. Many vulnerabilities are fixed in service packs for browser, web servers, and plug in technologies, staying current on patch release that deal with XSS countermeasures mitigates this.",
                "summary": "This attack utilizes the frequent client-server roundtrips in Ajax conversation to scan a system. While Ajax does not open up new vulnerabilities per se, it does optimize them from an attacker point of view. In many XSS attacks the attacker must get a \"hole in one\" and successfully exploit the vulnerability on the victim side the first time, once the client is redirected the attacker has many chances to engage in follow on probes, but there is only one first chance. In a widely used web application this is not a major problem because 1 in a 1,000 is good enough in a widely used application. A common first step for an attacker is to footprint the environment to understand what attacks will work. Since footprinting relies on enumeration, the conversational pattern of rapid, multiple requests and responses that are typical in Ajax applications enable an attacker to look for many vulnerabilities, well-known ports, network locations and so on."
            },
            {
                "id": "63",
                "name": "Cross-Site Scripting (XSS)",
                "prerequisites": "Target client software must be a client that allows scripting communication from remote hosts, such as a JavaScript-enabled Web Browser.",
                "related_weakness": [
                    "20",
                    "79"
                ],
                "solutions": "Design: Use browser technologies that do not allow client side scripting. Design: Utilize strict type, character, and encoding enforcement Design: Server side developers should not proxy content via XHR or other means, if a http proxy for remote content is setup on the server side, the client's browser has no way of discerning where the data is originating from. Implementation: Ensure all content that is delivered to client is sanitized against an acceptable content specification. Implementation: Perform input validation for all remote content. Implementation: Perform output validation for all remote content. Implementation: Session tokens for specific host Implementation: Patching software. There are many attack vectors for XSS on the client side and the server side. Many vulnerabilities are fixed in service packs for browser, web servers, and plug in technologies, staying current on patch release that deal with XSS countermeasures mitigates this.",
                "summary": "An adversary embeds malicious scripts in content that will be served to web browsers. The goal of the attack is for the target software, the client-side browser, to execute the script with the users' privilege level. An attack of this type exploits a programs' vulnerabilities that are brought on by allowing remote hosts to execute code and scripts. Web browsers, for example, have some simple security controls in place, but if a remote attacker is allowed to execute scripts (through injecting them in to user-generated content like bulletin boards) then these controls may be bypassed. Further, these attacks are very difficult for an end user to detect."
            }
        ],
        "cvss": null,
        "cwe": "CWE-79",
        "id": "CVE-2023-0899",
        "impact": {},
        "last-modified": "2023-05-02T15:21:00",
        "references": [
            "https://wpscan.com/vulnerability/e95f925f-118e-4fa1-8e8f-9dc1bc698f12"
        ],
        "summary": "The Steveas WP Live Chat Shoutbox WordPress plugin through 1.4.2 does not sanitise and escape a parameter before outputting it back in the Shoutbox, leading to Stored Cross-Site Scripting which could be used against high privilege users such as admins.",
        "vulnerable_configuration": [
            "cpe:2.3:a:wp_live_chat_shoutbox_project:wp_live_chat_shoutbox:*:*:*:*:*:wordpress:*:*"
        ],
        "vulnerable_configuration_cpe_2_2": [],
        "vulnerable_product": [
            "cpe:2.3:a:wp_live_chat_shoutbox_project:wp_live_chat_shoutbox:*:*:*:*:*:wordpress:*:*"
        ]
    },
    {
        "Modified": "2023-05-02T15:18:00",
        "Published": "2023-04-24T19:15:00",
        "access": {},
        "assigner": "contact@wpscan.com",
        "capec": [
            {
                "id": "7",
                "name": "Blind SQL Injection",
                "prerequisites": "SQL queries used by the application to store, retrieve or modify data. User-controllable input that is not properly validated by the application as part of SQL queries.",
                "related_weakness": [
                    "20",
                    "209",
                    "697",
                    "707",
                    "713",
                    "74",
                    "89"
                ],
                "solutions": "Security by Obscurity is not a solution to preventing SQL Injection. Rather than suppress error messages and exceptions, the application must handle them gracefully, returning either a custom error page or redirecting the user to a default page, without revealing any information about the database or the application internals. Strong input validation - All user-controllable input must be validated and filtered for illegal characters as well as SQL content. Keywords such as UNION, SELECT or INSERT must be filtered in addition to characters such as a single-quote(') or SQL-comments (--) based on the context in which they appear.",
                "summary": "Blind SQL Injection results from an insufficient mitigation for SQL Injection. Although suppressing database error messages are considered best practice, the suppression alone is not sufficient to prevent SQL Injection. Blind SQL Injection is a form of SQL Injection that overcomes the lack of error messages. Without the error messages that facilitate SQL Injection, the adversary constructs input strings that probe the target through simple Boolean SQL expressions. The adversary can determine if the syntax and structure of the injection was successful based on whether the query was executed or not. Applied iteratively, the adversary determines how and where the target is vulnerable to SQL Injection."
            },
            {
                "id": "109",
                "name": "Object Relational Mapping Injection",
                "prerequisites": "An application uses data access layer generated by an ORM tool or framework An application uses user supplied data in queries executed against the database The separation between data plane and control plane is not ensured, through either developer error or an underlying weakness in the data access layer code generation framework",
                "related_weakness": [
                    "100",
                    "20",
                    "564",
                    "89"
                ],
                "solutions": "Remember to understand how to use the data access methods generated by the ORM tool / framework properly in a way that would leverage the built-in security mechanisms of the framework Ensure to keep up to date with security relevant updates to the persistence framework used within your application.",
                "summary": "An attacker leverages a weakness present in the database access layer code generated with an Object Relational Mapping (ORM) tool or a weakness in the way that a developer used a persistence framework to inject his or her own SQL commands to be executed against the underlying database. The attack here is similar to plain SQL injection, except that the application does not use JDBC to directly talk to the database, but instead it uses a data access layer generated by an ORM tool or framework (e.g. Hibernate). While most of the time code generated by an ORM tool contains safe access methods that are immune to SQL injection, sometimes either due to some weakness in the generated code or due to the fact that the developer failed to use the generated access methods properly, SQL injection is still possible."
            },
            {
                "id": "110",
                "name": "SQL Injection through SOAP Parameter Tampering",
                "prerequisites": "SOAP messages are used as a communication mechanism in the system SOAP parameters are not properly validated at the service provider The service provider does not properly utilize parameter binding when building SQL queries",
                "related_weakness": [
                    "20",
                    "89"
                ],
                "solutions": "Properly validate and sanitize/reject user input at the service provider. Ensure that prepared statements or other mechanism that enables parameter binding is used when accessing the database in a way that would prevent the attackers' supplied data from controlling the structure of the executed query. At the database level, ensure that the database user used by the application in a particular context has the minimum needed privileges to the database that are needed to perform the operation. When possible, run queries against pre-generated views rather than the tables directly.",
                "summary": "An attacker modifies the parameters of the SOAP message that is sent from the service consumer to the service provider to initiate a SQL injection attack. On the service provider side, the SOAP message is parsed and parameters are not properly validated before being used to access a database in a way that does not use parameter binding, thus enabling the attacker to control the structure of the executed SQL query. This pattern describes a SQL injection attack with the delivery mechanism being a SOAP message."
            },
            {
                "id": "66",
                "name": "SQL Injection",
                "prerequisites": "SQL queries used by the application to store, retrieve or modify data. User-controllable input that is not properly validated by the application as part of SQL queries.",
                "related_weakness": [
                    "20",
                    "697",
                    "707",
                    "713",
                    "74",
                    "89"
                ],
                "solutions": "Strong input validation - All user-controllable input must be validated and filtered for illegal characters as well as SQL content. Keywords such as UNION, SELECT or INSERT must be filtered in addition to characters such as a single-quote(') or SQL-comments (--) based on the context in which they appear. Use of parameterized queries or stored procedures - Parameterization causes the input to be restricted to certain domains, such as strings or integers, and any input outside such domains is considered invalid and the query fails. Note that SQL Injection is possible even in the presence of stored procedures if the eventual query is constructed dynamically. Use of custom error pages - Attackers can glean information about the nature of queries from descriptive error messages. Input validation must be coupled with customized error pages that inform about an error without disclosing information about the database or application.",
                "summary": "This attack exploits target software that constructs SQL statements based on user input. An attacker crafts input strings so that when the target software constructs SQL statements based on the input, the resulting SQL statement performs actions other than those the application intended. SQL Injection results from failure of the application to appropriately validate input. When specially crafted user-controlled input consisting of SQL syntax is used without proper validation as part of SQL queries, it is possible to glean information from the database in ways not envisaged during application design. Depending upon the database and the design of the application, it may also be possible to leverage injection to have the database execute system-related commands of the attackers' choice. SQL Injection enables an attacker to talk directly to the database, thus bypassing the application completely. Successful injection can cause information disclosure as well as ability to add or modify data in the database. In order to successfully inject SQL and retrieve information from a database, an attacker:"
            },
            {
                "id": "470",
                "name": "Expanding Control over the Operating System from the Database",
                "prerequisites": "A vulnerable DBMS is usedA SQL injection exists that gives an attacker access to the database or an attacker has access to the DBMS via other means",
                "related_weakness": [
                    "250",
                    "89"
                ],
                "solutions": "Implementation: Remove / disable all unneeded / unused functions of the DBMS system that may allow an attacker to elevate privileges if compromised",
                "summary": "An attacker is able to leverage access gained to the database to read / write data to the file system, compromise the operating system, create a tunnel for accessing the host machine, and use this access to potentially attack other machines on the same network as the database machine. Traditionally SQL injections attacks are viewed as a way to gain unauthorized read access to the data stored in the database, modify the data in the database, delete the data, etc. However, almost every data base management system (DBMS) system includes facilities that if compromised allow an attacker complete access to the file system, operating system, and full access to the host running the database. The attacker can then use this privileged access to launch subsequent attacks. These facilities include dropping into a command shell, creating user defined functions that can call system level libraries present on the host machine, stored procedures, etc."
            },
            {
                "id": "108",
                "name": "Command Line Execution through SQL Injection",
                "prerequisites": "The application does not properly validate data before storing in the database Backend application implicitly trusts the data stored in the database Malicious data is used on the backend as a command line argument",
                "related_weakness": [
                    "114",
                    "20",
                    "74",
                    "78",
                    "89"
                ],
                "solutions": "Disable MSSQL xp_cmdshell directive on the database Properly validate the data (syntactically and semantically) before writing it to the database. Do not implicitly trust the data stored in the database. Re-validate it prior to usage to make sure that it is safe to use in a given context (e.g. as a command line argument).",
                "summary": "An attacker uses standard SQL injection methods to inject data into the command line for execution. This could be done directly through misuse of directives such as MSSQL_xp_cmdshell or indirectly through injection of data into the database that would be interpreted as shell commands. Sometime later, an unscrupulous backend application (or could be part of the functionality of the same application) fetches the injected data stored in the database and uses this data as command line arguments without performing proper validation. The malicious data escapes that data plane by spawning new commands to be executed on the host."
            }
        ],
        "cvss": null,
        "cwe": "CWE-89",
        "id": "CVE-2023-1020",
        "impact": {},
        "last-modified": "2023-05-02T15:18:00",
        "references": [
            "https://wpscan.com/vulnerability/4e5aa9a3-65a0-47d6-bc26-a2fb6cb073ff"
        ],
        "summary": "The Steveas WP Live Chat Shoutbox WordPress plugin through 1.4.2 does not sanitise and escape a parameter before using it in a SQL statement via an AJAX action available to unauthenticated users, leading to a SQL injection.",
        "vulnerable_configuration": [
            "cpe:2.3:a:wp_live_chat_shoutbox_project:wp_live_chat_shoutbox:*:*:*:*:*:wordpress:*:*"
        ],
        "vulnerable_configuration_cpe_2_2": [],
        "vulnerable_product": [
            "cpe:2.3:a:wp_live_chat_shoutbox_project:wp_live_chat_shoutbox:*:*:*:*:*:wordpress:*:*"
        ]
    },
    {
        "Modified": "2023-05-02T15:18:00",
        "Published": "2023-04-21T09:15:00",
        "access": {},
        "assigner": "cna@vuldb.com",
        "capec": [
            {
                "id": "7",
                "name": "Blind SQL Injection",
                "prerequisites": "SQL queries used by the application to store, retrieve or modify data. User-controllable input that is not properly validated by the application as part of SQL queries.",
                "related_weakness": [
                    "20",
                    "209",
                    "697",
                    "707",
                    "713",
                    "74",
                    "89"
                ],
                "solutions": "Security by Obscurity is not a solution to preventing SQL Injection. Rather than suppress error messages and exceptions, the application must handle them gracefully, returning either a custom error page or redirecting the user to a default page, without revealing any information about the database or the application internals. Strong input validation - All user-controllable input must be validated and filtered for illegal characters as well as SQL content. Keywords such as UNION, SELECT or INSERT must be filtered in addition to characters such as a single-quote(') or SQL-comments (--) based on the context in which they appear.",
                "summary": "Blind SQL Injection results from an insufficient mitigation for SQL Injection. Although suppressing database error messages are considered best practice, the suppression alone is not sufficient to prevent SQL Injection. Blind SQL Injection is a form of SQL Injection that overcomes the lack of error messages. Without the error messages that facilitate SQL Injection, the adversary constructs input strings that probe the target through simple Boolean SQL expressions. The adversary can determine if the syntax and structure of the injection was successful based on whether the query was executed or not. Applied iteratively, the adversary determines how and where the target is vulnerable to SQL Injection."
            },
            {
                "id": "109",
                "name": "Object Relational Mapping Injection",
                "prerequisites": "An application uses data access layer generated by an ORM tool or framework An application uses user supplied data in queries executed against the database The separation between data plane and control plane is not ensured, through either developer error or an underlying weakness in the data access layer code generation framework",
                "related_weakness": [
                    "100",
                    "20",
                    "564",
                    "89"
                ],
                "solutions": "Remember to understand how to use the data access methods generated by the ORM tool / framework properly in a way that would leverage the built-in security mechanisms of the framework Ensure to keep up to date with security relevant updates to the persistence framework used within your application.",
                "summary": "An attacker leverages a weakness present in the database access layer code generated with an Object Relational Mapping (ORM) tool or a weakness in the way that a developer used a persistence framework to inject his or her own SQL commands to be executed against the underlying database. The attack here is similar to plain SQL injection, except that the application does not use JDBC to directly talk to the database, but instead it uses a data access layer generated by an ORM tool or framework (e.g. Hibernate). While most of the time code generated by an ORM tool contains safe access methods that are immune to SQL injection, sometimes either due to some weakness in the generated code or due to the fact that the developer failed to use the generated access methods properly, SQL injection is still possible."
            },
            {
                "id": "110",
                "name": "SQL Injection through SOAP Parameter Tampering",
                "prerequisites": "SOAP messages are used as a communication mechanism in the system SOAP parameters are not properly validated at the service provider The service provider does not properly utilize parameter binding when building SQL queries",
                "related_weakness": [
                    "20",
                    "89"
                ],
                "solutions": "Properly validate and sanitize/reject user input at the service provider. Ensure that prepared statements or other mechanism that enables parameter binding is used when accessing the database in a way that would prevent the attackers' supplied data from controlling the structure of the executed query. At the database level, ensure that the database user used by the application in a particular context has the minimum needed privileges to the database that are needed to perform the operation. When possible, run queries against pre-generated views rather than the tables directly.",
                "summary": "An attacker modifies the parameters of the SOAP message that is sent from the service consumer to the service provider to initiate a SQL injection attack. On the service provider side, the SOAP message is parsed and parameters are not properly validated before being used to access a database in a way that does not use parameter binding, thus enabling the attacker to control the structure of the executed SQL query. This pattern describes a SQL injection attack with the delivery mechanism being a SOAP message."
            },
            {
                "id": "66",
                "name": "SQL Injection",
                "prerequisites": "SQL queries used by the application to store, retrieve or modify data. User-controllable input that is not properly validated by the application as part of SQL queries.",
                "related_weakness": [
                    "20",
                    "697",
                    "707",
                    "713",
                    "74",
                    "89"
                ],
                "solutions": "Strong input validation - All user-controllable input must be validated and filtered for illegal characters as well as SQL content. Keywords such as UNION, SELECT or INSERT must be filtered in addition to characters such as a single-quote(') or SQL-comments (--) based on the context in which they appear. Use of parameterized queries or stored procedures - Parameterization causes the input to be restricted to certain domains, such as strings or integers, and any input outside such domains is considered invalid and the query fails. Note that SQL Injection is possible even in the presence of stored procedures if the eventual query is constructed dynamically. Use of custom error pages - Attackers can glean information about the nature of queries from descriptive error messages. Input validation must be coupled with customized error pages that inform about an error without disclosing information about the database or application.",
                "summary": "This attack exploits target software that constructs SQL statements based on user input. An attacker crafts input strings so that when the target software constructs SQL statements based on the input, the resulting SQL statement performs actions other than those the application intended. SQL Injection results from failure of the application to appropriately validate input. When specially crafted user-controlled input consisting of SQL syntax is used without proper validation as part of SQL queries, it is possible to glean information from the database in ways not envisaged during application design. Depending upon the database and the design of the application, it may also be possible to leverage injection to have the database execute system-related commands of the attackers' choice. SQL Injection enables an attacker to talk directly to the database, thus bypassing the application completely. Successful injection can cause information disclosure as well as ability to add or modify data in the database. In order to successfully inject SQL and retrieve information from a database, an attacker:"
            },
            {
                "id": "470",
                "name": "Expanding Control over the Operating System from the Database",
                "prerequisites": "A vulnerable DBMS is usedA SQL injection exists that gives an attacker access to the database or an attacker has access to the DBMS via other means",
                "related_weakness": [
                    "250",
                    "89"
                ],
                "solutions": "Implementation: Remove / disable all unneeded / unused functions of the DBMS system that may allow an attacker to elevate privileges if compromised",
                "summary": "An attacker is able to leverage access gained to the database to read / write data to the file system, compromise the operating system, create a tunnel for accessing the host machine, and use this access to potentially attack other machines on the same network as the database machine. Traditionally SQL injections attacks are viewed as a way to gain unauthorized read access to the data stored in the database, modify the data in the database, delete the data, etc. However, almost every data base management system (DBMS) system includes facilities that if compromised allow an attacker complete access to the file system, operating system, and full access to the host running the database. The attacker can then use this privileged access to launch subsequent attacks. These facilities include dropping into a command shell, creating user defined functions that can call system level libraries present on the host machine, stored procedures, etc."
            },
            {
                "id": "108",
                "name": "Command Line Execution through SQL Injection",
                "prerequisites": "The application does not properly validate data before storing in the database Backend application implicitly trusts the data stored in the database Malicious data is used on the backend as a command line argument",
                "related_weakness": [
                    "114",
                    "20",
                    "74",
                    "78",
                    "89"
                ],
                "solutions": "Disable MSSQL xp_cmdshell directive on the database Properly validate the data (syntactically and semantically) before writing it to the database. Do not implicitly trust the data stored in the database. Re-validate it prior to usage to make sure that it is safe to use in a given context (e.g. as a command line argument).",
                "summary": "An attacker uses standard SQL injection methods to inject data into the command line for execution. This could be done directly through misuse of directives such as MSSQL_xp_cmdshell or indirectly through injection of data into the database that would be interpreted as shell commands. Sometime later, an unscrupulous backend application (or could be part of the functionality of the same application) fetches the injected data stored in the database and uses this data as command line arguments without performing proper validation. The malicious data escapes that data plane by spawning new commands to be executed on the host."
            }
        ],
        "cvss": null,
        "cwe": "CWE-89",
        "id": "CVE-2023-2211",
        "impact": {},
        "last-modified": "2023-05-02T15:18:00",
        "references": [
            "https://github.com/E1CHO/cve_hub/blob/main/Coffee%20Shop%20POS%20System/Coffee%20Shop%20POS%20System%20-%20vuln%203.pdf",
            "https://vuldb.com/?id.226976",
            "https://vuldb.com/?ctiid.226976"
        ],
        "summary": "A vulnerability was found in Campcodes Coffee Shop POS System 1.0 and classified as critical. Affected by this issue is some unknown functionality of the file /admin/categories/manage_category.php. The manipulation of the argument id leads to sql injection. The attack may be launched remotely. The exploit has been disclosed to the public and may be used. The identifier of this vulnerability is VDB-226976.",
        "vulnerable_configuration": [
            "cpe:2.3:a:coffee_shop_pos_system_project:coffee_shop_pos_system:1.0:*:*:*:*:*:*:*"
        ],
        "vulnerable_configuration_cpe_2_2": [],
        "vulnerable_product": [
            "cpe:2.3:a:coffee_shop_pos_system_project:coffee_shop_pos_system:1.0:*:*:*:*:*:*:*"
        ]
    },
    {
        "Modified": "2023-05-02T15:16:00",
        "Published": "2023-04-22T03:15:00",
        "access": {},
        "assigner": "psirt@nvidia.com",
        "capec": [],
        "cvss": null,
        "cwe": "NVD-CWE-noinfo",
        "id": "CVE-2023-0202",
        "impact": {},
        "last-modified": "2023-05-02T15:16:00",
        "references": [
            "https://nvidia.custhelp.com/app/answers/detail/a_id/5449"
        ],
        "summary": "NVIDIA DGX A100 SBIOS contains a vulnerability where an attacker may modify arbitrary memory of SMRAM by exploiting the GenericSio and LegacySmmSredir SMM APIs. A successful exploit of this vulnerability may lead to denial of service, escalation of privileges, and information disclosure.",
        "vulnerable_configuration": [
            "cpe:2.3:o:nvidia:dgx_a100_firmware:-:*:*:*:sbios:*:*:*",
            "cpe:2.3:h:nvidia:dgx_a100:-:*:*:*:*:*:*:*"
        ],
        "vulnerable_configuration_cpe_2_2": [],
        "vulnerable_product": [
            "cpe:2.3:o:nvidia:dgx_a100_firmware:-:*:*:*:sbios:*:*:*"
        ]
    },
    {
        "Modified": "2023-05-02T15:15:00",
        "Published": "2023-05-02T15:15:00",
        "access": {},
        "assigner": "cve@mitre.org",
        "cvss": null,
        "cwe": "Unknown",
        "id": "CVE-2023-29856",
        "impact": {},
        "last-modified": "2023-05-02T15:15:00",
        "references": [
            "https://www.dlink.com/en/security-bulletin/",
            "https://supportannouncement.us.dlink.com/announcement/publication.aspx?name=SAP10325"
        ],
        "summary": "** UNSUPPORTED WHEN ASSIGNED ** D-Link DIR-868L Hardware version A1, firmware version 1.12 is vulnerable to Buffer Overflow. The vulnerability is in scandir.sgi binary.",
        "vulnerable_configuration": [],
        "vulnerable_configuration_cpe_2_2": [],
        "vulnerable_product": []
    },
    {
        "Modified": "2023-05-02T15:15:00",
        "Published": "2023-05-02T15:15:00",
        "access": {},
        "assigner": "security@huntr.dev",
        "capec": [
            {
                "id": "88",
                "name": "OS Command Injection",
                "prerequisites": "User controllable input used as part of commands to the underlying operating system.",
                "related_weakness": [
                    "20",
                    "697",
                    "713",
                    "78",
                    "88"
                ],
                "solutions": "Use language APIs rather than relying on passing data to the operating system shell or command line. Doing so ensures that the available protection mechanisms in the language are intact and applicable. Filter all incoming data to escape or remove characters or strings that can be potentially misinterpreted as operating system or shell commands All application processes should be run with the minimal privileges required. Also, processes must shed privileges as soon as they no longer require them.",
                "summary": "In this type of an attack, an adversary injects operating system commands into existing application functions. An application that uses untrusted input to build command strings is vulnerable. An adversary can leverage OS command injection in an application to elevate privileges, execute arbitrary commands and compromise the underlying operating system."
            },
            {
                "id": "6",
                "name": "Argument Injection",
                "prerequisites": "Target software fails to strip all user-supplied input of any content that could cause the shell to perform unexpected actions. Software must allow for unvalidated or unfiltered input to be executed on operating system shell, and, optionally, the system configuration must allow for output to be sent back to client.",
                "related_weakness": [
                    "146",
                    "184",
                    "185",
                    "697",
                    "713",
                    "74",
                    "78"
                ],
                "solutions": "Design: Do not program input values directly on command shell, instead treat user input as guilty until proven innocent. Build a function that takes user input and converts it to applications specific types and values, stripping or filtering out all unauthorized commands and characters in the process. Design: Limit program privileges, so if metacharacters or other methods circumvent program input validation routines and shell access is attained then it is not running under a privileged account. chroot jails create a sandbox for the application to execute in, making it more difficult for an attacker to elevate privilege even in the case that a compromise has occurred. Implementation: Implement an audit log that is written to a separate host, in the event of a compromise the audit log may be able to provide evidence and details of the compromise.",
                "summary": "An attacker changes the behavior or state of a targeted application through injecting data or command syntax through the targets use of non-validated and non-filtered arguments of exposed services or methods."
            },
            {
                "id": "15",
                "name": "Command Delimiters",
                "prerequisites": "Software's input validation or filtering must not detect and block presence of additional malicious command.",
                "related_weakness": [
                    "138",
                    "140",
                    "146",
                    "154",
                    "157",
                    "184",
                    "185",
                    "697",
                    "713",
                    "77",
                    "78",
                    "93"
                ],
                "solutions": "Design: Perform whitelist validation against a positive specification for command length, type, and parameters. Design: Limit program privileges, so if commands circumvent program input validation or filter routines then commands do not running under a privileged account Implementation: Perform input validation for all remote content. Implementation: Use type conversions such as JDBC prepared statements.",
                "summary": "An attack of this type exploits a programs' vulnerabilities that allows an attacker's commands to be concatenated onto a legitimate command with the intent of targeting other resources such as the file system or database. The system that uses a filter or a blacklist input validation, as opposed to whitelist validation is vulnerable to an attacker who predicts delimiters (or combinations of delimiters) not present in the filter or blacklist. As with other injection attacks, the attacker uses the command delimiter payload as an entry point to tunnel through the application and activate additional attacks through SQL queries, shell commands, network scanning, and so on."
            },
            {
                "id": "108",
                "name": "Command Line Execution through SQL Injection",
                "prerequisites": "The application does not properly validate data before storing in the database Backend application implicitly trusts the data stored in the database Malicious data is used on the backend as a command line argument",
                "related_weakness": [
                    "114",
                    "20",
                    "74",
                    "78",
                    "89"
                ],
                "solutions": "Disable MSSQL xp_cmdshell directive on the database Properly validate the data (syntactically and semantically) before writing it to the database. Do not implicitly trust the data stored in the database. Re-validate it prior to usage to make sure that it is safe to use in a given context (e.g. as a command line argument).",
                "summary": "An attacker uses standard SQL injection methods to inject data into the command line for execution. This could be done directly through misuse of directives such as MSSQL_xp_cmdshell or indirectly through injection of data into the database that would be interpreted as shell commands. Sometime later, an unscrupulous backend application (or could be part of the functionality of the same application) fetches the injected data stored in the database and uses this data as command line arguments without performing proper validation. The malicious data escapes that data plane by spawning new commands to be executed on the host."
            },
            {
                "id": "43",
                "name": "Exploiting Multiple Input Interpretation Layers",
                "prerequisites": "User input is used to construct a command to be executed on the target system or as part of the file name. Multiple parser passes are performed on the data supplied by the user.",
                "related_weakness": [
                    "171",
                    "179",
                    "181",
                    "183",
                    "184",
                    "20",
                    "697",
                    "707",
                    "74",
                    "77",
                    "78"
                ],
                "solutions": "An iterative approach to input validation may be required to ensure that no dangerous characters are present. It may be necessary to implement redundant checking across different input validation layers. Ensure that invalid data is rejected as soon as possible and do not continue to work with it. Make sure to perform input validation on canonicalized data (i.e. data that is data in its most standard form). This will help avoid tricky encodings getting past the filters. Assume all input is malicious. Create a white list that defines all valid input to the software system based on the requirements specifications. Input that does not match against the white list should not be permitted to enter into the system.",
                "summary": "An attacker supplies the target software with input data that contains sequences of special characters designed to bypass input validation logic. This exploit relies on the target making multiples passes over the input data and processing a \"layer\" of special characters with each pass. In this manner, the attacker can disguise input that would otherwise be rejected as invalid by concealing it with layers of special/escape characters that are stripped off by subsequent processing steps. The goal is to first discover cases where the input validation layer executes before one or more parsing layers. That is, user input may go through the following logic in an application: <parser1> --> <input validator> --> <parser2>. In such cases, the attacker will need to provide input that will pass through the input validator, but after passing through parser2, will be converted into something that the input validator was supposed to stop."
            }
        ],
        "cvss": null,
        "cwe": "CWE-78",
        "id": "CVE-2023-2479",
        "impact": {},
        "last-modified": "2023-05-02T15:15:00",
        "references": [
            "https://huntr.dev/bounties/fbdeec3c-d197-4a68-a547-7f93fb9594b4",
            "https://github.com/appium/appium-desktop/commit/12a988aa08b9822e97056a09486c9bebb3aad8fe"
        ],
        "summary": "OS Command Injection in GitHub repository appium/appium-desktop prior to v1.22.3-4.",
        "vulnerable_configuration": [],
        "vulnerable_configuration_cpe_2_2": [],
        "vulnerable_product": []
    },
    {
        "Modified": "2023-05-02T15:15:00",
        "Published": "2023-05-02T09:15:00",
        "access": {},
        "assigner": "security@apache.org",
        "capec": [
            {
                "id": "76",
                "name": "Manipulating Web Input to File System Calls",
                "prerequisites": "Program must allow for user controlled variables to be applied directly to the filesystem",
                "related_weakness": [
                    "15",
                    "22",
                    "23",
                    "264",
                    "272",
                    "285",
                    "346",
                    "348",
                    "59",
                    "715",
                    "73",
                    "74",
                    "77"
                ],
                "solutions": "Design: Enforce principle of least privilege. Design: Ensure all input is validated, and does not contain file system commands Design: Run server interfaces with a non-root account and/or utilize chroot jails or other configuration techniques to constrain privileges even if attacker gains some limited access to commands. Design: For interactive user applications, consider if direct file system interface is necessary, instead consider having the application proxy communication. Implementation: Perform testing such as pen-testing and vulnerability scanning to identify directories, programs, and interfaces that grant direct access to executables.",
                "summary": "An attacker manipulates inputs to the target software which the target software passes to file system calls in the OS. The goal is to gain access to, and perhaps modify, areas of the file system that the target software did not intend to be accessible."
            },
            {
                "id": "248",
                "name": "Command Injection",
                "prerequisites": "The target application must accept input from the user and then use this input in the construction of commands to be executed. In virtually all cases, this is some form of string input that is concatenated to a constant string defined by the application to form the full command to be executed.",
                "related_weakness": [
                    "77"
                ],
                "solutions": "All user-controllable input should be validated and filtered for potentially unwanted characters. Whitelisting input is desired, but if a blacklisting approach is necessary, then focusing on command related terms and delimiters is necessary. Input should be encoded prior to use in commands to make sure command related characters are not treated as part of the command. For example, quotation characters may need to be encoded so that the application does not treat the quotation as a delimiter. Input should be parameterized, or restricted to data sections of a command, thus removing the chance that the input will be treated as part of the command itself.",
                "summary": "An adversary looking to execute a command of their choosing, injects new items into an existing command thus modifying interpretation away from what was intended. Commands in this context are often standalone strings that are interpreted by a downstream component and cause specific responses. This type of attack is possible when untrusted values are used to build these command strings. Weaknesses in input validation or command construction can enable the attack and lead to successful exploitation."
            },
            {
                "id": "75",
                "name": "Manipulating Writeable Configuration Files",
                "prerequisites": "Configuration files must be modifiable by the attacker",
                "related_weakness": [
                    "346",
                    "349",
                    "353",
                    "354",
                    "713",
                    "77",
                    "99"
                ],
                "solutions": "Design: Enforce principle of least privilege Design: Backup copies of all configuration files Implementation: Integrity monitoring for configuration files Implementation: Enforce audit logging on code and configuration promotion procedures. Implementation: Load configuration from separate process and memory space, for example a separate physical device like a CD",
                "summary": "Generally these are manually edited files that are not in the preview of the system administrators, any ability on the attackers' behalf to modify these files, for example in a CVS repository, gives unauthorized access directly to the application, the same as authorized users."
            },
            {
                "id": "136",
                "name": "LDAP Injection",
                "prerequisites": "The target application must accept a string as user input, fail to sanitize characters that have a special meaning in LDAP queries in the user input, and insert the user-supplied string in an LDAP query which is then processed.",
                "related_weakness": [
                    "20",
                    "77",
                    "90"
                ],
                "solutions": "Strong input validation - All user-controllable input must be validated and filtered for illegal characters as well as LDAP content. Use of custom error pages - Attackers can glean information about the nature of queries from descriptive error messages. Input validation must be coupled with customized error pages that inform about an error without disclosing information about the LDAP or application.",
                "summary": "An attacker manipulates or crafts an LDAP query for the purpose of undermining the security of the target. Some applications use user input to create LDAP queries that are processed by an LDAP server. For example, a user might provide their username during authentication and the username might be inserted in an LDAP query during the authentication process. An attacker could use this input to inject additional commands into an LDAP query that could disclose sensitive information. For example, entering a * in the aforementioned query might return information about all users on the system. This attack is very similar to an SQL injection attack in that it manipulates a query to gather additional information or coerce a particular return value."
            },
            {
                "id": "15",
                "name": "Command Delimiters",
                "prerequisites": "Software's input validation or filtering must not detect and block presence of additional malicious command.",
                "related_weakness": [
                    "138",
                    "140",
                    "146",
                    "154",
                    "157",
                    "184",
                    "185",
                    "697",
                    "713",
                    "77",
                    "78",
                    "93"
                ],
                "solutions": "Design: Perform whitelist validation against a positive specification for command length, type, and parameters. Design: Limit program privileges, so if commands circumvent program input validation or filter routines then commands do not running under a privileged account Implementation: Perform input validation for all remote content. Implementation: Use type conversions such as JDBC prepared statements.",
                "summary": "An attack of this type exploits a programs' vulnerabilities that allows an attacker's commands to be concatenated onto a legitimate command with the intent of targeting other resources such as the file system or database. The system that uses a filter or a blacklist input validation, as opposed to whitelist validation is vulnerable to an attacker who predicts delimiters (or combinations of delimiters) not present in the filter or blacklist. As with other injection attacks, the attacker uses the command delimiter payload as an entry point to tunnel through the application and activate additional attacks through SQL queries, shell commands, network scanning, and so on."
            },
            {
                "id": "183",
                "name": "IMAP/SMTP Command Injection",
                "prerequisites": "The target environment must consist of a web-mail server that the attacker can query and a back-end mail server. The back-end mail server need not be directly accessible to the attacker. The web-mail server must fail to adequately sanitize fields received from users and passed on to the back-end mail server. The back-end mail server must not be adequately secured against receiving malicious commands from the web-mail server.",
                "related_weakness": [
                    "77"
                ],
                "solutions": "",
                "summary": "An attacker exploits weaknesses in input validation on IMAP/SMTP servers to execute commands on the server. Web-mail servers often sit between the Internet and the IMAP or SMTP mail server. User requests are received by the web-mail servers which then query the back-end mail server for the requested information and return this response to the user. In an IMAP/SMTP command injection attack, mail-server commands are embedded in parts of the request sent to the web-mail server. If the web-mail server fails to adequately sanitize these requests, these commands are then sent to the back-end mail server when it is queried by the web-mail server, where the commands are then executed. This attack can be especially dangerous since administrators may assume that the back-end server is protected against direct Internet access and therefore may not secure it adequately against the execution of malicious commands."
            },
            {
                "id": "40",
                "name": "Manipulating Writeable Terminal Devices",
                "prerequisites": "User terminals must have a permissive access control such as world writeable that allows normal users to control data on other user's terminals.",
                "related_weakness": [
                    "77"
                ],
                "solutions": "Design: Ensure that terminals are only writeable by named owner user and/or administrator Design: Enforce principle of least privilege",
                "summary": "This attack exploits terminal devices that allow themselves to be written to by other users. The attacker sends command strings to the target terminal device hoping that the target user will hit enter and thereby execute the malicious command with their privileges. The attacker can send the results (such as copying /etc/passwd) to a known directory and collect once the attack has succeeded."
            },
            {
                "id": "43",
                "name": "Exploiting Multiple Input Interpretation Layers",
                "prerequisites": "User input is used to construct a command to be executed on the target system or as part of the file name. Multiple parser passes are performed on the data supplied by the user.",
                "related_weakness": [
                    "171",
                    "179",
                    "181",
                    "183",
                    "184",
                    "20",
                    "697",
                    "707",
                    "74",
                    "77",
                    "78"
                ],
                "solutions": "An iterative approach to input validation may be required to ensure that no dangerous characters are present. It may be necessary to implement redundant checking across different input validation layers. Ensure that invalid data is rejected as soon as possible and do not continue to work with it. Make sure to perform input validation on canonicalized data (i.e. data that is data in its most standard form). This will help avoid tricky encodings getting past the filters. Assume all input is malicious. Create a white list that defines all valid input to the software system based on the requirements specifications. Input that does not match against the white list should not be permitted to enter into the system.",
                "summary": "An attacker supplies the target software with input data that contains sequences of special characters designed to bypass input validation logic. This exploit relies on the target making multiples passes over the input data and processing a \"layer\" of special characters with each pass. In this manner, the attacker can disguise input that would otherwise be rejected as invalid by concealing it with layers of special/escape characters that are stripped off by subsequent processing steps. The goal is to first discover cases where the input validation layer executes before one or more parsing layers. That is, user input may go through the following logic in an application: <parser1> --> <input validator> --> <parser2>. In such cases, the attacker will need to provide input that will pass through the input validator, but after passing through parser2, will be converted into something that the input validator was supposed to stop."
            }
        ],
        "cvss": null,
        "cwe": "CWE-77",
        "id": "CVE-2023-32007",
        "impact": {},
        "last-modified": "2023-05-02T15:15:00",
        "references": [
            "https://spark.apache.org/security.html",
            "https://lists.apache.org/thread/poxgnxhhnzz735kr1wos366l5vdbb0nv",
            "https://www.cve.org/CVERecord?id=CVE-2022-33891",
            "http://www.openwall.com/lists/oss-security/2023/05/02/1"
        ],
        "summary": "** UNSUPPORTED WHEN ASSIGNED ** The Apache Spark UI offers the possibility to enable ACLs via the configuration option spark.acls.enable. With an authentication filter, this checks whether a user has access permissions to view or modify the application. If ACLs are enabled, a code path in HttpSecurityFilter can allow someone to perform impersonation by providing an arbitrary user name. A malicious user might then be able to reach a permission check function that will ultimately build a Unix shell command based on their input, and execute it. This will result in arbitrary shell command execution as the user Spark is currently running as. This issue was disclosed earlier as CVE-2022-33891, but incorrectly claimed version 3.1.3 (which has since gone EOL) would not be affected.\n\nNOTE: This vulnerability only affects products that are no longer supported by the maintainer.\n\nUsers are recommended to upgrade to a supported version of Apache Spark, such as version 3.4.0.\n\n\n",
        "vulnerable_configuration": [],
        "vulnerable_configuration_cpe_2_2": [],
        "vulnerable_product": []
    },
    {
        "Modified": "2023-05-02T15:15:00",
        "Published": "2022-07-18T07:15:00",
        "access": {},
        "assigner": "security@apache.org",
        "capec": [
            {
                "id": "76",
                "name": "Manipulating Web Input to File System Calls",
                "prerequisites": "Program must allow for user controlled variables to be applied directly to the filesystem",
                "related_weakness": [
                    "15",
                    "22",
                    "23",
                    "264",
                    "272",
                    "285",
                    "346",
                    "348",
                    "59",
                    "715",
                    "73",
                    "74",
                    "77"
                ],
                "solutions": "Design: Enforce principle of least privilege. Design: Ensure all input is validated, and does not contain file system commands Design: Run server interfaces with a non-root account and/or utilize chroot jails or other configuration techniques to constrain privileges even if attacker gains some limited access to commands. Design: For interactive user applications, consider if direct file system interface is necessary, instead consider having the application proxy communication. Implementation: Perform testing such as pen-testing and vulnerability scanning to identify directories, programs, and interfaces that grant direct access to executables.",
                "summary": "An attacker manipulates inputs to the target software which the target software passes to file system calls in the OS. The goal is to gain access to, and perhaps modify, areas of the file system that the target software did not intend to be accessible."
            },
            {
                "id": "248",
                "name": "Command Injection",
                "prerequisites": "The target application must accept input from the user and then use this input in the construction of commands to be executed. In virtually all cases, this is some form of string input that is concatenated to a constant string defined by the application to form the full command to be executed.",
                "related_weakness": [
                    "77"
                ],
                "solutions": "All user-controllable input should be validated and filtered for potentially unwanted characters. Whitelisting input is desired, but if a blacklisting approach is necessary, then focusing on command related terms and delimiters is necessary. Input should be encoded prior to use in commands to make sure command related characters are not treated as part of the command. For example, quotation characters may need to be encoded so that the application does not treat the quotation as a delimiter. Input should be parameterized, or restricted to data sections of a command, thus removing the chance that the input will be treated as part of the command itself.",
                "summary": "An adversary looking to execute a command of their choosing, injects new items into an existing command thus modifying interpretation away from what was intended. Commands in this context are often standalone strings that are interpreted by a downstream component and cause specific responses. This type of attack is possible when untrusted values are used to build these command strings. Weaknesses in input validation or command construction can enable the attack and lead to successful exploitation."
            },
            {
                "id": "75",
                "name": "Manipulating Writeable Configuration Files",
                "prerequisites": "Configuration files must be modifiable by the attacker",
                "related_weakness": [
                    "346",
                    "349",
                    "353",
                    "354",
                    "713",
                    "77",
                    "99"
                ],
                "solutions": "Design: Enforce principle of least privilege Design: Backup copies of all configuration files Implementation: Integrity monitoring for configuration files Implementation: Enforce audit logging on code and configuration promotion procedures. Implementation: Load configuration from separate process and memory space, for example a separate physical device like a CD",
                "summary": "Generally these are manually edited files that are not in the preview of the system administrators, any ability on the attackers' behalf to modify these files, for example in a CVS repository, gives unauthorized access directly to the application, the same as authorized users."
            },
            {
                "id": "136",
                "name": "LDAP Injection",
                "prerequisites": "The target application must accept a string as user input, fail to sanitize characters that have a special meaning in LDAP queries in the user input, and insert the user-supplied string in an LDAP query which is then processed.",
                "related_weakness": [
                    "20",
                    "77",
                    "90"
                ],
                "solutions": "Strong input validation - All user-controllable input must be validated and filtered for illegal characters as well as LDAP content. Use of custom error pages - Attackers can glean information about the nature of queries from descriptive error messages. Input validation must be coupled with customized error pages that inform about an error without disclosing information about the LDAP or application.",
                "summary": "An attacker manipulates or crafts an LDAP query for the purpose of undermining the security of the target. Some applications use user input to create LDAP queries that are processed by an LDAP server. For example, a user might provide their username during authentication and the username might be inserted in an LDAP query during the authentication process. An attacker could use this input to inject additional commands into an LDAP query that could disclose sensitive information. For example, entering a * in the aforementioned query might return information about all users on the system. This attack is very similar to an SQL injection attack in that it manipulates a query to gather additional information or coerce a particular return value."
            },
            {
                "id": "15",
                "name": "Command Delimiters",
                "prerequisites": "Software's input validation or filtering must not detect and block presence of additional malicious command.",
                "related_weakness": [
                    "138",
                    "140",
                    "146",
                    "154",
                    "157",
                    "184",
                    "185",
                    "697",
                    "713",
                    "77",
                    "78",
                    "93"
                ],
                "solutions": "Design: Perform whitelist validation against a positive specification for command length, type, and parameters. Design: Limit program privileges, so if commands circumvent program input validation or filter routines then commands do not running under a privileged account Implementation: Perform input validation for all remote content. Implementation: Use type conversions such as JDBC prepared statements.",
                "summary": "An attack of this type exploits a programs' vulnerabilities that allows an attacker's commands to be concatenated onto a legitimate command with the intent of targeting other resources such as the file system or database. The system that uses a filter or a blacklist input validation, as opposed to whitelist validation is vulnerable to an attacker who predicts delimiters (or combinations of delimiters) not present in the filter or blacklist. As with other injection attacks, the attacker uses the command delimiter payload as an entry point to tunnel through the application and activate additional attacks through SQL queries, shell commands, network scanning, and so on."
            },
            {
                "id": "183",
                "name": "IMAP/SMTP Command Injection",
                "prerequisites": "The target environment must consist of a web-mail server that the attacker can query and a back-end mail server. The back-end mail server need not be directly accessible to the attacker. The web-mail server must fail to adequately sanitize fields received from users and passed on to the back-end mail server. The back-end mail server must not be adequately secured against receiving malicious commands from the web-mail server.",
                "related_weakness": [
                    "77"
                ],
                "solutions": "",
                "summary": "An attacker exploits weaknesses in input validation on IMAP/SMTP servers to execute commands on the server. Web-mail servers often sit between the Internet and the IMAP or SMTP mail server. User requests are received by the web-mail servers which then query the back-end mail server for the requested information and return this response to the user. In an IMAP/SMTP command injection attack, mail-server commands are embedded in parts of the request sent to the web-mail server. If the web-mail server fails to adequately sanitize these requests, these commands are then sent to the back-end mail server when it is queried by the web-mail server, where the commands are then executed. This attack can be especially dangerous since administrators may assume that the back-end server is protected against direct Internet access and therefore may not secure it adequately against the execution of malicious commands."
            },
            {
                "id": "40",
                "name": "Manipulating Writeable Terminal Devices",
                "prerequisites": "User terminals must have a permissive access control such as world writeable that allows normal users to control data on other user's terminals.",
                "related_weakness": [
                    "77"
                ],
                "solutions": "Design: Ensure that terminals are only writeable by named owner user and/or administrator Design: Enforce principle of least privilege",
                "summary": "This attack exploits terminal devices that allow themselves to be written to by other users. The attacker sends command strings to the target terminal device hoping that the target user will hit enter and thereby execute the malicious command with their privileges. The attacker can send the results (such as copying /etc/passwd) to a known directory and collect once the attack has succeeded."
            },
            {
                "id": "43",
                "name": "Exploiting Multiple Input Interpretation Layers",
                "prerequisites": "User input is used to construct a command to be executed on the target system or as part of the file name. Multiple parser passes are performed on the data supplied by the user.",
                "related_weakness": [
                    "171",
                    "179",
                    "181",
                    "183",
                    "184",
                    "20",
                    "697",
                    "707",
                    "74",
                    "77",
                    "78"
                ],
                "solutions": "An iterative approach to input validation may be required to ensure that no dangerous characters are present. It may be necessary to implement redundant checking across different input validation layers. Ensure that invalid data is rejected as soon as possible and do not continue to work with it. Make sure to perform input validation on canonicalized data (i.e. data that is data in its most standard form). This will help avoid tricky encodings getting past the filters. Assume all input is malicious. Create a white list that defines all valid input to the software system based on the requirements specifications. Input that does not match against the white list should not be permitted to enter into the system.",
                "summary": "An attacker supplies the target software with input data that contains sequences of special characters designed to bypass input validation logic. This exploit relies on the target making multiples passes over the input data and processing a \"layer\" of special characters with each pass. In this manner, the attacker can disguise input that would otherwise be rejected as invalid by concealing it with layers of special/escape characters that are stripped off by subsequent processing steps. The goal is to first discover cases where the input validation layer executes before one or more parsing layers. That is, user input may go through the following logic in an application: <parser1> --> <input validator> --> <parser2>. In such cases, the attacker will need to provide input that will pass through the input validator, but after passing through parser2, will be converted into something that the input validator was supposed to stop."
            }
        ],
        "cvss": null,
        "cwe": "CWE-77",
        "id": "CVE-2022-33891",
        "impact": {},
        "last-modified": "2023-05-02T15:15:00",
        "references": [
            "https://lists.apache.org/thread/p847l3kopoo5bjtmxrcwk21xp6tjxqlc",
            "http://packetstormsecurity.com/files/168309/Apache-Spark-Unauthenticated-Command-Injection.html",
            "http://www.openwall.com/lists/oss-security/2023/05/02/1"
        ],
        "summary": "The Apache Spark UI offers the possibility to enable ACLs via the configuration option spark.acls.enable. With an authentication filter, this checks whether a user has access permissions to view or modify the application. If ACLs are enabled, a code path in HttpSecurityFilter can allow someone to perform impersonation by providing an arbitrary user name. A malicious user might then be able to reach a permission check function that will ultimately build a Unix shell command based on their input, and execute it. This will result in arbitrary shell command execution as the user Spark is currently running as. This affects Apache Spark versions 3.0.3 and earlier, versions 3.1.1 to 3.1.2, and versions 3.2.0 to 3.2.1.",
        "vulnerable_configuration": [
            "cpe:2.3:a:apache:spark:0.1:alpha:*:*:*:*:*:*",
            "cpe:2.3:a:apache:spark:0.2:alpha:*:*:*:*:*:*",
            "cpe:2.3:a:apache:spark:0.5.0:*:*:*:*:*:*:*",
            "cpe:2.3:a:apache:spark:0.5.1:*:*:*:*:*:*:*",
            "cpe:2.3:a:apache:spark:0.5.2:*:*:*:*:*:*:*",
            "cpe:2.3:a:apache:spark:0.6.0:*:*:*:*:*:*:*",
            "cpe:2.3:a:apache:spark:0.6.1:*:*:*:*:*:*:*",
            "cpe:2.3:a:apache:spark:0.6.2:*:*:*:*:*:*:*",
            "cpe:2.3:a:apache:spark:0.7.0:*:*:*:*:*:*:*",
            "cpe:2.3:a:apache:spark:0.7.1:*:*:*:*:*:*:*",
            "cpe:2.3:a:apache:spark:0.7.2:*:*:*:*:*:*:*",
            "cpe:2.3:a:apache:spark:0.7.3:*:*:*:*:*:*:*",
            "cpe:2.3:a:apache:spark:0.8.1:*:*:*:*:*:*:*",
            "cpe:2.3:a:apache:spark:0.9.1:*:*:*:*:*:*:*",
            "cpe:2.3:a:apache:spark:0.9.2:*:*:*:*:*:*:*",
            "cpe:2.3:a:apache:spark:1.0.0:*:*:*:*:*:*:*",
            "cpe:2.3:a:apache:spark:1.0.1:*:*:*:*:*:*:*",
            "cpe:2.3:a:apache:spark:1.0.2:*:*:*:*:*:*:*",
            "cpe:2.3:a:apache:spark:1.1.0:*:*:*:*:*:*:*",
            "cpe:2.3:a:apache:spark:1.1.1:*:*:*:*:*:*:*",
            "cpe:2.3:a:apache:spark:1.2.0:*:*:*:*:*:*:*",
            "cpe:2.3:a:apache:spark:1.2.1:*:*:*:*:*:*:*",
            "cpe:2.3:a:apache:spark:1.2.2:*:*:*:*:*:*:*",
            "cpe:2.3:a:apache:spark:1.3.0:*:*:*:*:*:*:*",
            "cpe:2.3:a:apache:spark:1.3.1:*:*:*:*:*:*:*",
            "cpe:2.3:a:apache:spark:1.4.0:*:*:*:*:*:*:*",
            "cpe:2.3:a:apache:spark:1.4.1:*:*:*:*:*:*:*",
            "cpe:2.3:a:apache:spark:1.5.0:*:*:*:*:*:*:*",
            "cpe:2.3:a:apache:spark:1.5.1:*:*:*:*:*:*:*",
            "cpe:2.3:a:apache:spark:1.5.2:*:*:*:*:*:*:*",
            "cpe:2.3:a:apache:spark:1.6.0:*:*:*:*:*:*:*",
            "cpe:2.3:a:apache:spark:1.6.1:*:*:*:*:*:*:*",
            "cpe:2.3:a:apache:spark:1.6.2:*:*:*:*:*:*:*",
            "cpe:2.3:a:apache:spark:1.6.3:*:*:*:*:*:*:*",
            "cpe:2.3:a:apache:spark:2.0.0:*:*:*:*:*:*:*",
            "cpe:2.3:a:apache:spark:2.0.1:*:*:*:*:*:*:*",
            "cpe:2.3:a:apache:spark:2.0.2:*:*:*:*:*:*:*",
            "cpe:2.3:a:apache:spark:2.1.0:*:*:*:*:*:*:*",
            "cpe:2.3:a:apache:spark:2.1.1:*:*:*:*:*:*:*",
            "cpe:2.3:a:apache:spark:2.1.2:*:*:*:*:*:*:*",
            "cpe:2.3:a:apache:spark:2.1.2:-:*:*:*:*:*:*",
            "cpe:2.3:a:apache:spark:2.1.2:rc1:*:*:*:*:*:*",
            "cpe:2.3:a:apache:spark:2.1.2:rc2:*:*:*:*:*:*",
            "cpe:2.3:a:apache:spark:2.1.2:rc3:*:*:*:*:*:*",
            "cpe:2.3:a:apache:spark:2.1.2:rc4:*:*:*:*:*:*",
            "cpe:2.3:a:apache:spark:2.1.3:*:*:*:*:*:*:*",
            "cpe:2.3:a:apache:spark:2.1.3:-:*:*:*:*:*:*",
            "cpe:2.3:a:apache:spark:2.1.3:rc1:*:*:*:*:*:*",
            "cpe:2.3:a:apache:spark:2.1.3:rc2:*:*:*:*:*:*",
            "cpe:2.3:a:apache:spark:2.2.0:*:*:*:*:*:*:*",
            "cpe:2.3:a:apache:spark:2.2.1:*:*:*:*:*:*:*",
            "cpe:2.3:a:apache:spark:2.2.1:-:*:*:*:*:*:*",
            "cpe:2.3:a:apache:spark:2.2.1:rc1:*:*:*:*:*:*",
            "cpe:2.3:a:apache:spark:2.2.1:rc2:*:*:*:*:*:*",
            "cpe:2.3:a:apache:spark:2.2.2:*:*:*:*:*:*:*",
            "cpe:2.3:a:apache:spark:2.2.2:-:*:*:*:*:*:*",
            "cpe:2.3:a:apache:spark:2.2.2:rc1:*:*:*:*:*:*",
            "cpe:2.3:a:apache:spark:2.2.2:rc2:*:*:*:*:*:*",
            "cpe:2.3:a:apache:spark:2.2.3:-:*:*:*:*:*:*",
            "cpe:2.3:a:apache:spark:2.2.3:rc1:*:*:*:*:*:*",
            "cpe:2.3:a:apache:spark:2.3.0:*:*:*:*:*:*:*",
            "cpe:2.3:a:apache:spark:2.3.0:-:*:*:*:*:*:*",
            "cpe:2.3:a:apache:spark:2.3.0:rc1:*:*:*:*:*:*",
            "cpe:2.3:a:apache:spark:2.3.0:rc2:*:*:*:*:*:*",
            "cpe:2.3:a:apache:spark:2.3.0:rc3:*:*:*:*:*:*",
            "cpe:2.3:a:apache:spark:2.3.0:rc4:*:*:*:*:*:*",
            "cpe:2.3:a:apache:spark:2.3.1:*:*:*:*:*:*:*",
            "cpe:2.3:a:apache:spark:2.3.1:-:*:*:*:*:*:*",
            "cpe:2.3:a:apache:spark:2.3.1:rc1:*:*:*:*:*:*",
            "cpe:2.3:a:apache:spark:2.3.1:rc2:*:*:*:*:*:*",
            "cpe:2.3:a:apache:spark:2.3.1:rc3:*:*:*:*:*:*",
            "cpe:2.3:a:apache:spark:2.3.1:rc4:*:*:*:*:*:*",
            "cpe:2.3:a:apache:spark:2.3.2:*:*:*:*:*:*:*",
            "cpe:2.3:a:apache:spark:2.3.2:-:*:*:*:*:*:*",
            "cpe:2.3:a:apache:spark:2.3.2:rc1:*:*:*:*:*:*",
            "cpe:2.3:a:apache:spark:2.3.2:rc2:*:*:*:*:*:*",
            "cpe:2.3:a:apache:spark:2.3.2:rc3:*:*:*:*:*:*",
            "cpe:2.3:a:apache:spark:2.3.2:rc4:*:*:*:*:*:*",
            "cpe:2.3:a:apache:spark:2.3.2:rc5:*:*:*:*:*:*",
            "cpe:2.3:a:apache:spark:2.3.2:rc6:*:*:*:*:*:*",
            "cpe:2.3:a:apache:spark:2.3.3:-:*:*:*:*:*:*",
            "cpe:2.3:a:apache:spark:2.3.3:rc1:*:*:*:*:*:*",
            "cpe:2.3:a:apache:spark:2.3.3:rc2:*:*:*:*:*:*",
            "cpe:2.3:a:apache:spark:2.3.4:-:*:*:*:*:*:*",
            "cpe:2.3:a:apache:spark:2.3.4:rc1:*:*:*:*:*:*",
            "cpe:2.3:a:apache:spark:2.4.0:-:*:*:*:*:*:*",
            "cpe:2.3:a:apache:spark:2.4.0:rc1:*:*:*:*:*:*",
            "cpe:2.3:a:apache:spark:2.4.0:rc2:*:*:*:*:*:*",
            "cpe:2.3:a:apache:spark:2.4.0:rc3:*:*:*:*:*:*",
            "cpe:2.3:a:apache:spark:2.4.0:rc4:*:*:*:*:*:*",
            "cpe:2.3:a:apache:spark:2.4.0:rc5:*:*:*:*:*:*",
            "cpe:2.3:a:apache:spark:2.4.1:-:*:*:*:*:*:*",
            "cpe:2.3:a:apache:spark:2.4.1:rc1:*:*:*:*:*:*",
            "cpe:2.3:a:apache:spark:2.4.1:rc2:*:*:*:*:*:*",
            "cpe:2.3:a:apache:spark:2.4.1:rc3:*:*:*:*:*:*",
            "cpe:2.3:a:apache:spark:2.4.1:rc4:*:*:*:*:*:*",
            "cpe:2.3:a:apache:spark:2.4.1:rc5:*:*:*:*:*:*",
            "cpe:2.3:a:apache:spark:2.4.1:rc6:*:*:*:*:*:*",
            "cpe:2.3:a:apache:spark:2.4.1:rc7:*:*:*:*:*:*",
            "cpe:2.3:a:apache:spark:2.4.1:rc8:*:*:*:*:*:*",
            "cpe:2.3:a:apache:spark:2.4.1:rc9:*:*:*:*:*:*",
            "cpe:2.3:a:apache:spark:2.4.2:-:*:*:*:*:*:*",
            "cpe:2.3:a:apache:spark:2.4.2:rc1:*:*:*:*:*:*",
            "cpe:2.3:a:apache:spark:2.4.3:-:*:*:*:*:*:*",
            "cpe:2.3:a:apache:spark:2.4.3:rc1:*:*:*:*:*:*",
            "cpe:2.3:a:apache:spark:2.4.4:-:*:*:*:*:*:*",
            "cpe:2.3:a:apache:spark:2.4.4:rc1:*:*:*:*:*:*",
            "cpe:2.3:a:apache:spark:2.4.4:rc2:*:*:*:*:*:*",
            "cpe:2.3:a:apache:spark:2.4.4:rc3:*:*:*:*:*:*",
            "cpe:2.3:a:apache:spark:2.4.5:-:*:*:*:*:*:*",
            "cpe:2.3:a:apache:spark:2.4.5:rc1:*:*:*:*:*:*",
            "cpe:2.3:a:apache:spark:2.4.5:rc2:*:*:*:*:*:*",
            "cpe:2.3:a:apache:spark:2.4.6:-:*:*:*:*:*:*",
            "cpe:2.3:a:apache:spark:2.4.6:rc1:*:*:*:*:*:*",
            "cpe:2.3:a:apache:spark:2.4.6:rc2:*:*:*:*:*:*",
            "cpe:2.3:a:apache:spark:2.4.6:rc3:*:*:*:*:*:*",
            "cpe:2.3:a:apache:spark:2.4.6:rc4:*:*:*:*:*:*",
            "cpe:2.3:a:apache:spark:2.4.6:rc5:*:*:*:*:*:*",
            "cpe:2.3:a:apache:spark:2.4.6:rc6:*:*:*:*:*:*",
            "cpe:2.3:a:apache:spark:2.4.6:rc7:*:*:*:*:*:*",
            "cpe:2.3:a:apache:spark:2.4.6:rc8:*:*:*:*:*:*",
            "cpe:2.3:a:apache:spark:2.4.7:*:*:*:*:*:*:*",
            "cpe:2.3:a:apache:spark:2.4.8:*:*:*:*:*:*:*",
            "cpe:2.3:a:apache:spark:3.0.0:-:*:*:*:*:*:*",
            "cpe:2.3:a:apache:spark:3.0.0:rc1:*:*:*:*:*:*",
            "cpe:2.3:a:apache:spark:3.0.0:rc2:*:*:*:*:*:*",
            "cpe:2.3:a:apache:spark:3.0.0:rc3:*:*:*:*:*:*",
            "cpe:2.3:a:apache:spark:3.0.1:*:*:*:*:*:*:*",
            "cpe:2.3:a:apache:spark:3.0.1:-:*:*:*:*:*:*",
            "cpe:2.3:a:apache:spark:3.0.1:rc1:*:*:*:*:*:*",
            "cpe:2.3:a:apache:spark:3.0.1:rc2:*:*:*:*:*:*",
            "cpe:2.3:a:apache:spark:3.0.1:rc3:*:*:*:*:*:*",
            "cpe:2.3:a:apache:spark:3.0.2:-:*:*:*:*:*:*",
            "cpe:2.3:a:apache:spark:3.0.2:rc1:*:*:*:*:*:*",
            "cpe:2.3:a:apache:spark:3.0.3:-:*:*:*:*:*:*",
            "cpe:2.3:a:apache:spark:3.0.3:rc1:*:*:*:*:*:*",
            "cpe:2.3:a:apache:spark:3.2.0:-:*:*:*:*:*:*",
            "cpe:2.3:a:apache:spark:3.2.0:rc1:*:*:*:*:*:*",
            "cpe:2.3:a:apache:spark:3.2.0:rc2:*:*:*:*:*:*",
            "cpe:2.3:a:apache:spark:3.2.0:rc3:*:*:*:*:*:*",
            "cpe:2.3:a:apache:spark:3.2.0:rc4:*:*:*:*:*:*",
            "cpe:2.3:a:apache:spark:3.2.0:rc5:*:*:*:*:*:*",
            "cpe:2.3:a:apache:spark:3.2.0:rc6:*:*:*:*:*:*",
            "cpe:2.3:a:apache:spark:3.2.0:rc7:*:*:*:*:*:*",
            "cpe:2.3:a:apache:spark:3.1.1:-:*:*:*:*:*:*",
            "cpe:2.3:a:apache:spark:3.1.1:rc1:*:*:*:*:*:*",
            "cpe:2.3:a:apache:spark:3.1.1:rc2:*:*:*:*:*:*",
            "cpe:2.3:a:apache:spark:3.1.1:rc3:*:*:*:*:*:*",
            "cpe:2.3:a:apache:spark:3.1.2:-:*:*:*:*:*:*",
            "cpe:2.3:a:apache:spark:3.1.2:rc1:*:*:*:*:*:*"
        ],
        "vulnerable_configuration_cpe_2_2": [],
        "vulnerable_product": [
            "cpe:2.3:a:apache:spark:0.1:alpha:*:*:*:*:*:*",
            "cpe:2.3:a:apache:spark:0.2:alpha:*:*:*:*:*:*",
            "cpe:2.3:a:apache:spark:0.5.0:*:*:*:*:*:*:*",
            "cpe:2.3:a:apache:spark:0.5.1:*:*:*:*:*:*:*",
            "cpe:2.3:a:apache:spark:0.5.2:*:*:*:*:*:*:*",
            "cpe:2.3:a:apache:spark:0.6.0:*:*:*:*:*:*:*",
            "cpe:2.3:a:apache:spark:0.6.1:*:*:*:*:*:*:*",
            "cpe:2.3:a:apache:spark:0.6.2:*:*:*:*:*:*:*",
            "cpe:2.3:a:apache:spark:0.7.0:*:*:*:*:*:*:*",
            "cpe:2.3:a:apache:spark:0.7.1:*:*:*:*:*:*:*",
            "cpe:2.3:a:apache:spark:0.7.2:*:*:*:*:*:*:*",
            "cpe:2.3:a:apache:spark:0.7.3:*:*:*:*:*:*:*",
            "cpe:2.3:a:apache:spark:0.8.1:*:*:*:*:*:*:*",
            "cpe:2.3:a:apache:spark:0.9.1:*:*:*:*:*:*:*",
            "cpe:2.3:a:apache:spark:0.9.2:*:*:*:*:*:*:*",
            "cpe:2.3:a:apache:spark:1.0.0:*:*:*:*:*:*:*",
            "cpe:2.3:a:apache:spark:1.0.1:*:*:*:*:*:*:*",
            "cpe:2.3:a:apache:spark:1.0.2:*:*:*:*:*:*:*",
            "cpe:2.3:a:apache:spark:1.1.0:*:*:*:*:*:*:*",
            "cpe:2.3:a:apache:spark:1.1.1:*:*:*:*:*:*:*",
            "cpe:2.3:a:apache:spark:1.2.0:*:*:*:*:*:*:*",
            "cpe:2.3:a:apache:spark:1.2.1:*:*:*:*:*:*:*",
            "cpe:2.3:a:apache:spark:1.2.2:*:*:*:*:*:*:*",
            "cpe:2.3:a:apache:spark:1.3.0:*:*:*:*:*:*:*",
            "cpe:2.3:a:apache:spark:1.3.1:*:*:*:*:*:*:*",
            "cpe:2.3:a:apache:spark:1.4.0:*:*:*:*:*:*:*",
            "cpe:2.3:a:apache:spark:1.4.1:*:*:*:*:*:*:*",
            "cpe:2.3:a:apache:spark:1.5.0:*:*:*:*:*:*:*",
            "cpe:2.3:a:apache:spark:1.5.1:*:*:*:*:*:*:*",
            "cpe:2.3:a:apache:spark:1.5.2:*:*:*:*:*:*:*",
            "cpe:2.3:a:apache:spark:1.6.0:*:*:*:*:*:*:*",
            "cpe:2.3:a:apache:spark:1.6.1:*:*:*:*:*:*:*",
            "cpe:2.3:a:apache:spark:1.6.2:*:*:*:*:*:*:*",
            "cpe:2.3:a:apache:spark:1.6.3:*:*:*:*:*:*:*",
            "cpe:2.3:a:apache:spark:2.0.0:*:*:*:*:*:*:*",
            "cpe:2.3:a:apache:spark:2.0.1:*:*:*:*:*:*:*",
            "cpe:2.3:a:apache:spark:2.0.2:*:*:*:*:*:*:*",
            "cpe:2.3:a:apache:spark:2.1.0:*:*:*:*:*:*:*",
            "cpe:2.3:a:apache:spark:2.1.1:*:*:*:*:*:*:*",
            "cpe:2.3:a:apache:spark:2.1.2:*:*:*:*:*:*:*",
            "cpe:2.3:a:apache:spark:2.1.2:-:*:*:*:*:*:*",
            "cpe:2.3:a:apache:spark:2.1.2:rc1:*:*:*:*:*:*",
            "cpe:2.3:a:apache:spark:2.1.2:rc2:*:*:*:*:*:*",
            "cpe:2.3:a:apache:spark:2.1.2:rc3:*:*:*:*:*:*",
            "cpe:2.3:a:apache:spark:2.1.2:rc4:*:*:*:*:*:*",
            "cpe:2.3:a:apache:spark:2.1.3:*:*:*:*:*:*:*",
            "cpe:2.3:a:apache:spark:2.1.3:-:*:*:*:*:*:*",
            "cpe:2.3:a:apache:spark:2.1.3:rc1:*:*:*:*:*:*",
            "cpe:2.3:a:apache:spark:2.1.3:rc2:*:*:*:*:*:*",
            "cpe:2.3:a:apache:spark:2.2.0:*:*:*:*:*:*:*",
            "cpe:2.3:a:apache:spark:2.2.1:*:*:*:*:*:*:*",
            "cpe:2.3:a:apache:spark:2.2.1:-:*:*:*:*:*:*",
            "cpe:2.3:a:apache:spark:2.2.1:rc1:*:*:*:*:*:*",
            "cpe:2.3:a:apache:spark:2.2.1:rc2:*:*:*:*:*:*",
            "cpe:2.3:a:apache:spark:2.2.2:*:*:*:*:*:*:*",
            "cpe:2.3:a:apache:spark:2.2.2:-:*:*:*:*:*:*",
            "cpe:2.3:a:apache:spark:2.2.2:rc1:*:*:*:*:*:*",
            "cpe:2.3:a:apache:spark:2.2.2:rc2:*:*:*:*:*:*",
            "cpe:2.3:a:apache:spark:2.2.3:-:*:*:*:*:*:*",
            "cpe:2.3:a:apache:spark:2.2.3:rc1:*:*:*:*:*:*",
            "cpe:2.3:a:apache:spark:2.3.0:*:*:*:*:*:*:*",
            "cpe:2.3:a:apache:spark:2.3.0:-:*:*:*:*:*:*",
            "cpe:2.3:a:apache:spark:2.3.0:rc1:*:*:*:*:*:*",
            "cpe:2.3:a:apache:spark:2.3.0:rc2:*:*:*:*:*:*",
            "cpe:2.3:a:apache:spark:2.3.0:rc3:*:*:*:*:*:*",
            "cpe:2.3:a:apache:spark:2.3.0:rc4:*:*:*:*:*:*",
            "cpe:2.3:a:apache:spark:2.3.1:*:*:*:*:*:*:*",
            "cpe:2.3:a:apache:spark:2.3.1:-:*:*:*:*:*:*",
            "cpe:2.3:a:apache:spark:2.3.1:rc1:*:*:*:*:*:*",
            "cpe:2.3:a:apache:spark:2.3.1:rc2:*:*:*:*:*:*",
            "cpe:2.3:a:apache:spark:2.3.1:rc3:*:*:*:*:*:*",
            "cpe:2.3:a:apache:spark:2.3.1:rc4:*:*:*:*:*:*",
            "cpe:2.3:a:apache:spark:2.3.2:*:*:*:*:*:*:*",
            "cpe:2.3:a:apache:spark:2.3.2:-:*:*:*:*:*:*",
            "cpe:2.3:a:apache:spark:2.3.2:rc1:*:*:*:*:*:*",
            "cpe:2.3:a:apache:spark:2.3.2:rc2:*:*:*:*:*:*",
            "cpe:2.3:a:apache:spark:2.3.2:rc3:*:*:*:*:*:*",
            "cpe:2.3:a:apache:spark:2.3.2:rc4:*:*:*:*:*:*",
            "cpe:2.3:a:apache:spark:2.3.2:rc5:*:*:*:*:*:*",
            "cpe:2.3:a:apache:spark:2.3.2:rc6:*:*:*:*:*:*",
            "cpe:2.3:a:apache:spark:2.3.3:-:*:*:*:*:*:*",
            "cpe:2.3:a:apache:spark:2.3.3:rc1:*:*:*:*:*:*",
            "cpe:2.3:a:apache:spark:2.3.3:rc2:*:*:*:*:*:*",
            "cpe:2.3:a:apache:spark:2.3.4:-:*:*:*:*:*:*",
            "cpe:2.3:a:apache:spark:2.3.4:rc1:*:*:*:*:*:*",
            "cpe:2.3:a:apache:spark:2.4.0:-:*:*:*:*:*:*",
            "cpe:2.3:a:apache:spark:2.4.0:rc1:*:*:*:*:*:*",
            "cpe:2.3:a:apache:spark:2.4.0:rc2:*:*:*:*:*:*",
            "cpe:2.3:a:apache:spark:2.4.0:rc3:*:*:*:*:*:*",
            "cpe:2.3:a:apache:spark:2.4.0:rc4:*:*:*:*:*:*",
            "cpe:2.3:a:apache:spark:2.4.0:rc5:*:*:*:*:*:*",
            "cpe:2.3:a:apache:spark:2.4.1:-:*:*:*:*:*:*",
            "cpe:2.3:a:apache:spark:2.4.1:rc1:*:*:*:*:*:*",
            "cpe:2.3:a:apache:spark:2.4.1:rc2:*:*:*:*:*:*",
            "cpe:2.3:a:apache:spark:2.4.1:rc3:*:*:*:*:*:*",
            "cpe:2.3:a:apache:spark:2.4.1:rc4:*:*:*:*:*:*",
            "cpe:2.3:a:apache:spark:2.4.1:rc5:*:*:*:*:*:*",
            "cpe:2.3:a:apache:spark:2.4.1:rc6:*:*:*:*:*:*",
            "cpe:2.3:a:apache:spark:2.4.1:rc7:*:*:*:*:*:*",
            "cpe:2.3:a:apache:spark:2.4.1:rc8:*:*:*:*:*:*",
            "cpe:2.3:a:apache:spark:2.4.1:rc9:*:*:*:*:*:*",
            "cpe:2.3:a:apache:spark:2.4.2:-:*:*:*:*:*:*",
            "cpe:2.3:a:apache:spark:2.4.2:rc1:*:*:*:*:*:*",
            "cpe:2.3:a:apache:spark:2.4.3:-:*:*:*:*:*:*",
            "cpe:2.3:a:apache:spark:2.4.3:rc1:*:*:*:*:*:*",
            "cpe:2.3:a:apache:spark:2.4.4:-:*:*:*:*:*:*",
            "cpe:2.3:a:apache:spark:2.4.4:rc1:*:*:*:*:*:*",
            "cpe:2.3:a:apache:spark:2.4.4:rc2:*:*:*:*:*:*",
            "cpe:2.3:a:apache:spark:2.4.4:rc3:*:*:*:*:*:*",
            "cpe:2.3:a:apache:spark:2.4.5:-:*:*:*:*:*:*",
            "cpe:2.3:a:apache:spark:2.4.5:rc1:*:*:*:*:*:*",
            "cpe:2.3:a:apache:spark:2.4.5:rc2:*:*:*:*:*:*",
            "cpe:2.3:a:apache:spark:2.4.6:-:*:*:*:*:*:*",
            "cpe:2.3:a:apache:spark:2.4.6:rc1:*:*:*:*:*:*",
            "cpe:2.3:a:apache:spark:2.4.6:rc2:*:*:*:*:*:*",
            "cpe:2.3:a:apache:spark:2.4.6:rc3:*:*:*:*:*:*",
            "cpe:2.3:a:apache:spark:2.4.6:rc4:*:*:*:*:*:*",
            "cpe:2.3:a:apache:spark:2.4.6:rc5:*:*:*:*:*:*",
            "cpe:2.3:a:apache:spark:2.4.6:rc6:*:*:*:*:*:*",
            "cpe:2.3:a:apache:spark:2.4.6:rc7:*:*:*:*:*:*",
            "cpe:2.3:a:apache:spark:2.4.6:rc8:*:*:*:*:*:*",
            "cpe:2.3:a:apache:spark:2.4.7:*:*:*:*:*:*:*",
            "cpe:2.3:a:apache:spark:2.4.8:*:*:*:*:*:*:*",
            "cpe:2.3:a:apache:spark:3.0.0:-:*:*:*:*:*:*",
            "cpe:2.3:a:apache:spark:3.0.0:rc1:*:*:*:*:*:*",
            "cpe:2.3:a:apache:spark:3.0.0:rc2:*:*:*:*:*:*",
            "cpe:2.3:a:apache:spark:3.0.0:rc3:*:*:*:*:*:*",
            "cpe:2.3:a:apache:spark:3.0.1:*:*:*:*:*:*:*",
            "cpe:2.3:a:apache:spark:3.0.1:-:*:*:*:*:*:*",
            "cpe:2.3:a:apache:spark:3.0.1:rc1:*:*:*:*:*:*",
            "cpe:2.3:a:apache:spark:3.0.1:rc2:*:*:*:*:*:*",
            "cpe:2.3:a:apache:spark:3.0.1:rc3:*:*:*:*:*:*",
            "cpe:2.3:a:apache:spark:3.0.2:-:*:*:*:*:*:*",
            "cpe:2.3:a:apache:spark:3.0.2:rc1:*:*:*:*:*:*",
            "cpe:2.3:a:apache:spark:3.0.3:-:*:*:*:*:*:*",
            "cpe:2.3:a:apache:spark:3.0.3:rc1:*:*:*:*:*:*",
            "cpe:2.3:a:apache:spark:3.2.0:-:*:*:*:*:*:*",
            "cpe:2.3:a:apache:spark:3.2.0:rc1:*:*:*:*:*:*",
            "cpe:2.3:a:apache:spark:3.2.0:rc2:*:*:*:*:*:*",
            "cpe:2.3:a:apache:spark:3.2.0:rc3:*:*:*:*:*:*",
            "cpe:2.3:a:apache:spark:3.2.0:rc4:*:*:*:*:*:*",
            "cpe:2.3:a:apache:spark:3.2.0:rc5:*:*:*:*:*:*",
            "cpe:2.3:a:apache:spark:3.2.0:rc6:*:*:*:*:*:*",
            "cpe:2.3:a:apache:spark:3.2.0:rc7:*:*:*:*:*:*",
            "cpe:2.3:a:apache:spark:3.1.1:-:*:*:*:*:*:*",
            "cpe:2.3:a:apache:spark:3.1.1:rc1:*:*:*:*:*:*",
            "cpe:2.3:a:apache:spark:3.1.1:rc2:*:*:*:*:*:*",
            "cpe:2.3:a:apache:spark:3.1.1:rc3:*:*:*:*:*:*",
            "cpe:2.3:a:apache:spark:3.1.2:-:*:*:*:*:*:*",
            "cpe:2.3:a:apache:spark:3.1.2:rc1:*:*:*:*:*:*"
        ]
    },
    {
        "Modified": "2023-05-02T15:05:00",
        "Published": "2023-04-20T16:15:00",
        "access": {},
        "assigner": "talos-cna@cisco.com",
        "capec": [],
        "cvss": null,
        "cwe": "CWE-787",
        "id": "CVE-2022-36788",
        "impact": {},
        "last-modified": "2023-05-02T15:05:00",
        "references": [
            "https://talosintelligence.com/vulnerability_reports/TALOS-2022-1593"
        ],
        "summary": "A heap-based buffer overflow vulnerability exists in the TriangleMesh clone functionality of Slic3r libslic3r 1.3.0 and Master Commit b1a5500. A specially-crafted STL file can lead to a heap buffer overflow. An attacker can provide a malicious file to trigger this vulnerability.",
        "vulnerable_configuration": [
            "cpe:2.3:a:slic3r:libslic3r:1.3.0:*:*:*:*:*:*:*"
        ],
        "vulnerable_configuration_cpe_2_2": [],
        "vulnerable_product": [
            "cpe:2.3:a:slic3r:libslic3r:1.3.0:*:*:*:*:*:*:*"
        ]
    },
    {
        "Modified": "2023-05-02T15:04:00",
        "Published": "2023-04-22T03:15:00",
        "access": {},
        "assigner": "psirt@nvidia.com",
        "capec": [],
        "cvss": null,
        "cwe": "NVD-CWE-noinfo",
        "id": "CVE-2023-0206",
        "impact": {},
        "last-modified": "2023-05-02T15:04:00",
        "references": [
            "https://nvidia.custhelp.com/app/answers/detail/a_id/5449"
        ],
        "summary": "NVIDIA DGX A100 SBIOS contains a vulnerability where an attacker may modify arbitrary memory of SMRAM by exploiting the NVME SMM API. A successful exploit of this vulnerability may lead to denial of service, escalation of privileges, and information disclosure.",
        "vulnerable_configuration": [
            "cpe:2.3:o:nvidia:dgx_a100_firmware:-:*:*:*:sbios:*:*:*",
            "cpe:2.3:h:nvidia:dgx_a100:-:*:*:*:*:*:*:*"
        ],
        "vulnerable_configuration_cpe_2_2": [],
        "vulnerable_product": [
            "cpe:2.3:o:nvidia:dgx_a100_firmware:-:*:*:*:sbios:*:*:*"
        ]
    },
    {
        "Modified": "2023-05-02T14:57:00",
        "Published": "2023-04-22T03:15:00",
        "access": {},
        "assigner": "psirt@nvidia.com",
        "capec": [
            {
                "id": "537",
                "name": "Infiltration of Hardware Development Environment",
                "prerequisites": "The victim must use email or removable media from systems running the IDE (or systems adjacent to the IDE systems). The victim must have a system running exploitable applications and/or a vulnerable configuration to allow for initial infiltration. The attacker must have working knowledge of some if not all of the components involved in the IDE system as well as the infrastructure.",
                "related_weakness": [
                    "125"
                ],
                "solutions": "",
                "summary": "An attacker, leveraging the ability to manipulate components of primary support systems and tools within the development and production environments, inserts malicious software within the hardware and/or firmware development environment. The infiltration purpose is to alter developed hardware components in a system destined for deployment at the victim's organization, for the purpose of disruption or further compromise."
            },
            {
                "id": "540",
                "name": "Overread Buffers",
                "prerequisites": "For this type of attack to be successful, a few prerequisites must be met. First, the targeted software must be written in a language that enables fine grained buffer control. (e.g., c, c++) Second, the targeted software must actually perform buffer operations and inadequately perform bounds-checking on those buffer operations. Finally, the adversary must have the capability to influence the input that guides these buffer operations.",
                "related_weakness": [
                    "125"
                ],
                "solutions": "",
                "summary": "An adversary attacks a target by providing input that causes an application to read beyond the boundary of a defined buffer. This typically occurs when a value influencing where to start or stop reading is set to reflect positions outside of the valid memory location of the buffer. This type of attack may result in exposure of sensitive information, a system crash, or arbitrary code execution."
            }
        ],
        "cvss": null,
        "cwe": "CWE-125",
        "id": "CVE-2023-25513",
        "impact": {},
        "last-modified": "2023-05-02T14:57:00",
        "references": [
            "https://nvidia.custhelp.com/app/answers/detail/a_id/5456"
        ],
        "summary": "NVIDIA CUDA toolkit for Linux and Windows contains a vulnerability in cuobjdump, where an attacker may cause an out-of-bounds read by tricking a user into running cuobjdump on a malformed input file. A successful exploit of this vulnerability may lead to limited denial of service, code execution, and limited information disclosure.",
        "vulnerable_configuration": [
            "cpe:2.3:a:nvidia:cuda_toolkit:-:*:*:*:*:*:*:*",
            "cpe:2.3:a:nvidia:cuda_toolkit:1.0:*:*:*:*:*:*:*",
            "cpe:2.3:a:nvidia:cuda_toolkit:1.1:*:*:*:*:*:*:*",
            "cpe:2.3:a:nvidia:cuda_toolkit:2.0:*:*:*:*:*:*:*",
            "cpe:2.3:a:nvidia:cuda_toolkit:2.1:*:*:*:*:*:*:*",
            "cpe:2.3:a:nvidia:cuda_toolkit:2.2:*:*:*:*:*:*:*",
            "cpe:2.3:a:nvidia:cuda_toolkit:2.3:*:*:*:*:*:*:*",
            "cpe:2.3:a:nvidia:cuda_toolkit:3.0:*:*:*:*:*:*:*",
            "cpe:2.3:a:nvidia:cuda_toolkit:3.1:*:*:*:*:*:*:*",
            "cpe:2.3:a:nvidia:cuda_toolkit:3.2:*:*:*:*:*:*:*",
            "cpe:2.3:a:nvidia:cuda_toolkit:4.0:*:*:*:*:*:*:*",
            "cpe:2.3:a:nvidia:cuda_toolkit:4.1:*:*:*:*:*:*:*",
            "cpe:2.3:a:nvidia:cuda_toolkit:4.2:*:*:*:*:*:*:*",
            "cpe:2.3:a:nvidia:cuda_toolkit:5.0:*:*:*:*:*:*:*",
            "cpe:2.3:a:nvidia:cuda_toolkit:5.5:*:*:*:*:*:*:*",
            "cpe:2.3:a:nvidia:cuda_toolkit:6.0:*:*:*:*:*:*:*",
            "cpe:2.3:a:nvidia:cuda_toolkit:6.5:*:*:*:*:*:*:*",
            "cpe:2.3:a:nvidia:cuda_toolkit:7.0:*:*:*:*:*:*:*",
            "cpe:2.3:a:nvidia:cuda_toolkit:7.5:*:*:*:*:*:*:*",
            "cpe:2.3:a:nvidia:cuda_toolkit:8.0:*:*:*:*:*:*:*",
            "cpe:2.3:a:nvidia:cuda_toolkit:9.0:*:*:*:*:*:*:*",
            "cpe:2.3:a:nvidia:cuda_toolkit:9.0.176:*:*:*:*:*:*:*",
            "cpe:2.3:a:nvidia:cuda_toolkit:9.1:*:*:*:*:*:*:*",
            "cpe:2.3:a:nvidia:cuda_toolkit:9.2:*:*:*:*:*:*:*",
            "cpe:2.3:a:nvidia:cuda_toolkit:10.0:*:*:*:*:*:*:*",
            "cpe:2.3:a:nvidia:cuda_toolkit:10.0.130:*:*:*:*:*:*:*",
            "cpe:2.3:a:nvidia:cuda_toolkit:10.1:*:*:*:*:*:*:*",
            "cpe:2.3:a:nvidia:cuda_toolkit:10.2:*:*:*:*:*:*:*",
            "cpe:2.3:a:nvidia:cuda_toolkit:10.2.89:*:*:*:*:*:*:*",
            "cpe:2.3:a:nvidia:cuda_toolkit:11.0.0:*:*:*:*:*:*:*",
            "cpe:2.3:a:nvidia:cuda_toolkit:11.0.1:*:*:*:*:*:*:*",
            "cpe:2.3:a:nvidia:cuda_toolkit:11.0.2:*:*:*:*:*:*:*",
            "cpe:2.3:a:nvidia:cuda_toolkit:11.0.3:*:*:*:*:*:*:*",
            "cpe:2.3:a:nvidia:cuda_toolkit:11.1.0:*:*:*:*:*:*:*",
            "cpe:2.3:a:nvidia:cuda_toolkit:11.1.1:*:*:*:*:*:*:*",
            "cpe:2.3:a:nvidia:cuda_toolkit:11.2.0:*:*:*:*:*:*:*",
            "cpe:2.3:a:nvidia:cuda_toolkit:11.2.1:*:*:*:*:*:*:*",
            "cpe:2.3:a:nvidia:cuda_toolkit:11.2.2:*:*:*:*:*:*:*",
            "cpe:2.3:a:nvidia:cuda_toolkit:11.3.0:*:*:*:*:*:*:*",
            "cpe:2.3:a:nvidia:cuda_toolkit:11.3.1:*:*:*:*:*:*:*",
            "cpe:2.3:a:nvidia:cuda_toolkit:11.4.0:*:*:*:*:*:*:*",
            "cpe:2.3:a:nvidia:cuda_toolkit:11.4.2:*:*:*:*:*:*:*",
            "cpe:2.3:a:nvidia:cuda_toolkit:11.4.3:*:*:*:*:*:*:*",
            "cpe:2.3:a:nvidia:cuda_toolkit:11.4.4:*:*:*:*:*:*:*",
            "cpe:2.3:a:nvidia:cuda_toolkit:11.5.0:*:*:*:*:*:*:*",
            "cpe:2.3:a:nvidia:cuda_toolkit:11.5.1:*:*:*:*:*:*:*",
            "cpe:2.3:a:nvidia:cuda_toolkit:11.5.2:*:*:*:*:*:*:*",
            "cpe:2.3:a:nvidia:cuda_toolkit:11.6.0:*:*:*:*:*:*:*",
            "cpe:2.3:a:nvidia:cuda_toolkit:11.6.1:*:*:*:*:*:*:*",
            "cpe:2.3:a:nvidia:cuda_toolkit:11.6.2:*:*:*:*:*:*:*",
            "cpe:2.3:a:nvidia:cuda_toolkit:11.8:*:*:*:*:*:*:*",
            "cpe:2.3:o:linux:linux_kernel:-:*:*:*:*:*:*:*",
            "cpe:2.3:o:microsoft:windows:-:*:*:*:*:*:*:*"
        ],
        "vulnerable_configuration_cpe_2_2": [],
        "vulnerable_product": [
            "cpe:2.3:a:nvidia:cuda_toolkit:-:*:*:*:*:*:*:*",
            "cpe:2.3:a:nvidia:cuda_toolkit:1.0:*:*:*:*:*:*:*",
            "cpe:2.3:a:nvidia:cuda_toolkit:1.1:*:*:*:*:*:*:*",
            "cpe:2.3:a:nvidia:cuda_toolkit:2.0:*:*:*:*:*:*:*",
            "cpe:2.3:a:nvidia:cuda_toolkit:2.1:*:*:*:*:*:*:*",
            "cpe:2.3:a:nvidia:cuda_toolkit:2.2:*:*:*:*:*:*:*",
            "cpe:2.3:a:nvidia:cuda_toolkit:2.3:*:*:*:*:*:*:*",
            "cpe:2.3:a:nvidia:cuda_toolkit:3.0:*:*:*:*:*:*:*",
            "cpe:2.3:a:nvidia:cuda_toolkit:3.1:*:*:*:*:*:*:*",
            "cpe:2.3:a:nvidia:cuda_toolkit:3.2:*:*:*:*:*:*:*",
            "cpe:2.3:a:nvidia:cuda_toolkit:4.0:*:*:*:*:*:*:*",
            "cpe:2.3:a:nvidia:cuda_toolkit:4.1:*:*:*:*:*:*:*",
            "cpe:2.3:a:nvidia:cuda_toolkit:4.2:*:*:*:*:*:*:*",
            "cpe:2.3:a:nvidia:cuda_toolkit:5.0:*:*:*:*:*:*:*",
            "cpe:2.3:a:nvidia:cuda_toolkit:5.5:*:*:*:*:*:*:*",
            "cpe:2.3:a:nvidia:cuda_toolkit:6.0:*:*:*:*:*:*:*",
            "cpe:2.3:a:nvidia:cuda_toolkit:6.5:*:*:*:*:*:*:*",
            "cpe:2.3:a:nvidia:cuda_toolkit:7.0:*:*:*:*:*:*:*",
            "cpe:2.3:a:nvidia:cuda_toolkit:7.5:*:*:*:*:*:*:*",
            "cpe:2.3:a:nvidia:cuda_toolkit:8.0:*:*:*:*:*:*:*",
            "cpe:2.3:a:nvidia:cuda_toolkit:9.0:*:*:*:*:*:*:*",
            "cpe:2.3:a:nvidia:cuda_toolkit:9.0.176:*:*:*:*:*:*:*",
            "cpe:2.3:a:nvidia:cuda_toolkit:9.1:*:*:*:*:*:*:*",
            "cpe:2.3:a:nvidia:cuda_toolkit:9.2:*:*:*:*:*:*:*",
            "cpe:2.3:a:nvidia:cuda_toolkit:10.0:*:*:*:*:*:*:*",
            "cpe:2.3:a:nvidia:cuda_toolkit:10.0.130:*:*:*:*:*:*:*",
            "cpe:2.3:a:nvidia:cuda_toolkit:10.1:*:*:*:*:*:*:*",
            "cpe:2.3:a:nvidia:cuda_toolkit:10.2:*:*:*:*:*:*:*",
            "cpe:2.3:a:nvidia:cuda_toolkit:10.2.89:*:*:*:*:*:*:*",
            "cpe:2.3:a:nvidia:cuda_toolkit:11.0.0:*:*:*:*:*:*:*",
            "cpe:2.3:a:nvidia:cuda_toolkit:11.0.1:*:*:*:*:*:*:*",
            "cpe:2.3:a:nvidia:cuda_toolkit:11.0.2:*:*:*:*:*:*:*",
            "cpe:2.3:a:nvidia:cuda_toolkit:11.0.3:*:*:*:*:*:*:*",
            "cpe:2.3:a:nvidia:cuda_toolkit:11.1.0:*:*:*:*:*:*:*",
            "cpe:2.3:a:nvidia:cuda_toolkit:11.1.1:*:*:*:*:*:*:*",
            "cpe:2.3:a:nvidia:cuda_toolkit:11.2.0:*:*:*:*:*:*:*",
            "cpe:2.3:a:nvidia:cuda_toolkit:11.2.1:*:*:*:*:*:*:*",
            "cpe:2.3:a:nvidia:cuda_toolkit:11.2.2:*:*:*:*:*:*:*",
            "cpe:2.3:a:nvidia:cuda_toolkit:11.3.0:*:*:*:*:*:*:*",
            "cpe:2.3:a:nvidia:cuda_toolkit:11.3.1:*:*:*:*:*:*:*",
            "cpe:2.3:a:nvidia:cuda_toolkit:11.4.0:*:*:*:*:*:*:*",
            "cpe:2.3:a:nvidia:cuda_toolkit:11.4.2:*:*:*:*:*:*:*",
            "cpe:2.3:a:nvidia:cuda_toolkit:11.4.3:*:*:*:*:*:*:*",
            "cpe:2.3:a:nvidia:cuda_toolkit:11.4.4:*:*:*:*:*:*:*",
            "cpe:2.3:a:nvidia:cuda_toolkit:11.5.0:*:*:*:*:*:*:*",
            "cpe:2.3:a:nvidia:cuda_toolkit:11.5.1:*:*:*:*:*:*:*",
            "cpe:2.3:a:nvidia:cuda_toolkit:11.5.2:*:*:*:*:*:*:*",
            "cpe:2.3:a:nvidia:cuda_toolkit:11.6.0:*:*:*:*:*:*:*",
            "cpe:2.3:a:nvidia:cuda_toolkit:11.6.1:*:*:*:*:*:*:*",
            "cpe:2.3:a:nvidia:cuda_toolkit:11.6.2:*:*:*:*:*:*:*",
            "cpe:2.3:a:nvidia:cuda_toolkit:11.8:*:*:*:*:*:*:*"
        ]
    },
    {
        "Modified": "2023-05-02T14:55:00",
        "Published": "2023-04-24T19:15:00",
        "access": {},
        "assigner": "contact@wpscan.com",
        "capec": [
            {
                "id": "591",
                "name": "Reflected XSS",
                "prerequisites": "An application that leverages a client-side web browser with scripting enabled. An application that fail to adequately sanitize or encode untrusted input.",
                "related_weakness": [
                    "79"
                ],
                "solutions": "Use browser technologies that do not allow client-side scripting. Utilize strict type, character, and encoding enforcement. Ensure that all user-supplied input is validated before use.",
                "summary": "This type of attack is a form of Cross-Site Scripting (XSS) where a malicious script is \"reflected\" off a vulnerable web application and then executed by a victim's browser. The process starts with an adversary delivering a malicious script to a victim and convincing the victim to send the script to the vulnerable web application. The most common method of this is through a phishing email where the adversary embeds the malicious script with a URL that the victim then clicks on. In processing the subsequent request, the vulnerable web application incorrectly considers the malicious script as valid input and uses it to creates a reposnse that is then sent back to the victim. To launch a successful Reflected XSS attack, an adversary looks for places where user-input is used directly in the generation of a response. This often involves elements that are not expected to host scripts such as image tags (<img>), or the addition of event attibutes such as onload and onmouseover. These elements are often not subject to the same input validation, output encoding, and other content filtering and checking routines."
            },
            {
                "id": "209",
                "name": "XSS Using MIME Type Mismatch",
                "prerequisites": "The victim must follow a crafted link that references a scripting file that is mis-typed as a non-executable file. The victim's browser must detect the true type of a mis-labeled scripting file and invoke the appropriate script interpreter without first performing filtering on the content.",
                "related_weakness": [
                    "20",
                    "646",
                    "79"
                ],
                "solutions": "",
                "summary": "An adversary creates a file with scripting content but where the specified MIME type of the file is such that scripting is not expected. The adversary tricks the victim into accessing a URL that responds with the script file. Some browsers will detect that the specified MIME type of the file does not match the actual type of its content and will automatically switch to using an interpreter for the real content type. If the browser does not invoke script filters before doing this, the adversary's script may run on the target unsanitized, possibly revealing the victim's cookies or executing arbitrary script in their browser."
            },
            {
                "id": "588",
                "name": "DOM-Based XSS",
                "prerequisites": "An application that leverages a client-side web browser with scripting enabled. An application that manipulates the DOM via client-side scripting. An application that failS to adequately sanitize or encode untrusted input.",
                "related_weakness": [
                    "20",
                    "79",
                    "83"
                ],
                "solutions": "Use browser technologies that do not allow client-side scripting. Utilize proper character encoding for all output produced within client-site scripts manipulating the DOM. Ensure that all user-supplied input is validated before use.",
                "summary": "This type of attack is a form of Cross-Site Scripting (XSS) where a malicious script is inserted into the client-side HTML being parsed by a web browser. Content served by a vulnerable web application includes script code used to manipulate the Document Object Model (DOM). This script code either does not properly validate input, or does not perform proper output encoding, thus creating an opportunity for an adversary to inject a malicious script launch a XSS attack. A key distinction between other XSS attacks and DOM-based attacks is that in other XSS attacks, the malicious script runs when the vulnerable web page is initially loaded, while a DOM-based attack executes sometime after the page loads. Another distinction of DOM-based attacks is that in some cases, the malicious script is never sent to the vulnerable web server at all. An attack like this is guaranteed to bypass any server-side filtering attempts to protect users."
            },
            {
                "id": "592",
                "name": "Stored XSS",
                "prerequisites": "An application that leverages a client-side web browser with scripting enabled. An application that fails to adequately sanitize or encode untrusted input. An application that stores information provided by the user in data storage of some kind.",
                "related_weakness": [
                    "79"
                ],
                "solutions": "Use browser technologies that do not allow client-side scripting. Utilize strict type, character, and encoding enforcement. Ensure that all user-supplied input is validated before being stored.",
                "summary": "This type of attack is a form of Cross-site Scripting (XSS) where a malicious script is persistenly \"stored\" within the data storage of a vulnerable web application. Initially presented by an adversary to the vulnerable web application, the malicious script is incorrectly considered valid input and is not properly encoded by the web application. A victim is then convinced to use the web application in a way that creates a response that includes the malicious script. This response is subsequently sent to the victim and the malicious script is executed by the victim's browser. To launch a successful Stored XSS attack, an adversary looks for places where stored input data is used in the generation of a response. This often involves elements that are not expected to host scripts such as image tags (<img>), or the addition of event attibutes such as onload and onmouseover. These elements are often not subject to the same input validation, output encoding, and other content filtering and checking routines."
            },
            {
                "id": "85",
                "name": "AJAX Fingerprinting",
                "prerequisites": "The user must allow JavaScript to execute in their browser",
                "related_weakness": [
                    "113",
                    "116",
                    "184",
                    "20",
                    "348",
                    "692",
                    "712",
                    "79",
                    "86",
                    "96"
                ],
                "solutions": "Design: Use browser technologies that do not allow client side scripting. Design: Utilize strict type, character, and encoding enforcement Implementation: Ensure all content that is delivered to client is sanitized against an acceptable content specification. Implementation: Perform input validation for all remote content. Implementation: Perform output validation for all remote content. Implementation: Disable scripting languages such as JavaScript in browser Implementation: Patching software. There are many attack vectors for XSS on the client side and the server side. Many vulnerabilities are fixed in service packs for browser, web servers, and plug in technologies, staying current on patch release that deal with XSS countermeasures mitigates this.",
                "summary": "This attack utilizes the frequent client-server roundtrips in Ajax conversation to scan a system. While Ajax does not open up new vulnerabilities per se, it does optimize them from an attacker point of view. In many XSS attacks the attacker must get a \"hole in one\" and successfully exploit the vulnerability on the victim side the first time, once the client is redirected the attacker has many chances to engage in follow on probes, but there is only one first chance. In a widely used web application this is not a major problem because 1 in a 1,000 is good enough in a widely used application. A common first step for an attacker is to footprint the environment to understand what attacks will work. Since footprinting relies on enumeration, the conversational pattern of rapid, multiple requests and responses that are typical in Ajax applications enable an attacker to look for many vulnerabilities, well-known ports, network locations and so on."
            },
            {
                "id": "63",
                "name": "Cross-Site Scripting (XSS)",
                "prerequisites": "Target client software must be a client that allows scripting communication from remote hosts, such as a JavaScript-enabled Web Browser.",
                "related_weakness": [
                    "20",
                    "79"
                ],
                "solutions": "Design: Use browser technologies that do not allow client side scripting. Design: Utilize strict type, character, and encoding enforcement Design: Server side developers should not proxy content via XHR or other means, if a http proxy for remote content is setup on the server side, the client's browser has no way of discerning where the data is originating from. Implementation: Ensure all content that is delivered to client is sanitized against an acceptable content specification. Implementation: Perform input validation for all remote content. Implementation: Perform output validation for all remote content. Implementation: Session tokens for specific host Implementation: Patching software. There are many attack vectors for XSS on the client side and the server side. Many vulnerabilities are fixed in service packs for browser, web servers, and plug in technologies, staying current on patch release that deal with XSS countermeasures mitigates this.",
                "summary": "An adversary embeds malicious scripts in content that will be served to web browsers. The goal of the attack is for the target software, the client-side browser, to execute the script with the users' privilege level. An attack of this type exploits a programs' vulnerabilities that are brought on by allowing remote hosts to execute code and scripts. Web browsers, for example, have some simple security controls in place, but if a remote attacker is allowed to execute scripts (through injecting them in to user-generated content like bulletin boards) then these controls may be bypassed. Further, these attacks are very difficult for an end user to detect."
            }
        ],
        "cvss": null,
        "cwe": "CWE-79",
        "id": "CVE-2023-1126",
        "impact": {},
        "last-modified": "2023-05-02T14:55:00",
        "references": [
            "https://wpscan.com/vulnerability/87ce3c59-b234-47bf-abca-e690b53bbe82"
        ],
        "summary": "The WP FEvents Book WordPress plugin through 0.46 does not sanitise and escape some parameters, which could allow any authenticated users, such as subscriber to perform Cross-Site Scripting attacks",
        "vulnerable_configuration": [
            "cpe:2.3:a:wp_fevents_book_project:wp_fevents_book:*:*:*:*:*:wordpress:*:*"
        ],
        "vulnerable_configuration_cpe_2_2": [],
        "vulnerable_product": [
            "cpe:2.3:a:wp_fevents_book_project:wp_fevents_book:*:*:*:*:*:wordpress:*:*"
        ]
    },
    {
        "Modified": "2023-05-02T14:55:00",
        "Published": "2023-04-24T19:15:00",
        "access": {},
        "assigner": "contact@wpscan.com",
        "capec": [],
        "cvss": null,
        "cwe": "CWE-639",
        "id": "CVE-2023-1129",
        "impact": {},
        "last-modified": "2023-05-02T14:55:00",
        "references": [
            "https://wpscan.com/vulnerability/d40479de-fb04-41b8-9fb0-41b9eefbd8af"
        ],
        "summary": "The WP FEvents Book WordPress plugin through 0.46 does not ensures that bookings to be updated belong to the user making the request, allowing any authenticated user to book, add notes, or cancel booking on behalf of other users.",
        "vulnerable_configuration": [
            "cpe:2.3:a:wp_fevents_book_project:wp_fevents_book:*:*:*:*:*:wordpress:*:*"
        ],
        "vulnerable_configuration_cpe_2_2": [],
        "vulnerable_product": [
            "cpe:2.3:a:wp_fevents_book_project:wp_fevents_book:*:*:*:*:*:wordpress:*:*"
        ]
    },
    {
        "Modified": "2023-05-02T14:52:00",
        "Published": "2023-04-24T19:15:00",
        "access": {},
        "assigner": "contact@wpscan.com",
        "capec": [
            {
                "id": "591",
                "name": "Reflected XSS",
                "prerequisites": "An application that leverages a client-side web browser with scripting enabled. An application that fail to adequately sanitize or encode untrusted input.",
                "related_weakness": [
                    "79"
                ],
                "solutions": "Use browser technologies that do not allow client-side scripting. Utilize strict type, character, and encoding enforcement. Ensure that all user-supplied input is validated before use.",
                "summary": "This type of attack is a form of Cross-Site Scripting (XSS) where a malicious script is \"reflected\" off a vulnerable web application and then executed by a victim's browser. The process starts with an adversary delivering a malicious script to a victim and convincing the victim to send the script to the vulnerable web application. The most common method of this is through a phishing email where the adversary embeds the malicious script with a URL that the victim then clicks on. In processing the subsequent request, the vulnerable web application incorrectly considers the malicious script as valid input and uses it to creates a reposnse that is then sent back to the victim. To launch a successful Reflected XSS attack, an adversary looks for places where user-input is used directly in the generation of a response. This often involves elements that are not expected to host scripts such as image tags (<img>), or the addition of event attibutes such as onload and onmouseover. These elements are often not subject to the same input validation, output encoding, and other content filtering and checking routines."
            },
            {
                "id": "209",
                "name": "XSS Using MIME Type Mismatch",
                "prerequisites": "The victim must follow a crafted link that references a scripting file that is mis-typed as a non-executable file. The victim's browser must detect the true type of a mis-labeled scripting file and invoke the appropriate script interpreter without first performing filtering on the content.",
                "related_weakness": [
                    "20",
                    "646",
                    "79"
                ],
                "solutions": "",
                "summary": "An adversary creates a file with scripting content but where the specified MIME type of the file is such that scripting is not expected. The adversary tricks the victim into accessing a URL that responds with the script file. Some browsers will detect that the specified MIME type of the file does not match the actual type of its content and will automatically switch to using an interpreter for the real content type. If the browser does not invoke script filters before doing this, the adversary's script may run on the target unsanitized, possibly revealing the victim's cookies or executing arbitrary script in their browser."
            },
            {
                "id": "588",
                "name": "DOM-Based XSS",
                "prerequisites": "An application that leverages a client-side web browser with scripting enabled. An application that manipulates the DOM via client-side scripting. An application that failS to adequately sanitize or encode untrusted input.",
                "related_weakness": [
                    "20",
                    "79",
                    "83"
                ],
                "solutions": "Use browser technologies that do not allow client-side scripting. Utilize proper character encoding for all output produced within client-site scripts manipulating the DOM. Ensure that all user-supplied input is validated before use.",
                "summary": "This type of attack is a form of Cross-Site Scripting (XSS) where a malicious script is inserted into the client-side HTML being parsed by a web browser. Content served by a vulnerable web application includes script code used to manipulate the Document Object Model (DOM). This script code either does not properly validate input, or does not perform proper output encoding, thus creating an opportunity for an adversary to inject a malicious script launch a XSS attack. A key distinction between other XSS attacks and DOM-based attacks is that in other XSS attacks, the malicious script runs when the vulnerable web page is initially loaded, while a DOM-based attack executes sometime after the page loads. Another distinction of DOM-based attacks is that in some cases, the malicious script is never sent to the vulnerable web server at all. An attack like this is guaranteed to bypass any server-side filtering attempts to protect users."
            },
            {
                "id": "592",
                "name": "Stored XSS",
                "prerequisites": "An application that leverages a client-side web browser with scripting enabled. An application that fails to adequately sanitize or encode untrusted input. An application that stores information provided by the user in data storage of some kind.",
                "related_weakness": [
                    "79"
                ],
                "solutions": "Use browser technologies that do not allow client-side scripting. Utilize strict type, character, and encoding enforcement. Ensure that all user-supplied input is validated before being stored.",
                "summary": "This type of attack is a form of Cross-site Scripting (XSS) where a malicious script is persistenly \"stored\" within the data storage of a vulnerable web application. Initially presented by an adversary to the vulnerable web application, the malicious script is incorrectly considered valid input and is not properly encoded by the web application. A victim is then convinced to use the web application in a way that creates a response that includes the malicious script. This response is subsequently sent to the victim and the malicious script is executed by the victim's browser. To launch a successful Stored XSS attack, an adversary looks for places where stored input data is used in the generation of a response. This often involves elements that are not expected to host scripts such as image tags (<img>), or the addition of event attibutes such as onload and onmouseover. These elements are often not subject to the same input validation, output encoding, and other content filtering and checking routines."
            },
            {
                "id": "85",
                "name": "AJAX Fingerprinting",
                "prerequisites": "The user must allow JavaScript to execute in their browser",
                "related_weakness": [
                    "113",
                    "116",
                    "184",
                    "20",
                    "348",
                    "692",
                    "712",
                    "79",
                    "86",
                    "96"
                ],
                "solutions": "Design: Use browser technologies that do not allow client side scripting. Design: Utilize strict type, character, and encoding enforcement Implementation: Ensure all content that is delivered to client is sanitized against an acceptable content specification. Implementation: Perform input validation for all remote content. Implementation: Perform output validation for all remote content. Implementation: Disable scripting languages such as JavaScript in browser Implementation: Patching software. There are many attack vectors for XSS on the client side and the server side. Many vulnerabilities are fixed in service packs for browser, web servers, and plug in technologies, staying current on patch release that deal with XSS countermeasures mitigates this.",
                "summary": "This attack utilizes the frequent client-server roundtrips in Ajax conversation to scan a system. While Ajax does not open up new vulnerabilities per se, it does optimize them from an attacker point of view. In many XSS attacks the attacker must get a \"hole in one\" and successfully exploit the vulnerability on the victim side the first time, once the client is redirected the attacker has many chances to engage in follow on probes, but there is only one first chance. In a widely used web application this is not a major problem because 1 in a 1,000 is good enough in a widely used application. A common first step for an attacker is to footprint the environment to understand what attacks will work. Since footprinting relies on enumeration, the conversational pattern of rapid, multiple requests and responses that are typical in Ajax applications enable an attacker to look for many vulnerabilities, well-known ports, network locations and so on."
            },
            {
                "id": "63",
                "name": "Cross-Site Scripting (XSS)",
                "prerequisites": "Target client software must be a client that allows scripting communication from remote hosts, such as a JavaScript-enabled Web Browser.",
                "related_weakness": [
                    "20",
                    "79"
                ],
                "solutions": "Design: Use browser technologies that do not allow client side scripting. Design: Utilize strict type, character, and encoding enforcement Design: Server side developers should not proxy content via XHR or other means, if a http proxy for remote content is setup on the server side, the client's browser has no way of discerning where the data is originating from. Implementation: Ensure all content that is delivered to client is sanitized against an acceptable content specification. Implementation: Perform input validation for all remote content. Implementation: Perform output validation for all remote content. Implementation: Session tokens for specific host Implementation: Patching software. There are many attack vectors for XSS on the client side and the server side. Many vulnerabilities are fixed in service packs for browser, web servers, and plug in technologies, staying current on patch release that deal with XSS countermeasures mitigates this.",
                "summary": "An adversary embeds malicious scripts in content that will be served to web browsers. The goal of the attack is for the target software, the client-side browser, to execute the script with the users' privilege level. An attack of this type exploits a programs' vulnerabilities that are brought on by allowing remote hosts to execute code and scripts. Web browsers, for example, have some simple security controls in place, but if a remote attacker is allowed to execute scripts (through injecting them in to user-generated content like bulletin boards) then these controls may be bypassed. Further, these attacks are very difficult for an end user to detect."
            }
        ],
        "cvss": null,
        "cwe": "CWE-79",
        "id": "CVE-2023-1420",
        "impact": {},
        "last-modified": "2023-05-02T14:52:00",
        "references": [
            "https://wpscan.com/vulnerability/a9a54ee5-2b80-4f55-894c-1047030eea7f"
        ],
        "summary": "The Ajax Search Lite WordPress plugin before 4.11.1, Ajax Search Pro WordPress plugin before 4.26.2 does not sanitise and escape a parameter before outputting it back in a response of an AJAX action, leading to a Reflected Cross-Site Scripting which could be used against high privilege users such as admin",
        "vulnerable_configuration": [
            "cpe:2.3:a:ajax_search_project:ajax_search:*:*:*:*:pro:wordpress:*:*",
            "cpe:2.3:a:ajax_search_project:ajax_search:*:*:*:*:lite:wordpress:*:*"
        ],
        "vulnerable_configuration_cpe_2_2": [],
        "vulnerable_product": [
            "cpe:2.3:a:ajax_search_project:ajax_search:*:*:*:*:pro:wordpress:*:*",
            "cpe:2.3:a:ajax_search_project:ajax_search:*:*:*:*:lite:wordpress:*:*"
        ]
    },
    {
        "Modified": "2023-05-02T14:51:00",
        "Published": "2023-04-24T19:15:00",
        "access": {},
        "assigner": "contact@wpscan.com",
        "capec": [
            {
                "id": "591",
                "name": "Reflected XSS",
                "prerequisites": "An application that leverages a client-side web browser with scripting enabled. An application that fail to adequately sanitize or encode untrusted input.",
                "related_weakness": [
                    "79"
                ],
                "solutions": "Use browser technologies that do not allow client-side scripting. Utilize strict type, character, and encoding enforcement. Ensure that all user-supplied input is validated before use.",
                "summary": "This type of attack is a form of Cross-Site Scripting (XSS) where a malicious script is \"reflected\" off a vulnerable web application and then executed by a victim's browser. The process starts with an adversary delivering a malicious script to a victim and convincing the victim to send the script to the vulnerable web application. The most common method of this is through a phishing email where the adversary embeds the malicious script with a URL that the victim then clicks on. In processing the subsequent request, the vulnerable web application incorrectly considers the malicious script as valid input and uses it to creates a reposnse that is then sent back to the victim. To launch a successful Reflected XSS attack, an adversary looks for places where user-input is used directly in the generation of a response. This often involves elements that are not expected to host scripts such as image tags (<img>), or the addition of event attibutes such as onload and onmouseover. These elements are often not subject to the same input validation, output encoding, and other content filtering and checking routines."
            },
            {
                "id": "209",
                "name": "XSS Using MIME Type Mismatch",
                "prerequisites": "The victim must follow a crafted link that references a scripting file that is mis-typed as a non-executable file. The victim's browser must detect the true type of a mis-labeled scripting file and invoke the appropriate script interpreter without first performing filtering on the content.",
                "related_weakness": [
                    "20",
                    "646",
                    "79"
                ],
                "solutions": "",
                "summary": "An adversary creates a file with scripting content but where the specified MIME type of the file is such that scripting is not expected. The adversary tricks the victim into accessing a URL that responds with the script file. Some browsers will detect that the specified MIME type of the file does not match the actual type of its content and will automatically switch to using an interpreter for the real content type. If the browser does not invoke script filters before doing this, the adversary's script may run on the target unsanitized, possibly revealing the victim's cookies or executing arbitrary script in their browser."
            },
            {
                "id": "588",
                "name": "DOM-Based XSS",
                "prerequisites": "An application that leverages a client-side web browser with scripting enabled. An application that manipulates the DOM via client-side scripting. An application that failS to adequately sanitize or encode untrusted input.",
                "related_weakness": [
                    "20",
                    "79",
                    "83"
                ],
                "solutions": "Use browser technologies that do not allow client-side scripting. Utilize proper character encoding for all output produced within client-site scripts manipulating the DOM. Ensure that all user-supplied input is validated before use.",
                "summary": "This type of attack is a form of Cross-Site Scripting (XSS) where a malicious script is inserted into the client-side HTML being parsed by a web browser. Content served by a vulnerable web application includes script code used to manipulate the Document Object Model (DOM). This script code either does not properly validate input, or does not perform proper output encoding, thus creating an opportunity for an adversary to inject a malicious script launch a XSS attack. A key distinction between other XSS attacks and DOM-based attacks is that in other XSS attacks, the malicious script runs when the vulnerable web page is initially loaded, while a DOM-based attack executes sometime after the page loads. Another distinction of DOM-based attacks is that in some cases, the malicious script is never sent to the vulnerable web server at all. An attack like this is guaranteed to bypass any server-side filtering attempts to protect users."
            },
            {
                "id": "592",
                "name": "Stored XSS",
                "prerequisites": "An application that leverages a client-side web browser with scripting enabled. An application that fails to adequately sanitize or encode untrusted input. An application that stores information provided by the user in data storage of some kind.",
                "related_weakness": [
                    "79"
                ],
                "solutions": "Use browser technologies that do not allow client-side scripting. Utilize strict type, character, and encoding enforcement. Ensure that all user-supplied input is validated before being stored.",
                "summary": "This type of attack is a form of Cross-site Scripting (XSS) where a malicious script is persistenly \"stored\" within the data storage of a vulnerable web application. Initially presented by an adversary to the vulnerable web application, the malicious script is incorrectly considered valid input and is not properly encoded by the web application. A victim is then convinced to use the web application in a way that creates a response that includes the malicious script. This response is subsequently sent to the victim and the malicious script is executed by the victim's browser. To launch a successful Stored XSS attack, an adversary looks for places where stored input data is used in the generation of a response. This often involves elements that are not expected to host scripts such as image tags (<img>), or the addition of event attibutes such as onload and onmouseover. These elements are often not subject to the same input validation, output encoding, and other content filtering and checking routines."
            },
            {
                "id": "85",
                "name": "AJAX Fingerprinting",
                "prerequisites": "The user must allow JavaScript to execute in their browser",
                "related_weakness": [
                    "113",
                    "116",
                    "184",
                    "20",
                    "348",
                    "692",
                    "712",
                    "79",
                    "86",
                    "96"
                ],
                "solutions": "Design: Use browser technologies that do not allow client side scripting. Design: Utilize strict type, character, and encoding enforcement Implementation: Ensure all content that is delivered to client is sanitized against an acceptable content specification. Implementation: Perform input validation for all remote content. Implementation: Perform output validation for all remote content. Implementation: Disable scripting languages such as JavaScript in browser Implementation: Patching software. There are many attack vectors for XSS on the client side and the server side. Many vulnerabilities are fixed in service packs for browser, web servers, and plug in technologies, staying current on patch release that deal with XSS countermeasures mitigates this.",
                "summary": "This attack utilizes the frequent client-server roundtrips in Ajax conversation to scan a system. While Ajax does not open up new vulnerabilities per se, it does optimize them from an attacker point of view. In many XSS attacks the attacker must get a \"hole in one\" and successfully exploit the vulnerability on the victim side the first time, once the client is redirected the attacker has many chances to engage in follow on probes, but there is only one first chance. In a widely used web application this is not a major problem because 1 in a 1,000 is good enough in a widely used application. A common first step for an attacker is to footprint the environment to understand what attacks will work. Since footprinting relies on enumeration, the conversational pattern of rapid, multiple requests and responses that are typical in Ajax applications enable an attacker to look for many vulnerabilities, well-known ports, network locations and so on."
            },
            {
                "id": "63",
                "name": "Cross-Site Scripting (XSS)",
                "prerequisites": "Target client software must be a client that allows scripting communication from remote hosts, such as a JavaScript-enabled Web Browser.",
                "related_weakness": [
                    "20",
                    "79"
                ],
                "solutions": "Design: Use browser technologies that do not allow client side scripting. Design: Utilize strict type, character, and encoding enforcement Design: Server side developers should not proxy content via XHR or other means, if a http proxy for remote content is setup on the server side, the client's browser has no way of discerning where the data is originating from. Implementation: Ensure all content that is delivered to client is sanitized against an acceptable content specification. Implementation: Perform input validation for all remote content. Implementation: Perform output validation for all remote content. Implementation: Session tokens for specific host Implementation: Patching software. There are many attack vectors for XSS on the client side and the server side. Many vulnerabilities are fixed in service packs for browser, web servers, and plug in technologies, staying current on patch release that deal with XSS countermeasures mitigates this.",
                "summary": "An adversary embeds malicious scripts in content that will be served to web browsers. The goal of the attack is for the target software, the client-side browser, to execute the script with the users' privilege level. An attack of this type exploits a programs' vulnerabilities that are brought on by allowing remote hosts to execute code and scripts. Web browsers, for example, have some simple security controls in place, but if a remote attacker is allowed to execute scripts (through injecting them in to user-generated content like bulletin boards) then these controls may be bypassed. Further, these attacks are very difficult for an end user to detect."
            }
        ],
        "cvss": null,
        "cwe": "CWE-79",
        "id": "CVE-2023-1435",
        "impact": {},
        "last-modified": "2023-05-02T14:51:00",
        "references": [
            "https://wpscan.com/vulnerability/0ca62908-4ef5-41e0-9223-f77ad2c333d7"
        ],
        "summary": "The Ajax Search Pro WordPress plugin before 4.26.2 does not sanitise and escape various parameters before outputting them back in pages, leading to a Reflected Cross-Site Scripting which could be used against high privilege users such as admin",
        "vulnerable_configuration": [
            "cpe:2.3:a:ajax_search_project:ajax_search:*:*:*:*:pro:wordpress:*:*"
        ],
        "vulnerable_configuration_cpe_2_2": [],
        "vulnerable_product": [
            "cpe:2.3:a:ajax_search_project:ajax_search:*:*:*:*:pro:wordpress:*:*"
        ]
    },
    {
        "Modified": "2023-05-02T14:35:00",
        "Published": "2023-04-22T03:15:00",
        "access": {},
        "assigner": "psirt@nvidia.com",
        "capec": [
            {
                "id": "537",
                "name": "Infiltration of Hardware Development Environment",
                "prerequisites": "The victim must use email or removable media from systems running the IDE (or systems adjacent to the IDE systems). The victim must have a system running exploitable applications and/or a vulnerable configuration to allow for initial infiltration. The attacker must have working knowledge of some if not all of the components involved in the IDE system as well as the infrastructure.",
                "related_weakness": [
                    "125"
                ],
                "solutions": "",
                "summary": "An attacker, leveraging the ability to manipulate components of primary support systems and tools within the development and production environments, inserts malicious software within the hardware and/or firmware development environment. The infiltration purpose is to alter developed hardware components in a system destined for deployment at the victim's organization, for the purpose of disruption or further compromise."
            },
            {
                "id": "540",
                "name": "Overread Buffers",
                "prerequisites": "For this type of attack to be successful, a few prerequisites must be met. First, the targeted software must be written in a language that enables fine grained buffer control. (e.g., c, c++) Second, the targeted software must actually perform buffer operations and inadequately perform bounds-checking on those buffer operations. Finally, the adversary must have the capability to influence the input that guides these buffer operations.",
                "related_weakness": [
                    "125"
                ],
                "solutions": "",
                "summary": "An adversary attacks a target by providing input that causes an application to read beyond the boundary of a defined buffer. This typically occurs when a value influencing where to start or stop reading is set to reflect positions outside of the valid memory location of the buffer. This type of attack may result in exposure of sensitive information, a system crash, or arbitrary code execution."
            }
        ],
        "cvss": null,
        "cwe": "CWE-125",
        "id": "CVE-2023-25512",
        "impact": {},
        "last-modified": "2023-05-02T14:35:00",
        "references": [
            "https://nvidia.custhelp.com/app/answers/detail/a_id/5456"
        ],
        "summary": "NVIDIA CUDA toolkit for Linux and Windows contains a vulnerability in cuobjdump, where an attacker may cause an out-of-bounds memory read by running cuobjdump on a malformed input file. A successful exploit of this vulnerability may lead to limited denial of service, code execution, and limited information disclosure.",
        "vulnerable_configuration": [
            "cpe:2.3:a:nvidia:cuda_toolkit:-:*:*:*:*:*:*:*",
            "cpe:2.3:a:nvidia:cuda_toolkit:1.0:*:*:*:*:*:*:*",
            "cpe:2.3:a:nvidia:cuda_toolkit:1.1:*:*:*:*:*:*:*",
            "cpe:2.3:a:nvidia:cuda_toolkit:2.0:*:*:*:*:*:*:*",
            "cpe:2.3:a:nvidia:cuda_toolkit:2.1:*:*:*:*:*:*:*",
            "cpe:2.3:a:nvidia:cuda_toolkit:2.2:*:*:*:*:*:*:*",
            "cpe:2.3:a:nvidia:cuda_toolkit:2.3:*:*:*:*:*:*:*",
            "cpe:2.3:a:nvidia:cuda_toolkit:3.0:*:*:*:*:*:*:*",
            "cpe:2.3:a:nvidia:cuda_toolkit:3.1:*:*:*:*:*:*:*",
            "cpe:2.3:a:nvidia:cuda_toolkit:3.2:*:*:*:*:*:*:*",
            "cpe:2.3:a:nvidia:cuda_toolkit:4.0:*:*:*:*:*:*:*",
            "cpe:2.3:a:nvidia:cuda_toolkit:4.1:*:*:*:*:*:*:*",
            "cpe:2.3:a:nvidia:cuda_toolkit:4.2:*:*:*:*:*:*:*",
            "cpe:2.3:a:nvidia:cuda_toolkit:5.0:*:*:*:*:*:*:*",
            "cpe:2.3:a:nvidia:cuda_toolkit:5.5:*:*:*:*:*:*:*",
            "cpe:2.3:a:nvidia:cuda_toolkit:6.0:*:*:*:*:*:*:*",
            "cpe:2.3:a:nvidia:cuda_toolkit:6.5:*:*:*:*:*:*:*",
            "cpe:2.3:a:nvidia:cuda_toolkit:7.0:*:*:*:*:*:*:*",
            "cpe:2.3:a:nvidia:cuda_toolkit:7.5:*:*:*:*:*:*:*",
            "cpe:2.3:a:nvidia:cuda_toolkit:8.0:*:*:*:*:*:*:*",
            "cpe:2.3:a:nvidia:cuda_toolkit:9.0:*:*:*:*:*:*:*",
            "cpe:2.3:a:nvidia:cuda_toolkit:9.0.176:*:*:*:*:*:*:*",
            "cpe:2.3:a:nvidia:cuda_toolkit:9.1:*:*:*:*:*:*:*",
            "cpe:2.3:a:nvidia:cuda_toolkit:9.2:*:*:*:*:*:*:*",
            "cpe:2.3:a:nvidia:cuda_toolkit:10.0:*:*:*:*:*:*:*",
            "cpe:2.3:a:nvidia:cuda_toolkit:10.0.130:*:*:*:*:*:*:*",
            "cpe:2.3:a:nvidia:cuda_toolkit:10.1:*:*:*:*:*:*:*",
            "cpe:2.3:a:nvidia:cuda_toolkit:10.2:*:*:*:*:*:*:*",
            "cpe:2.3:a:nvidia:cuda_toolkit:10.2.89:*:*:*:*:*:*:*",
            "cpe:2.3:a:nvidia:cuda_toolkit:11.0.0:*:*:*:*:*:*:*",
            "cpe:2.3:a:nvidia:cuda_toolkit:11.0.1:*:*:*:*:*:*:*",
            "cpe:2.3:a:nvidia:cuda_toolkit:11.0.2:*:*:*:*:*:*:*",
            "cpe:2.3:a:nvidia:cuda_toolkit:11.0.3:*:*:*:*:*:*:*",
            "cpe:2.3:a:nvidia:cuda_toolkit:11.1.0:*:*:*:*:*:*:*",
            "cpe:2.3:a:nvidia:cuda_toolkit:11.1.1:*:*:*:*:*:*:*",
            "cpe:2.3:a:nvidia:cuda_toolkit:11.2.0:*:*:*:*:*:*:*",
            "cpe:2.3:a:nvidia:cuda_toolkit:11.2.1:*:*:*:*:*:*:*",
            "cpe:2.3:a:nvidia:cuda_toolkit:11.2.2:*:*:*:*:*:*:*",
            "cpe:2.3:a:nvidia:cuda_toolkit:11.3.0:*:*:*:*:*:*:*",
            "cpe:2.3:a:nvidia:cuda_toolkit:11.3.1:*:*:*:*:*:*:*",
            "cpe:2.3:a:nvidia:cuda_toolkit:11.4.0:*:*:*:*:*:*:*",
            "cpe:2.3:a:nvidia:cuda_toolkit:11.4.2:*:*:*:*:*:*:*",
            "cpe:2.3:a:nvidia:cuda_toolkit:11.4.3:*:*:*:*:*:*:*",
            "cpe:2.3:a:nvidia:cuda_toolkit:11.4.4:*:*:*:*:*:*:*",
            "cpe:2.3:a:nvidia:cuda_toolkit:11.5.0:*:*:*:*:*:*:*",
            "cpe:2.3:a:nvidia:cuda_toolkit:11.5.1:*:*:*:*:*:*:*",
            "cpe:2.3:a:nvidia:cuda_toolkit:11.5.2:*:*:*:*:*:*:*",
            "cpe:2.3:a:nvidia:cuda_toolkit:11.6.0:*:*:*:*:*:*:*",
            "cpe:2.3:a:nvidia:cuda_toolkit:11.6.1:*:*:*:*:*:*:*",
            "cpe:2.3:a:nvidia:cuda_toolkit:11.6.2:*:*:*:*:*:*:*",
            "cpe:2.3:a:nvidia:cuda_toolkit:11.8:*:*:*:*:*:*:*",
            "cpe:2.3:o:linux:linux_kernel:-:*:*:*:*:*:*:*",
            "cpe:2.3:o:microsoft:windows:-:*:*:*:*:*:*:*"
        ],
        "vulnerable_configuration_cpe_2_2": [],
        "vulnerable_product": [
            "cpe:2.3:a:nvidia:cuda_toolkit:-:*:*:*:*:*:*:*",
            "cpe:2.3:a:nvidia:cuda_toolkit:1.0:*:*:*:*:*:*:*",
            "cpe:2.3:a:nvidia:cuda_toolkit:1.1:*:*:*:*:*:*:*",
            "cpe:2.3:a:nvidia:cuda_toolkit:2.0:*:*:*:*:*:*:*",
            "cpe:2.3:a:nvidia:cuda_toolkit:2.1:*:*:*:*:*:*:*",
            "cpe:2.3:a:nvidia:cuda_toolkit:2.2:*:*:*:*:*:*:*",
            "cpe:2.3:a:nvidia:cuda_toolkit:2.3:*:*:*:*:*:*:*",
            "cpe:2.3:a:nvidia:cuda_toolkit:3.0:*:*:*:*:*:*:*",
            "cpe:2.3:a:nvidia:cuda_toolkit:3.1:*:*:*:*:*:*:*",
            "cpe:2.3:a:nvidia:cuda_toolkit:3.2:*:*:*:*:*:*:*",
            "cpe:2.3:a:nvidia:cuda_toolkit:4.0:*:*:*:*:*:*:*",
            "cpe:2.3:a:nvidia:cuda_toolkit:4.1:*:*:*:*:*:*:*",
            "cpe:2.3:a:nvidia:cuda_toolkit:4.2:*:*:*:*:*:*:*",
            "cpe:2.3:a:nvidia:cuda_toolkit:5.0:*:*:*:*:*:*:*",
            "cpe:2.3:a:nvidia:cuda_toolkit:5.5:*:*:*:*:*:*:*",
            "cpe:2.3:a:nvidia:cuda_toolkit:6.0:*:*:*:*:*:*:*",
            "cpe:2.3:a:nvidia:cuda_toolkit:6.5:*:*:*:*:*:*:*",
            "cpe:2.3:a:nvidia:cuda_toolkit:7.0:*:*:*:*:*:*:*",
            "cpe:2.3:a:nvidia:cuda_toolkit:7.5:*:*:*:*:*:*:*",
            "cpe:2.3:a:nvidia:cuda_toolkit:8.0:*:*:*:*:*:*:*",
            "cpe:2.3:a:nvidia:cuda_toolkit:9.0:*:*:*:*:*:*:*",
            "cpe:2.3:a:nvidia:cuda_toolkit:9.0.176:*:*:*:*:*:*:*",
            "cpe:2.3:a:nvidia:cuda_toolkit:9.1:*:*:*:*:*:*:*",
            "cpe:2.3:a:nvidia:cuda_toolkit:9.2:*:*:*:*:*:*:*",
            "cpe:2.3:a:nvidia:cuda_toolkit:10.0:*:*:*:*:*:*:*",
            "cpe:2.3:a:nvidia:cuda_toolkit:10.0.130:*:*:*:*:*:*:*",
            "cpe:2.3:a:nvidia:cuda_toolkit:10.1:*:*:*:*:*:*:*",
            "cpe:2.3:a:nvidia:cuda_toolkit:10.2:*:*:*:*:*:*:*",
            "cpe:2.3:a:nvidia:cuda_toolkit:10.2.89:*:*:*:*:*:*:*",
            "cpe:2.3:a:nvidia:cuda_toolkit:11.0.0:*:*:*:*:*:*:*",
            "cpe:2.3:a:nvidia:cuda_toolkit:11.0.1:*:*:*:*:*:*:*",
            "cpe:2.3:a:nvidia:cuda_toolkit:11.0.2:*:*:*:*:*:*:*",
            "cpe:2.3:a:nvidia:cuda_toolkit:11.0.3:*:*:*:*:*:*:*",
            "cpe:2.3:a:nvidia:cuda_toolkit:11.1.0:*:*:*:*:*:*:*",
            "cpe:2.3:a:nvidia:cuda_toolkit:11.1.1:*:*:*:*:*:*:*",
            "cpe:2.3:a:nvidia:cuda_toolkit:11.2.0:*:*:*:*:*:*:*",
            "cpe:2.3:a:nvidia:cuda_toolkit:11.2.1:*:*:*:*:*:*:*",
            "cpe:2.3:a:nvidia:cuda_toolkit:11.2.2:*:*:*:*:*:*:*",
            "cpe:2.3:a:nvidia:cuda_toolkit:11.3.0:*:*:*:*:*:*:*",
            "cpe:2.3:a:nvidia:cuda_toolkit:11.3.1:*:*:*:*:*:*:*",
            "cpe:2.3:a:nvidia:cuda_toolkit:11.4.0:*:*:*:*:*:*:*",
            "cpe:2.3:a:nvidia:cuda_toolkit:11.4.2:*:*:*:*:*:*:*",
            "cpe:2.3:a:nvidia:cuda_toolkit:11.4.3:*:*:*:*:*:*:*",
            "cpe:2.3:a:nvidia:cuda_toolkit:11.4.4:*:*:*:*:*:*:*",
            "cpe:2.3:a:nvidia:cuda_toolkit:11.5.0:*:*:*:*:*:*:*",
            "cpe:2.3:a:nvidia:cuda_toolkit:11.5.1:*:*:*:*:*:*:*",
            "cpe:2.3:a:nvidia:cuda_toolkit:11.5.2:*:*:*:*:*:*:*",
            "cpe:2.3:a:nvidia:cuda_toolkit:11.6.0:*:*:*:*:*:*:*",
            "cpe:2.3:a:nvidia:cuda_toolkit:11.6.1:*:*:*:*:*:*:*",
            "cpe:2.3:a:nvidia:cuda_toolkit:11.6.2:*:*:*:*:*:*:*",
            "cpe:2.3:a:nvidia:cuda_toolkit:11.8:*:*:*:*:*:*:*"
        ]
    },
    {
        "Modified": "2023-05-02T14:33:00",
        "Published": "2023-04-22T03:15:00",
        "access": {},
        "assigner": "psirt@nvidia.com",
        "capec": [],
        "cvss": null,
        "cwe": "CWE-369",
        "id": "CVE-2023-25511",
        "impact": {},
        "last-modified": "2023-05-02T14:33:00",
        "references": [
            "https://nvidia.custhelp.com/app/answers/detail/a_id/5456"
        ],
        "summary": "NVIDIA CUDA Toolkit for Linux and Windows contains a vulnerability in cuobjdump, where a division-by-zero error may enable a user to cause a crash, which may lead to a limited denial of service.",
        "vulnerable_configuration": [
            "cpe:2.3:a:nvidia:cuda_toolkit:-:*:*:*:*:*:*:*",
            "cpe:2.3:a:nvidia:cuda_toolkit:1.0:*:*:*:*:*:*:*",
            "cpe:2.3:a:nvidia:cuda_toolkit:1.1:*:*:*:*:*:*:*",
            "cpe:2.3:a:nvidia:cuda_toolkit:2.0:*:*:*:*:*:*:*",
            "cpe:2.3:a:nvidia:cuda_toolkit:2.1:*:*:*:*:*:*:*",
            "cpe:2.3:a:nvidia:cuda_toolkit:2.2:*:*:*:*:*:*:*",
            "cpe:2.3:a:nvidia:cuda_toolkit:2.3:*:*:*:*:*:*:*",
            "cpe:2.3:a:nvidia:cuda_toolkit:3.0:*:*:*:*:*:*:*",
            "cpe:2.3:a:nvidia:cuda_toolkit:3.1:*:*:*:*:*:*:*",
            "cpe:2.3:a:nvidia:cuda_toolkit:3.2:*:*:*:*:*:*:*",
            "cpe:2.3:a:nvidia:cuda_toolkit:4.0:*:*:*:*:*:*:*",
            "cpe:2.3:a:nvidia:cuda_toolkit:4.1:*:*:*:*:*:*:*",
            "cpe:2.3:a:nvidia:cuda_toolkit:4.2:*:*:*:*:*:*:*",
            "cpe:2.3:a:nvidia:cuda_toolkit:5.0:*:*:*:*:*:*:*",
            "cpe:2.3:a:nvidia:cuda_toolkit:5.5:*:*:*:*:*:*:*",
            "cpe:2.3:a:nvidia:cuda_toolkit:6.0:*:*:*:*:*:*:*",
            "cpe:2.3:a:nvidia:cuda_toolkit:6.5:*:*:*:*:*:*:*",
            "cpe:2.3:a:nvidia:cuda_toolkit:7.0:*:*:*:*:*:*:*",
            "cpe:2.3:a:nvidia:cuda_toolkit:7.5:*:*:*:*:*:*:*",
            "cpe:2.3:a:nvidia:cuda_toolkit:8.0:*:*:*:*:*:*:*",
            "cpe:2.3:a:nvidia:cuda_toolkit:9.0:*:*:*:*:*:*:*",
            "cpe:2.3:a:nvidia:cuda_toolkit:9.0.176:*:*:*:*:*:*:*",
            "cpe:2.3:a:nvidia:cuda_toolkit:9.1:*:*:*:*:*:*:*",
            "cpe:2.3:a:nvidia:cuda_toolkit:9.2:*:*:*:*:*:*:*",
            "cpe:2.3:a:nvidia:cuda_toolkit:10.0:*:*:*:*:*:*:*",
            "cpe:2.3:a:nvidia:cuda_toolkit:10.0.130:*:*:*:*:*:*:*",
            "cpe:2.3:a:nvidia:cuda_toolkit:10.1:*:*:*:*:*:*:*",
            "cpe:2.3:a:nvidia:cuda_toolkit:10.2:*:*:*:*:*:*:*",
            "cpe:2.3:a:nvidia:cuda_toolkit:10.2.89:*:*:*:*:*:*:*",
            "cpe:2.3:a:nvidia:cuda_toolkit:11.0.0:*:*:*:*:*:*:*",
            "cpe:2.3:a:nvidia:cuda_toolkit:11.0.1:*:*:*:*:*:*:*",
            "cpe:2.3:a:nvidia:cuda_toolkit:11.0.2:*:*:*:*:*:*:*",
            "cpe:2.3:a:nvidia:cuda_toolkit:11.0.3:*:*:*:*:*:*:*",
            "cpe:2.3:a:nvidia:cuda_toolkit:11.1.0:*:*:*:*:*:*:*",
            "cpe:2.3:a:nvidia:cuda_toolkit:11.1.1:*:*:*:*:*:*:*",
            "cpe:2.3:a:nvidia:cuda_toolkit:11.2.0:*:*:*:*:*:*:*",
            "cpe:2.3:a:nvidia:cuda_toolkit:11.2.1:*:*:*:*:*:*:*",
            "cpe:2.3:a:nvidia:cuda_toolkit:11.2.2:*:*:*:*:*:*:*",
            "cpe:2.3:a:nvidia:cuda_toolkit:11.3.0:*:*:*:*:*:*:*",
            "cpe:2.3:a:nvidia:cuda_toolkit:11.3.1:*:*:*:*:*:*:*",
            "cpe:2.3:a:nvidia:cuda_toolkit:11.4.0:*:*:*:*:*:*:*",
            "cpe:2.3:a:nvidia:cuda_toolkit:11.4.2:*:*:*:*:*:*:*",
            "cpe:2.3:a:nvidia:cuda_toolkit:11.4.3:*:*:*:*:*:*:*",
            "cpe:2.3:a:nvidia:cuda_toolkit:11.4.4:*:*:*:*:*:*:*",
            "cpe:2.3:a:nvidia:cuda_toolkit:11.5.0:*:*:*:*:*:*:*",
            "cpe:2.3:a:nvidia:cuda_toolkit:11.5.1:*:*:*:*:*:*:*",
            "cpe:2.3:a:nvidia:cuda_toolkit:11.5.2:*:*:*:*:*:*:*",
            "cpe:2.3:a:nvidia:cuda_toolkit:11.6.0:*:*:*:*:*:*:*",
            "cpe:2.3:a:nvidia:cuda_toolkit:11.6.1:*:*:*:*:*:*:*",
            "cpe:2.3:a:nvidia:cuda_toolkit:11.6.2:*:*:*:*:*:*:*",
            "cpe:2.3:a:nvidia:cuda_toolkit:11.8:*:*:*:*:*:*:*",
            "cpe:2.3:o:linux:linux_kernel:-:*:*:*:*:*:*:*",
            "cpe:2.3:o:microsoft:windows:-:*:*:*:*:*:*:*"
        ],
        "vulnerable_configuration_cpe_2_2": [],
        "vulnerable_product": [
            "cpe:2.3:a:nvidia:cuda_toolkit:-:*:*:*:*:*:*:*",
            "cpe:2.3:a:nvidia:cuda_toolkit:1.0:*:*:*:*:*:*:*",
            "cpe:2.3:a:nvidia:cuda_toolkit:1.1:*:*:*:*:*:*:*",
            "cpe:2.3:a:nvidia:cuda_toolkit:2.0:*:*:*:*:*:*:*",
            "cpe:2.3:a:nvidia:cuda_toolkit:2.1:*:*:*:*:*:*:*",
            "cpe:2.3:a:nvidia:cuda_toolkit:2.2:*:*:*:*:*:*:*",
            "cpe:2.3:a:nvidia:cuda_toolkit:2.3:*:*:*:*:*:*:*",
            "cpe:2.3:a:nvidia:cuda_toolkit:3.0:*:*:*:*:*:*:*",
            "cpe:2.3:a:nvidia:cuda_toolkit:3.1:*:*:*:*:*:*:*",
            "cpe:2.3:a:nvidia:cuda_toolkit:3.2:*:*:*:*:*:*:*",
            "cpe:2.3:a:nvidia:cuda_toolkit:4.0:*:*:*:*:*:*:*",
            "cpe:2.3:a:nvidia:cuda_toolkit:4.1:*:*:*:*:*:*:*",
            "cpe:2.3:a:nvidia:cuda_toolkit:4.2:*:*:*:*:*:*:*",
            "cpe:2.3:a:nvidia:cuda_toolkit:5.0:*:*:*:*:*:*:*",
            "cpe:2.3:a:nvidia:cuda_toolkit:5.5:*:*:*:*:*:*:*",
            "cpe:2.3:a:nvidia:cuda_toolkit:6.0:*:*:*:*:*:*:*",
            "cpe:2.3:a:nvidia:cuda_toolkit:6.5:*:*:*:*:*:*:*",
            "cpe:2.3:a:nvidia:cuda_toolkit:7.0:*:*:*:*:*:*:*",
            "cpe:2.3:a:nvidia:cuda_toolkit:7.5:*:*:*:*:*:*:*",
            "cpe:2.3:a:nvidia:cuda_toolkit:8.0:*:*:*:*:*:*:*",
            "cpe:2.3:a:nvidia:cuda_toolkit:9.0:*:*:*:*:*:*:*",
            "cpe:2.3:a:nvidia:cuda_toolkit:9.0.176:*:*:*:*:*:*:*",
            "cpe:2.3:a:nvidia:cuda_toolkit:9.1:*:*:*:*:*:*:*",
            "cpe:2.3:a:nvidia:cuda_toolkit:9.2:*:*:*:*:*:*:*",
            "cpe:2.3:a:nvidia:cuda_toolkit:10.0:*:*:*:*:*:*:*",
            "cpe:2.3:a:nvidia:cuda_toolkit:10.0.130:*:*:*:*:*:*:*",
            "cpe:2.3:a:nvidia:cuda_toolkit:10.1:*:*:*:*:*:*:*",
            "cpe:2.3:a:nvidia:cuda_toolkit:10.2:*:*:*:*:*:*:*",
            "cpe:2.3:a:nvidia:cuda_toolkit:10.2.89:*:*:*:*:*:*:*",
            "cpe:2.3:a:nvidia:cuda_toolkit:11.0.0:*:*:*:*:*:*:*",
            "cpe:2.3:a:nvidia:cuda_toolkit:11.0.1:*:*:*:*:*:*:*",
            "cpe:2.3:a:nvidia:cuda_toolkit:11.0.2:*:*:*:*:*:*:*",
            "cpe:2.3:a:nvidia:cuda_toolkit:11.0.3:*:*:*:*:*:*:*",
            "cpe:2.3:a:nvidia:cuda_toolkit:11.1.0:*:*:*:*:*:*:*",
            "cpe:2.3:a:nvidia:cuda_toolkit:11.1.1:*:*:*:*:*:*:*",
            "cpe:2.3:a:nvidia:cuda_toolkit:11.2.0:*:*:*:*:*:*:*",
            "cpe:2.3:a:nvidia:cuda_toolkit:11.2.1:*:*:*:*:*:*:*",
            "cpe:2.3:a:nvidia:cuda_toolkit:11.2.2:*:*:*:*:*:*:*",
            "cpe:2.3:a:nvidia:cuda_toolkit:11.3.0:*:*:*:*:*:*:*",
            "cpe:2.3:a:nvidia:cuda_toolkit:11.3.1:*:*:*:*:*:*:*",
            "cpe:2.3:a:nvidia:cuda_toolkit:11.4.0:*:*:*:*:*:*:*",
            "cpe:2.3:a:nvidia:cuda_toolkit:11.4.2:*:*:*:*:*:*:*",
            "cpe:2.3:a:nvidia:cuda_toolkit:11.4.3:*:*:*:*:*:*:*",
            "cpe:2.3:a:nvidia:cuda_toolkit:11.4.4:*:*:*:*:*:*:*",
            "cpe:2.3:a:nvidia:cuda_toolkit:11.5.0:*:*:*:*:*:*:*",
            "cpe:2.3:a:nvidia:cuda_toolkit:11.5.1:*:*:*:*:*:*:*",
            "cpe:2.3:a:nvidia:cuda_toolkit:11.5.2:*:*:*:*:*:*:*",
            "cpe:2.3:a:nvidia:cuda_toolkit:11.6.0:*:*:*:*:*:*:*",
            "cpe:2.3:a:nvidia:cuda_toolkit:11.6.1:*:*:*:*:*:*:*",
            "cpe:2.3:a:nvidia:cuda_toolkit:11.6.2:*:*:*:*:*:*:*",
            "cpe:2.3:a:nvidia:cuda_toolkit:11.8:*:*:*:*:*:*:*"
        ]
    },
    {
        "Modified": "2023-05-02T14:33:00",
        "Published": "2023-04-21T09:15:00",
        "access": {},
        "assigner": "cna@vuldb.com",
        "capec": [
            {
                "id": "7",
                "name": "Blind SQL Injection",
                "prerequisites": "SQL queries used by the application to store, retrieve or modify data. User-controllable input that is not properly validated by the application as part of SQL queries.",
                "related_weakness": [
                    "20",
                    "209",
                    "697",
                    "707",
                    "713",
                    "74",
                    "89"
                ],
                "solutions": "Security by Obscurity is not a solution to preventing SQL Injection. Rather than suppress error messages and exceptions, the application must handle them gracefully, returning either a custom error page or redirecting the user to a default page, without revealing any information about the database or the application internals. Strong input validation - All user-controllable input must be validated and filtered for illegal characters as well as SQL content. Keywords such as UNION, SELECT or INSERT must be filtered in addition to characters such as a single-quote(') or SQL-comments (--) based on the context in which they appear.",
                "summary": "Blind SQL Injection results from an insufficient mitigation for SQL Injection. Although suppressing database error messages are considered best practice, the suppression alone is not sufficient to prevent SQL Injection. Blind SQL Injection is a form of SQL Injection that overcomes the lack of error messages. Without the error messages that facilitate SQL Injection, the adversary constructs input strings that probe the target through simple Boolean SQL expressions. The adversary can determine if the syntax and structure of the injection was successful based on whether the query was executed or not. Applied iteratively, the adversary determines how and where the target is vulnerable to SQL Injection."
            },
            {
                "id": "109",
                "name": "Object Relational Mapping Injection",
                "prerequisites": "An application uses data access layer generated by an ORM tool or framework An application uses user supplied data in queries executed against the database The separation between data plane and control plane is not ensured, through either developer error or an underlying weakness in the data access layer code generation framework",
                "related_weakness": [
                    "100",
                    "20",
                    "564",
                    "89"
                ],
                "solutions": "Remember to understand how to use the data access methods generated by the ORM tool / framework properly in a way that would leverage the built-in security mechanisms of the framework Ensure to keep up to date with security relevant updates to the persistence framework used within your application.",
                "summary": "An attacker leverages a weakness present in the database access layer code generated with an Object Relational Mapping (ORM) tool or a weakness in the way that a developer used a persistence framework to inject his or her own SQL commands to be executed against the underlying database. The attack here is similar to plain SQL injection, except that the application does not use JDBC to directly talk to the database, but instead it uses a data access layer generated by an ORM tool or framework (e.g. Hibernate). While most of the time code generated by an ORM tool contains safe access methods that are immune to SQL injection, sometimes either due to some weakness in the generated code or due to the fact that the developer failed to use the generated access methods properly, SQL injection is still possible."
            },
            {
                "id": "110",
                "name": "SQL Injection through SOAP Parameter Tampering",
                "prerequisites": "SOAP messages are used as a communication mechanism in the system SOAP parameters are not properly validated at the service provider The service provider does not properly utilize parameter binding when building SQL queries",
                "related_weakness": [
                    "20",
                    "89"
                ],
                "solutions": "Properly validate and sanitize/reject user input at the service provider. Ensure that prepared statements or other mechanism that enables parameter binding is used when accessing the database in a way that would prevent the attackers' supplied data from controlling the structure of the executed query. At the database level, ensure that the database user used by the application in a particular context has the minimum needed privileges to the database that are needed to perform the operation. When possible, run queries against pre-generated views rather than the tables directly.",
                "summary": "An attacker modifies the parameters of the SOAP message that is sent from the service consumer to the service provider to initiate a SQL injection attack. On the service provider side, the SOAP message is parsed and parameters are not properly validated before being used to access a database in a way that does not use parameter binding, thus enabling the attacker to control the structure of the executed SQL query. This pattern describes a SQL injection attack with the delivery mechanism being a SOAP message."
            },
            {
                "id": "66",
                "name": "SQL Injection",
                "prerequisites": "SQL queries used by the application to store, retrieve or modify data. User-controllable input that is not properly validated by the application as part of SQL queries.",
                "related_weakness": [
                    "20",
                    "697",
                    "707",
                    "713",
                    "74",
                    "89"
                ],
                "solutions": "Strong input validation - All user-controllable input must be validated and filtered for illegal characters as well as SQL content. Keywords such as UNION, SELECT or INSERT must be filtered in addition to characters such as a single-quote(') or SQL-comments (--) based on the context in which they appear. Use of parameterized queries or stored procedures - Parameterization causes the input to be restricted to certain domains, such as strings or integers, and any input outside such domains is considered invalid and the query fails. Note that SQL Injection is possible even in the presence of stored procedures if the eventual query is constructed dynamically. Use of custom error pages - Attackers can glean information about the nature of queries from descriptive error messages. Input validation must be coupled with customized error pages that inform about an error without disclosing information about the database or application.",
                "summary": "This attack exploits target software that constructs SQL statements based on user input. An attacker crafts input strings so that when the target software constructs SQL statements based on the input, the resulting SQL statement performs actions other than those the application intended. SQL Injection results from failure of the application to appropriately validate input. When specially crafted user-controlled input consisting of SQL syntax is used without proper validation as part of SQL queries, it is possible to glean information from the database in ways not envisaged during application design. Depending upon the database and the design of the application, it may also be possible to leverage injection to have the database execute system-related commands of the attackers' choice. SQL Injection enables an attacker to talk directly to the database, thus bypassing the application completely. Successful injection can cause information disclosure as well as ability to add or modify data in the database. In order to successfully inject SQL and retrieve information from a database, an attacker:"
            },
            {
                "id": "470",
                "name": "Expanding Control over the Operating System from the Database",
                "prerequisites": "A vulnerable DBMS is usedA SQL injection exists that gives an attacker access to the database or an attacker has access to the DBMS via other means",
                "related_weakness": [
                    "250",
                    "89"
                ],
                "solutions": "Implementation: Remove / disable all unneeded / unused functions of the DBMS system that may allow an attacker to elevate privileges if compromised",
                "summary": "An attacker is able to leverage access gained to the database to read / write data to the file system, compromise the operating system, create a tunnel for accessing the host machine, and use this access to potentially attack other machines on the same network as the database machine. Traditionally SQL injections attacks are viewed as a way to gain unauthorized read access to the data stored in the database, modify the data in the database, delete the data, etc. However, almost every data base management system (DBMS) system includes facilities that if compromised allow an attacker complete access to the file system, operating system, and full access to the host running the database. The attacker can then use this privileged access to launch subsequent attacks. These facilities include dropping into a command shell, creating user defined functions that can call system level libraries present on the host machine, stored procedures, etc."
            },
            {
                "id": "108",
                "name": "Command Line Execution through SQL Injection",
                "prerequisites": "The application does not properly validate data before storing in the database Backend application implicitly trusts the data stored in the database Malicious data is used on the backend as a command line argument",
                "related_weakness": [
                    "114",
                    "20",
                    "74",
                    "78",
                    "89"
                ],
                "solutions": "Disable MSSQL xp_cmdshell directive on the database Properly validate the data (syntactically and semantically) before writing it to the database. Do not implicitly trust the data stored in the database. Re-validate it prior to usage to make sure that it is safe to use in a given context (e.g. as a command line argument).",
                "summary": "An attacker uses standard SQL injection methods to inject data into the command line for execution. This could be done directly through misuse of directives such as MSSQL_xp_cmdshell or indirectly through injection of data into the database that would be interpreted as shell commands. Sometime later, an unscrupulous backend application (or could be part of the functionality of the same application) fetches the injected data stored in the database and uses this data as command line arguments without performing proper validation. The malicious data escapes that data plane by spawning new commands to be executed on the host."
            }
        ],
        "cvss": null,
        "cwe": "CWE-89",
        "id": "CVE-2023-2209",
        "impact": {},
        "last-modified": "2023-05-02T14:33:00",
        "references": [
            "https://vuldb.com/?ctiid.226974",
            "https://github.com/E1CHO/cve_hub/blob/main/Coffee%20Shop%20POS%20System/Coffee%20Shop%20POS%20System%20-%20vuln%201.pdf",
            "https://vuldb.com/?id.226974"
        ],
        "summary": "A vulnerability, which was classified as critical, was found in Campcodes Coffee Shop POS System 1.0. Affected is an unknown function of the file /admin/sales/view_details.php. The manipulation of the argument id leads to sql injection. It is possible to launch the attack remotely. The exploit has been disclosed to the public and may be used. VDB-226974 is the identifier assigned to this vulnerability.",
        "vulnerable_configuration": [
            "cpe:2.3:a:coffee_shop_pos_system_project:coffee_shop_pos_system:1.0:*:*:*:*:*:*:*"
        ],
        "vulnerable_configuration_cpe_2_2": [],
        "vulnerable_product": [
            "cpe:2.3:a:coffee_shop_pos_system_project:coffee_shop_pos_system:1.0:*:*:*:*:*:*:*"
        ]
    },
    {
        "Modified": "2023-05-02T14:25:00",
        "Published": "2023-04-22T03:15:00",
        "access": {},
        "assigner": "psirt@nvidia.com",
        "capec": [],
        "cvss": null,
        "cwe": "CWE-787",
        "id": "CVE-2023-0199",
        "impact": {},
        "last-modified": "2023-05-02T14:25:00",
        "references": [
            "https://nvidia.custhelp.com/app/answers/detail/a_id/5452"
        ],
        "summary": "NVIDIA GPU Display Driver for Windows and Linux contains a vulnerability in the kernel mode layer handler, where an out-of-bounds write can lead to denial of service and data tampering.",
        "vulnerable_configuration": [
            "cpe:2.3:a:nvidia:gpu_display_driver:470:*:*:*:*:linux:*:*",
            "cpe:2.3:a:nvidia:gpu_display_driver:470.161.03:*:*:*:*:linux:*:*",
            "cpe:2.3:a:nvidia:gpu_display_driver:515:*:*:*:*:linux:*:*",
            "cpe:2.3:a:nvidia:gpu_display_driver:515.86.01:*:*:*:*:linux:*:*",
            "cpe:2.3:a:nvidia:gpu_display_driver:525:*:*:*:*:linux:*:*",
            "cpe:2.3:a:nvidia:gpu_display_driver:525.60.11:*:*:*:*:linux:*:*",
            "cpe:2.3:a:nvidia:gpu_display_driver:*:*:*:*:*:linux:*:*",
            "cpe:2.3:a:nvidia:geforce:-:*:*:*:*:*:*:*",
            "cpe:2.3:a:nvidia:nvs:-:*:*:*:*:*:*:*",
            "cpe:2.3:a:nvidia:quadro:-:*:*:*:*:*:*:*",
            "cpe:2.3:a:nvidia:rtx:-:*:*:*:*:*:*:*",
            "cpe:2.3:a:nvidia:gpu_display_driver:450:*:*:*:*:linux:*:*",
            "cpe:2.3:a:nvidia:gpu_display_driver:450.119.03:*:*:*:*:linux:*:*",
            "cpe:2.3:a:nvidia:gpu_display_driver:450.216.04:*:*:*:*:linux:*:*",
            "cpe:2.3:a:nvidia:tesla:-:*:*:*:*:*:*:*",
            "cpe:2.3:a:nvidia:gpu_display_driver:450:*:*:*:*:windows:*:*",
            "cpe:2.3:a:nvidia:gpu_display_driver:451.48:*:*:*:*:windows:*:*",
            "cpe:2.3:a:nvidia:gpu_display_driver:451.77:*:*:*:*:windows:*:*",
            "cpe:2.3:a:nvidia:gpu_display_driver:452.02:*:*:*:*:windows:*:*",
            "cpe:2.3:a:nvidia:gpu_display_driver:452.39:*:*:*:*:windows:*:*",
            "cpe:2.3:a:nvidia:gpu_display_driver:452.57:*:*:*:*:windows:*:*",
            "cpe:2.3:a:nvidia:gpu_display_driver:452.77:*:*:*:*:windows:*:*",
            "cpe:2.3:a:nvidia:gpu_display_driver:452.96:*:*:*:*:windows:*:*",
            "cpe:2.3:a:nvidia:gpu_display_driver:453.10:*:*:*:*:windows:*:*",
            "cpe:2.3:a:nvidia:gpu_display_driver:454.02:*:*:*:*:windows:*:*",
            "cpe:2.3:a:nvidia:gpu_display_driver:470:*:*:*:*:windows:*:*",
            "cpe:2.3:a:nvidia:gpu_display_driver:471.11:*:*:*:*:windows:*:*",
            "cpe:2.3:a:nvidia:gpu_display_driver:471.41:*:*:*:*:windows:*:*",
            "cpe:2.3:a:nvidia:gpu_display_driver:471.68:*:*:*:*:windows:*:*",
            "cpe:2.3:a:nvidia:gpu_display_driver:472.12:*:*:*:*:windows:*:*",
            "cpe:2.3:a:nvidia:gpu_display_driver:472.39:*:*:*:*:windows:*:*",
            "cpe:2.3:a:nvidia:gpu_display_driver:472.47:*:*:*:*:windows:*:*",
            "cpe:2.3:a:nvidia:gpu_display_driver:472.84:*:*:*:*:windows:*:*",
            "cpe:2.3:a:nvidia:gpu_display_driver:472.98:*:*:*:*:windows:*:*",
            "cpe:2.3:a:nvidia:gpu_display_driver:473.47:*:*:*:*:windows:*:*",
            "cpe:2.3:a:nvidia:gpu_display_driver:473.81:*:*:*:*:windows:*:*",
            "cpe:2.3:a:nvidia:gpu_display_driver:474.04:*:*:*:*:windows:*:*",
            "cpe:2.3:a:nvidia:gpu_display_driver:474.14:*:*:*:*:windows:*:*",
            "cpe:2.3:a:nvidia:gpu_display_driver:515:*:*:*:*:windows:*:*",
            "cpe:2.3:a:nvidia:gpu_display_driver:516.25:*:*:*:*:windows:*:*",
            "cpe:2.3:a:nvidia:gpu_display_driver:516.59:*:*:*:*:windows:*:*",
            "cpe:2.3:a:nvidia:gpu_display_driver:516.94:*:*:*:*:windows:*:*",
            "cpe:2.3:a:nvidia:gpu_display_driver:517.40:*:*:*:*:windows:*:*",
            "cpe:2.3:a:nvidia:gpu_display_driver:517.71:*:*:*:*:windows:*:*",
            "cpe:2.3:a:nvidia:gpu_display_driver:517.88:*:*:*:*:windows:*:*",
            "cpe:2.3:a:nvidia:gpu_display_driver:525:*:*:*:*:windows:*:*",
            "cpe:2.3:a:nvidia:gpu_display_driver:526.67:*:*:*:*:windows:*:*",
            "cpe:2.3:a:nvidia:gpu_display_driver:526.98:*:*:*:*:windows:*:*",
            "cpe:2.3:a:nvidia:gpu_display_driver:527.27:*:*:*:*:windows:*:*",
            "cpe:2.3:a:nvidia:gpu_display_driver:527.41:*:*:*:*:windows:*:*",
            "cpe:2.3:a:nvidia:gpu_display_driver:*:*:*:*:*:windows:*:*",
            "cpe:2.3:a:nvidia:studio:-:*:*:*:*:*:*:*"
        ],
        "vulnerable_configuration_cpe_2_2": [],
        "vulnerable_product": [
            "cpe:2.3:a:nvidia:gpu_display_driver:470:*:*:*:*:linux:*:*",
            "cpe:2.3:a:nvidia:gpu_display_driver:470.161.03:*:*:*:*:linux:*:*",
            "cpe:2.3:a:nvidia:gpu_display_driver:515:*:*:*:*:linux:*:*",
            "cpe:2.3:a:nvidia:gpu_display_driver:515.86.01:*:*:*:*:linux:*:*",
            "cpe:2.3:a:nvidia:gpu_display_driver:525:*:*:*:*:linux:*:*",
            "cpe:2.3:a:nvidia:gpu_display_driver:525.60.11:*:*:*:*:linux:*:*",
            "cpe:2.3:a:nvidia:gpu_display_driver:*:*:*:*:*:linux:*:*",
            "cpe:2.3:a:nvidia:gpu_display_driver:450:*:*:*:*:linux:*:*",
            "cpe:2.3:a:nvidia:gpu_display_driver:450.119.03:*:*:*:*:linux:*:*",
            "cpe:2.3:a:nvidia:gpu_display_driver:450.216.04:*:*:*:*:linux:*:*",
            "cpe:2.3:a:nvidia:gpu_display_driver:450:*:*:*:*:windows:*:*",
            "cpe:2.3:a:nvidia:gpu_display_driver:451.48:*:*:*:*:windows:*:*",
            "cpe:2.3:a:nvidia:gpu_display_driver:451.77:*:*:*:*:windows:*:*",
            "cpe:2.3:a:nvidia:gpu_display_driver:452.02:*:*:*:*:windows:*:*",
            "cpe:2.3:a:nvidia:gpu_display_driver:452.39:*:*:*:*:windows:*:*",
            "cpe:2.3:a:nvidia:gpu_display_driver:452.57:*:*:*:*:windows:*:*",
            "cpe:2.3:a:nvidia:gpu_display_driver:452.77:*:*:*:*:windows:*:*",
            "cpe:2.3:a:nvidia:gpu_display_driver:452.96:*:*:*:*:windows:*:*",
            "cpe:2.3:a:nvidia:gpu_display_driver:453.10:*:*:*:*:windows:*:*",
            "cpe:2.3:a:nvidia:gpu_display_driver:454.02:*:*:*:*:windows:*:*",
            "cpe:2.3:a:nvidia:gpu_display_driver:470:*:*:*:*:windows:*:*",
            "cpe:2.3:a:nvidia:gpu_display_driver:471.11:*:*:*:*:windows:*:*",
            "cpe:2.3:a:nvidia:gpu_display_driver:471.41:*:*:*:*:windows:*:*",
            "cpe:2.3:a:nvidia:gpu_display_driver:471.68:*:*:*:*:windows:*:*",
            "cpe:2.3:a:nvidia:gpu_display_driver:472.12:*:*:*:*:windows:*:*",
            "cpe:2.3:a:nvidia:gpu_display_driver:472.39:*:*:*:*:windows:*:*",
            "cpe:2.3:a:nvidia:gpu_display_driver:472.47:*:*:*:*:windows:*:*",
            "cpe:2.3:a:nvidia:gpu_display_driver:472.84:*:*:*:*:windows:*:*",
            "cpe:2.3:a:nvidia:gpu_display_driver:472.98:*:*:*:*:windows:*:*",
            "cpe:2.3:a:nvidia:gpu_display_driver:473.47:*:*:*:*:windows:*:*",
            "cpe:2.3:a:nvidia:gpu_display_driver:473.81:*:*:*:*:windows:*:*",
            "cpe:2.3:a:nvidia:gpu_display_driver:474.04:*:*:*:*:windows:*:*",
            "cpe:2.3:a:nvidia:gpu_display_driver:474.14:*:*:*:*:windows:*:*",
            "cpe:2.3:a:nvidia:gpu_display_driver:515:*:*:*:*:windows:*:*",
            "cpe:2.3:a:nvidia:gpu_display_driver:516.25:*:*:*:*:windows:*:*",
            "cpe:2.3:a:nvidia:gpu_display_driver:516.59:*:*:*:*:windows:*:*",
            "cpe:2.3:a:nvidia:gpu_display_driver:516.94:*:*:*:*:windows:*:*",
            "cpe:2.3:a:nvidia:gpu_display_driver:517.40:*:*:*:*:windows:*:*",
            "cpe:2.3:a:nvidia:gpu_display_driver:517.71:*:*:*:*:windows:*:*",
            "cpe:2.3:a:nvidia:gpu_display_driver:517.88:*:*:*:*:windows:*:*",
            "cpe:2.3:a:nvidia:gpu_display_driver:525:*:*:*:*:windows:*:*",
            "cpe:2.3:a:nvidia:gpu_display_driver:526.67:*:*:*:*:windows:*:*",
            "cpe:2.3:a:nvidia:gpu_display_driver:526.98:*:*:*:*:windows:*:*",
            "cpe:2.3:a:nvidia:gpu_display_driver:527.27:*:*:*:*:windows:*:*",
            "cpe:2.3:a:nvidia:gpu_display_driver:527.41:*:*:*:*:windows:*:*",
            "cpe:2.3:a:nvidia:gpu_display_driver:*:*:*:*:*:windows:*:*"
        ]
    },
    {
        "Modified": "2023-05-02T14:24:00",
        "Published": "2023-04-22T03:15:00",
        "access": {},
        "assigner": "psirt@nvidia.com",
        "capec": [],
        "cvss": null,
        "cwe": "NVD-CWE-noinfo",
        "id": "CVE-2023-0184",
        "impact": {},
        "last-modified": "2023-05-02T14:24:00",
        "references": [
            "https://nvidia.custhelp.com/app/answers/detail/a_id/5452"
        ],
        "summary": "NVIDIA GPU Display Driver for Windows and Linux contains a vulnerability in the kernel mode layer handler which may lead to denial of service, escalation of privileges, information disclosure, and data tampering.",
        "vulnerable_configuration": [
            "cpe:2.3:a:nvidia:gpu_display_driver:470:*:*:*:*:linux:*:*",
            "cpe:2.3:a:nvidia:gpu_display_driver:470.161.03:*:*:*:*:linux:*:*",
            "cpe:2.3:a:nvidia:gpu_display_driver:515:*:*:*:*:linux:*:*",
            "cpe:2.3:a:nvidia:gpu_display_driver:515.86.01:*:*:*:*:linux:*:*",
            "cpe:2.3:a:nvidia:gpu_display_driver:525:*:*:*:*:linux:*:*",
            "cpe:2.3:a:nvidia:gpu_display_driver:525.60.11:*:*:*:*:linux:*:*",
            "cpe:2.3:a:nvidia:gpu_display_driver:*:*:*:*:*:linux:*:*",
            "cpe:2.3:a:nvidia:geforce:-:*:*:*:*:*:*:*",
            "cpe:2.3:a:nvidia:nvs:-:*:*:*:*:*:*:*",
            "cpe:2.3:a:nvidia:quadro:-:*:*:*:*:*:*:*",
            "cpe:2.3:a:nvidia:rtx:-:*:*:*:*:*:*:*",
            "cpe:2.3:a:nvidia:gpu_display_driver:450:*:*:*:*:linux:*:*",
            "cpe:2.3:a:nvidia:gpu_display_driver:450.119.03:*:*:*:*:linux:*:*",
            "cpe:2.3:a:nvidia:gpu_display_driver:450.216.04:*:*:*:*:linux:*:*",
            "cpe:2.3:a:nvidia:tesla:-:*:*:*:*:*:*:*",
            "cpe:2.3:a:nvidia:gpu_display_driver:450:*:*:*:*:windows:*:*",
            "cpe:2.3:a:nvidia:gpu_display_driver:451.48:*:*:*:*:windows:*:*",
            "cpe:2.3:a:nvidia:gpu_display_driver:451.77:*:*:*:*:windows:*:*",
            "cpe:2.3:a:nvidia:gpu_display_driver:452.02:*:*:*:*:windows:*:*",
            "cpe:2.3:a:nvidia:gpu_display_driver:452.39:*:*:*:*:windows:*:*",
            "cpe:2.3:a:nvidia:gpu_display_driver:452.57:*:*:*:*:windows:*:*",
            "cpe:2.3:a:nvidia:gpu_display_driver:452.77:*:*:*:*:windows:*:*",
            "cpe:2.3:a:nvidia:gpu_display_driver:452.96:*:*:*:*:windows:*:*",
            "cpe:2.3:a:nvidia:gpu_display_driver:453.10:*:*:*:*:windows:*:*",
            "cpe:2.3:a:nvidia:gpu_display_driver:454.02:*:*:*:*:windows:*:*",
            "cpe:2.3:a:nvidia:gpu_display_driver:470:*:*:*:*:windows:*:*",
            "cpe:2.3:a:nvidia:gpu_display_driver:471.11:*:*:*:*:windows:*:*",
            "cpe:2.3:a:nvidia:gpu_display_driver:471.41:*:*:*:*:windows:*:*",
            "cpe:2.3:a:nvidia:gpu_display_driver:471.68:*:*:*:*:windows:*:*",
            "cpe:2.3:a:nvidia:gpu_display_driver:472.12:*:*:*:*:windows:*:*",
            "cpe:2.3:a:nvidia:gpu_display_driver:472.39:*:*:*:*:windows:*:*",
            "cpe:2.3:a:nvidia:gpu_display_driver:472.47:*:*:*:*:windows:*:*",
            "cpe:2.3:a:nvidia:gpu_display_driver:472.84:*:*:*:*:windows:*:*",
            "cpe:2.3:a:nvidia:gpu_display_driver:472.98:*:*:*:*:windows:*:*",
            "cpe:2.3:a:nvidia:gpu_display_driver:473.47:*:*:*:*:windows:*:*",
            "cpe:2.3:a:nvidia:gpu_display_driver:473.81:*:*:*:*:windows:*:*",
            "cpe:2.3:a:nvidia:gpu_display_driver:474.04:*:*:*:*:windows:*:*",
            "cpe:2.3:a:nvidia:gpu_display_driver:474.14:*:*:*:*:windows:*:*",
            "cpe:2.3:a:nvidia:gpu_display_driver:515:*:*:*:*:windows:*:*",
            "cpe:2.3:a:nvidia:gpu_display_driver:516.25:*:*:*:*:windows:*:*",
            "cpe:2.3:a:nvidia:gpu_display_driver:516.59:*:*:*:*:windows:*:*",
            "cpe:2.3:a:nvidia:gpu_display_driver:516.94:*:*:*:*:windows:*:*",
            "cpe:2.3:a:nvidia:gpu_display_driver:517.40:*:*:*:*:windows:*:*",
            "cpe:2.3:a:nvidia:gpu_display_driver:517.71:*:*:*:*:windows:*:*",
            "cpe:2.3:a:nvidia:gpu_display_driver:517.88:*:*:*:*:windows:*:*",
            "cpe:2.3:a:nvidia:gpu_display_driver:525:*:*:*:*:windows:*:*",
            "cpe:2.3:a:nvidia:gpu_display_driver:526.67:*:*:*:*:windows:*:*",
            "cpe:2.3:a:nvidia:gpu_display_driver:526.98:*:*:*:*:windows:*:*",
            "cpe:2.3:a:nvidia:gpu_display_driver:527.27:*:*:*:*:windows:*:*",
            "cpe:2.3:a:nvidia:gpu_display_driver:527.41:*:*:*:*:windows:*:*",
            "cpe:2.3:a:nvidia:gpu_display_driver:*:*:*:*:*:windows:*:*",
            "cpe:2.3:a:nvidia:studio:-:*:*:*:*:*:*:*"
        ],
        "vulnerable_configuration_cpe_2_2": [],
        "vulnerable_product": [
            "cpe:2.3:a:nvidia:gpu_display_driver:470:*:*:*:*:linux:*:*",
            "cpe:2.3:a:nvidia:gpu_display_driver:470.161.03:*:*:*:*:linux:*:*",
            "cpe:2.3:a:nvidia:gpu_display_driver:515:*:*:*:*:linux:*:*",
            "cpe:2.3:a:nvidia:gpu_display_driver:515.86.01:*:*:*:*:linux:*:*",
            "cpe:2.3:a:nvidia:gpu_display_driver:525:*:*:*:*:linux:*:*",
            "cpe:2.3:a:nvidia:gpu_display_driver:525.60.11:*:*:*:*:linux:*:*",
            "cpe:2.3:a:nvidia:gpu_display_driver:*:*:*:*:*:linux:*:*",
            "cpe:2.3:a:nvidia:gpu_display_driver:450:*:*:*:*:linux:*:*",
            "cpe:2.3:a:nvidia:gpu_display_driver:450.119.03:*:*:*:*:linux:*:*",
            "cpe:2.3:a:nvidia:gpu_display_driver:450.216.04:*:*:*:*:linux:*:*",
            "cpe:2.3:a:nvidia:gpu_display_driver:450:*:*:*:*:windows:*:*",
            "cpe:2.3:a:nvidia:gpu_display_driver:451.48:*:*:*:*:windows:*:*",
            "cpe:2.3:a:nvidia:gpu_display_driver:451.77:*:*:*:*:windows:*:*",
            "cpe:2.3:a:nvidia:gpu_display_driver:452.02:*:*:*:*:windows:*:*",
            "cpe:2.3:a:nvidia:gpu_display_driver:452.39:*:*:*:*:windows:*:*",
            "cpe:2.3:a:nvidia:gpu_display_driver:452.57:*:*:*:*:windows:*:*",
            "cpe:2.3:a:nvidia:gpu_display_driver:452.77:*:*:*:*:windows:*:*",
            "cpe:2.3:a:nvidia:gpu_display_driver:452.96:*:*:*:*:windows:*:*",
            "cpe:2.3:a:nvidia:gpu_display_driver:453.10:*:*:*:*:windows:*:*",
            "cpe:2.3:a:nvidia:gpu_display_driver:454.02:*:*:*:*:windows:*:*",
            "cpe:2.3:a:nvidia:gpu_display_driver:470:*:*:*:*:windows:*:*",
            "cpe:2.3:a:nvidia:gpu_display_driver:471.11:*:*:*:*:windows:*:*",
            "cpe:2.3:a:nvidia:gpu_display_driver:471.41:*:*:*:*:windows:*:*",
            "cpe:2.3:a:nvidia:gpu_display_driver:471.68:*:*:*:*:windows:*:*",
            "cpe:2.3:a:nvidia:gpu_display_driver:472.12:*:*:*:*:windows:*:*",
            "cpe:2.3:a:nvidia:gpu_display_driver:472.39:*:*:*:*:windows:*:*",
            "cpe:2.3:a:nvidia:gpu_display_driver:472.47:*:*:*:*:windows:*:*",
            "cpe:2.3:a:nvidia:gpu_display_driver:472.84:*:*:*:*:windows:*:*",
            "cpe:2.3:a:nvidia:gpu_display_driver:472.98:*:*:*:*:windows:*:*",
            "cpe:2.3:a:nvidia:gpu_display_driver:473.47:*:*:*:*:windows:*:*",
            "cpe:2.3:a:nvidia:gpu_display_driver:473.81:*:*:*:*:windows:*:*",
            "cpe:2.3:a:nvidia:gpu_display_driver:474.04:*:*:*:*:windows:*:*",
            "cpe:2.3:a:nvidia:gpu_display_driver:474.14:*:*:*:*:windows:*:*",
            "cpe:2.3:a:nvidia:gpu_display_driver:515:*:*:*:*:windows:*:*",
            "cpe:2.3:a:nvidia:gpu_display_driver:516.25:*:*:*:*:windows:*:*",
            "cpe:2.3:a:nvidia:gpu_display_driver:516.59:*:*:*:*:windows:*:*",
            "cpe:2.3:a:nvidia:gpu_display_driver:516.94:*:*:*:*:windows:*:*",
            "cpe:2.3:a:nvidia:gpu_display_driver:517.40:*:*:*:*:windows:*:*",
            "cpe:2.3:a:nvidia:gpu_display_driver:517.71:*:*:*:*:windows:*:*",
            "cpe:2.3:a:nvidia:gpu_display_driver:517.88:*:*:*:*:windows:*:*",
            "cpe:2.3:a:nvidia:gpu_display_driver:525:*:*:*:*:windows:*:*",
            "cpe:2.3:a:nvidia:gpu_display_driver:526.67:*:*:*:*:windows:*:*",
            "cpe:2.3:a:nvidia:gpu_display_driver:526.98:*:*:*:*:windows:*:*",
            "cpe:2.3:a:nvidia:gpu_display_driver:527.27:*:*:*:*:windows:*:*",
            "cpe:2.3:a:nvidia:gpu_display_driver:527.41:*:*:*:*:windows:*:*",
            "cpe:2.3:a:nvidia:gpu_display_driver:*:*:*:*:*:windows:*:*"
        ]
    },
    {
        "Modified": "2023-05-02T14:24:00",
        "Published": "2023-04-22T03:15:00",
        "access": {},
        "assigner": "psirt@nvidia.com",
        "capec": [],
        "cvss": null,
        "cwe": "CWE-476",
        "id": "CVE-2023-0190",
        "impact": {},
        "last-modified": "2023-05-02T14:24:00",
        "references": [
            "https://nvidia.custhelp.com/app/answers/detail/a_id/5452"
        ],
        "summary": "NVIDIA GPU Display Driver for Linux contains a vulnerability in the kernel mode layer, where a NULL pointer dereference may lead to denial of service.",
        "vulnerable_configuration": [
            "cpe:2.3:a:nvidia:gpu_display_driver:470:*:*:*:*:linux:*:*",
            "cpe:2.3:a:nvidia:gpu_display_driver:470.161.03:*:*:*:*:linux:*:*",
            "cpe:2.3:a:nvidia:gpu_display_driver:515:*:*:*:*:linux:*:*",
            "cpe:2.3:a:nvidia:gpu_display_driver:515.86.01:*:*:*:*:linux:*:*",
            "cpe:2.3:a:nvidia:gpu_display_driver:525:*:*:*:*:linux:*:*",
            "cpe:2.3:a:nvidia:gpu_display_driver:525.60.11:*:*:*:*:linux:*:*",
            "cpe:2.3:a:nvidia:gpu_display_driver:*:*:*:*:*:linux:*:*",
            "cpe:2.3:a:nvidia:geforce:-:*:*:*:*:*:*:*",
            "cpe:2.3:a:nvidia:nvs:-:*:*:*:*:*:*:*",
            "cpe:2.3:a:nvidia:quadro:-:*:*:*:*:*:*:*",
            "cpe:2.3:a:nvidia:rtx:-:*:*:*:*:*:*:*",
            "cpe:2.3:a:nvidia:gpu_display_driver:450:*:*:*:*:linux:*:*",
            "cpe:2.3:a:nvidia:gpu_display_driver:450.119.03:*:*:*:*:linux:*:*",
            "cpe:2.3:a:nvidia:gpu_display_driver:450.216.04:*:*:*:*:linux:*:*",
            "cpe:2.3:a:nvidia:tesla:-:*:*:*:*:*:*:*"
        ],
        "vulnerable_configuration_cpe_2_2": [],
        "vulnerable_product": [
            "cpe:2.3:a:nvidia:gpu_display_driver:470:*:*:*:*:linux:*:*",
            "cpe:2.3:a:nvidia:gpu_display_driver:470.161.03:*:*:*:*:linux:*:*",
            "cpe:2.3:a:nvidia:gpu_display_driver:515:*:*:*:*:linux:*:*",
            "cpe:2.3:a:nvidia:gpu_display_driver:515.86.01:*:*:*:*:linux:*:*",
            "cpe:2.3:a:nvidia:gpu_display_driver:525:*:*:*:*:linux:*:*",
            "cpe:2.3:a:nvidia:gpu_display_driver:525.60.11:*:*:*:*:linux:*:*",
            "cpe:2.3:a:nvidia:gpu_display_driver:*:*:*:*:*:linux:*:*",
            "cpe:2.3:a:nvidia:gpu_display_driver:450:*:*:*:*:linux:*:*",
            "cpe:2.3:a:nvidia:gpu_display_driver:450.119.03:*:*:*:*:linux:*:*",
            "cpe:2.3:a:nvidia:gpu_display_driver:450.216.04:*:*:*:*:linux:*:*"
        ]
    },
    {
        "Modified": "2023-05-02T14:19:00",
        "Published": "2023-04-22T03:15:00",
        "access": {},
        "assigner": "psirt@nvidia.com",
        "capec": [],
        "cvss": null,
        "cwe": "CWE-476",
        "id": "CVE-2023-25510",
        "impact": {},
        "last-modified": "2023-05-02T14:19:00",
        "references": [
            "https://nvidia.custhelp.com/app/answers/detail/a_id/5456"
        ],
        "summary": "NVIDIA CUDA Toolkit SDK for Linux and Windows contains a NULL pointer dereference in cuobjdump, where a local user running the tool against a malformed binary may cause a limited denial of service.",
        "vulnerable_configuration": [
            "cpe:2.3:a:nvidia:cuda_toolkit:-:*:*:*:*:*:*:*",
            "cpe:2.3:a:nvidia:cuda_toolkit:1.0:*:*:*:*:*:*:*",
            "cpe:2.3:a:nvidia:cuda_toolkit:1.1:*:*:*:*:*:*:*",
            "cpe:2.3:a:nvidia:cuda_toolkit:2.0:*:*:*:*:*:*:*",
            "cpe:2.3:a:nvidia:cuda_toolkit:2.1:*:*:*:*:*:*:*",
            "cpe:2.3:a:nvidia:cuda_toolkit:2.2:*:*:*:*:*:*:*",
            "cpe:2.3:a:nvidia:cuda_toolkit:2.3:*:*:*:*:*:*:*",
            "cpe:2.3:a:nvidia:cuda_toolkit:3.0:*:*:*:*:*:*:*",
            "cpe:2.3:a:nvidia:cuda_toolkit:3.1:*:*:*:*:*:*:*",
            "cpe:2.3:a:nvidia:cuda_toolkit:3.2:*:*:*:*:*:*:*",
            "cpe:2.3:a:nvidia:cuda_toolkit:4.0:*:*:*:*:*:*:*",
            "cpe:2.3:a:nvidia:cuda_toolkit:4.1:*:*:*:*:*:*:*",
            "cpe:2.3:a:nvidia:cuda_toolkit:4.2:*:*:*:*:*:*:*",
            "cpe:2.3:a:nvidia:cuda_toolkit:5.0:*:*:*:*:*:*:*",
            "cpe:2.3:a:nvidia:cuda_toolkit:5.5:*:*:*:*:*:*:*",
            "cpe:2.3:a:nvidia:cuda_toolkit:6.0:*:*:*:*:*:*:*",
            "cpe:2.3:a:nvidia:cuda_toolkit:6.5:*:*:*:*:*:*:*",
            "cpe:2.3:a:nvidia:cuda_toolkit:7.0:*:*:*:*:*:*:*",
            "cpe:2.3:a:nvidia:cuda_toolkit:7.5:*:*:*:*:*:*:*",
            "cpe:2.3:a:nvidia:cuda_toolkit:8.0:*:*:*:*:*:*:*",
            "cpe:2.3:a:nvidia:cuda_toolkit:9.0:*:*:*:*:*:*:*",
            "cpe:2.3:a:nvidia:cuda_toolkit:9.0.176:*:*:*:*:*:*:*",
            "cpe:2.3:a:nvidia:cuda_toolkit:9.1:*:*:*:*:*:*:*",
            "cpe:2.3:a:nvidia:cuda_toolkit:9.2:*:*:*:*:*:*:*",
            "cpe:2.3:a:nvidia:cuda_toolkit:10.0:*:*:*:*:*:*:*",
            "cpe:2.3:a:nvidia:cuda_toolkit:10.0.130:*:*:*:*:*:*:*",
            "cpe:2.3:a:nvidia:cuda_toolkit:10.1:*:*:*:*:*:*:*",
            "cpe:2.3:a:nvidia:cuda_toolkit:10.2:*:*:*:*:*:*:*",
            "cpe:2.3:a:nvidia:cuda_toolkit:10.2.89:*:*:*:*:*:*:*",
            "cpe:2.3:a:nvidia:cuda_toolkit:11.0.0:*:*:*:*:*:*:*",
            "cpe:2.3:a:nvidia:cuda_toolkit:11.0.1:*:*:*:*:*:*:*",
            "cpe:2.3:a:nvidia:cuda_toolkit:11.0.2:*:*:*:*:*:*:*",
            "cpe:2.3:a:nvidia:cuda_toolkit:11.0.3:*:*:*:*:*:*:*",
            "cpe:2.3:a:nvidia:cuda_toolkit:11.1.0:*:*:*:*:*:*:*",
            "cpe:2.3:a:nvidia:cuda_toolkit:11.1.1:*:*:*:*:*:*:*",
            "cpe:2.3:a:nvidia:cuda_toolkit:11.2.0:*:*:*:*:*:*:*",
            "cpe:2.3:a:nvidia:cuda_toolkit:11.2.1:*:*:*:*:*:*:*",
            "cpe:2.3:a:nvidia:cuda_toolkit:11.2.2:*:*:*:*:*:*:*",
            "cpe:2.3:a:nvidia:cuda_toolkit:11.3.0:*:*:*:*:*:*:*",
            "cpe:2.3:a:nvidia:cuda_toolkit:11.3.1:*:*:*:*:*:*:*",
            "cpe:2.3:a:nvidia:cuda_toolkit:11.4.0:*:*:*:*:*:*:*",
            "cpe:2.3:a:nvidia:cuda_toolkit:11.4.2:*:*:*:*:*:*:*",
            "cpe:2.3:a:nvidia:cuda_toolkit:11.4.3:*:*:*:*:*:*:*",
            "cpe:2.3:a:nvidia:cuda_toolkit:11.4.4:*:*:*:*:*:*:*",
            "cpe:2.3:a:nvidia:cuda_toolkit:11.5.0:*:*:*:*:*:*:*",
            "cpe:2.3:a:nvidia:cuda_toolkit:11.5.1:*:*:*:*:*:*:*",
            "cpe:2.3:a:nvidia:cuda_toolkit:11.5.2:*:*:*:*:*:*:*",
            "cpe:2.3:a:nvidia:cuda_toolkit:11.6.0:*:*:*:*:*:*:*",
            "cpe:2.3:a:nvidia:cuda_toolkit:11.6.1:*:*:*:*:*:*:*",
            "cpe:2.3:a:nvidia:cuda_toolkit:11.6.2:*:*:*:*:*:*:*",
            "cpe:2.3:a:nvidia:cuda_toolkit:11.8:*:*:*:*:*:*:*",
            "cpe:2.3:o:linux:linux_kernel:-:*:*:*:*:*:*:*",
            "cpe:2.3:o:microsoft:windows:-:*:*:*:*:*:*:*"
        ],
        "vulnerable_configuration_cpe_2_2": [],
        "vulnerable_product": [
            "cpe:2.3:a:nvidia:cuda_toolkit:-:*:*:*:*:*:*:*",
            "cpe:2.3:a:nvidia:cuda_toolkit:1.0:*:*:*:*:*:*:*",
            "cpe:2.3:a:nvidia:cuda_toolkit:1.1:*:*:*:*:*:*:*",
            "cpe:2.3:a:nvidia:cuda_toolkit:2.0:*:*:*:*:*:*:*",
            "cpe:2.3:a:nvidia:cuda_toolkit:2.1:*:*:*:*:*:*:*",
            "cpe:2.3:a:nvidia:cuda_toolkit:2.2:*:*:*:*:*:*:*",
            "cpe:2.3:a:nvidia:cuda_toolkit:2.3:*:*:*:*:*:*:*",
            "cpe:2.3:a:nvidia:cuda_toolkit:3.0:*:*:*:*:*:*:*",
            "cpe:2.3:a:nvidia:cuda_toolkit:3.1:*:*:*:*:*:*:*",
            "cpe:2.3:a:nvidia:cuda_toolkit:3.2:*:*:*:*:*:*:*",
            "cpe:2.3:a:nvidia:cuda_toolkit:4.0:*:*:*:*:*:*:*",
            "cpe:2.3:a:nvidia:cuda_toolkit:4.1:*:*:*:*:*:*:*",
            "cpe:2.3:a:nvidia:cuda_toolkit:4.2:*:*:*:*:*:*:*",
            "cpe:2.3:a:nvidia:cuda_toolkit:5.0:*:*:*:*:*:*:*",
            "cpe:2.3:a:nvidia:cuda_toolkit:5.5:*:*:*:*:*:*:*",
            "cpe:2.3:a:nvidia:cuda_toolkit:6.0:*:*:*:*:*:*:*",
            "cpe:2.3:a:nvidia:cuda_toolkit:6.5:*:*:*:*:*:*:*",
            "cpe:2.3:a:nvidia:cuda_toolkit:7.0:*:*:*:*:*:*:*",
            "cpe:2.3:a:nvidia:cuda_toolkit:7.5:*:*:*:*:*:*:*",
            "cpe:2.3:a:nvidia:cuda_toolkit:8.0:*:*:*:*:*:*:*",
            "cpe:2.3:a:nvidia:cuda_toolkit:9.0:*:*:*:*:*:*:*",
            "cpe:2.3:a:nvidia:cuda_toolkit:9.0.176:*:*:*:*:*:*:*",
            "cpe:2.3:a:nvidia:cuda_toolkit:9.1:*:*:*:*:*:*:*",
            "cpe:2.3:a:nvidia:cuda_toolkit:9.2:*:*:*:*:*:*:*",
            "cpe:2.3:a:nvidia:cuda_toolkit:10.0:*:*:*:*:*:*:*",
            "cpe:2.3:a:nvidia:cuda_toolkit:10.0.130:*:*:*:*:*:*:*",
            "cpe:2.3:a:nvidia:cuda_toolkit:10.1:*:*:*:*:*:*:*",
            "cpe:2.3:a:nvidia:cuda_toolkit:10.2:*:*:*:*:*:*:*",
            "cpe:2.3:a:nvidia:cuda_toolkit:10.2.89:*:*:*:*:*:*:*",
            "cpe:2.3:a:nvidia:cuda_toolkit:11.0.0:*:*:*:*:*:*:*",
            "cpe:2.3:a:nvidia:cuda_toolkit:11.0.1:*:*:*:*:*:*:*",
            "cpe:2.3:a:nvidia:cuda_toolkit:11.0.2:*:*:*:*:*:*:*",
            "cpe:2.3:a:nvidia:cuda_toolkit:11.0.3:*:*:*:*:*:*:*",
            "cpe:2.3:a:nvidia:cuda_toolkit:11.1.0:*:*:*:*:*:*:*",
            "cpe:2.3:a:nvidia:cuda_toolkit:11.1.1:*:*:*:*:*:*:*",
            "cpe:2.3:a:nvidia:cuda_toolkit:11.2.0:*:*:*:*:*:*:*",
            "cpe:2.3:a:nvidia:cuda_toolkit:11.2.1:*:*:*:*:*:*:*",
            "cpe:2.3:a:nvidia:cuda_toolkit:11.2.2:*:*:*:*:*:*:*",
            "cpe:2.3:a:nvidia:cuda_toolkit:11.3.0:*:*:*:*:*:*:*",
            "cpe:2.3:a:nvidia:cuda_toolkit:11.3.1:*:*:*:*:*:*:*",
            "cpe:2.3:a:nvidia:cuda_toolkit:11.4.0:*:*:*:*:*:*:*",
            "cpe:2.3:a:nvidia:cuda_toolkit:11.4.2:*:*:*:*:*:*:*",
            "cpe:2.3:a:nvidia:cuda_toolkit:11.4.3:*:*:*:*:*:*:*",
            "cpe:2.3:a:nvidia:cuda_toolkit:11.4.4:*:*:*:*:*:*:*",
            "cpe:2.3:a:nvidia:cuda_toolkit:11.5.0:*:*:*:*:*:*:*",
            "cpe:2.3:a:nvidia:cuda_toolkit:11.5.1:*:*:*:*:*:*:*",
            "cpe:2.3:a:nvidia:cuda_toolkit:11.5.2:*:*:*:*:*:*:*",
            "cpe:2.3:a:nvidia:cuda_toolkit:11.6.0:*:*:*:*:*:*:*",
            "cpe:2.3:a:nvidia:cuda_toolkit:11.6.1:*:*:*:*:*:*:*",
            "cpe:2.3:a:nvidia:cuda_toolkit:11.6.2:*:*:*:*:*:*:*",
            "cpe:2.3:a:nvidia:cuda_toolkit:11.8:*:*:*:*:*:*:*"
        ]
    }
]